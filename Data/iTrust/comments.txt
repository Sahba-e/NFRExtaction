iTrust_v21\src\edu\ncsu\csc\itrust\action\ActivityFeedAction.java-18:20
/*** Handles retrieving the log of record accesses for a given user Used by viewAccessLog.jsp
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ActivityFeedAction.java-27:32
/*** Set up
*
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param loggedInMID The MID of the person retrieving the logs.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ActivityFeedAction.java-40:47
/*** Returns a list of TransactionBeans between the two dates passed as params
* @param time time
* @param n Number of "pages" of 20 log entries to retrieve.
* @return list of 20*n TransactionBeans
* @throws DBException
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ActivityFeedAction.java-53:53
//user has either 0 or 1 DLHCP's. Get one if exists so it can be filtered from results

iTrust_v21\src\edu\ncsu\csc\itrust\action\ActivityFeedAction.java-63:70
/*** Returns an indicator of the number of days between the current date and the date passed
* as a parameter. Returns 0 if the dates are on the same day, 1 if the date passed in is
* "yesterday", 2 otherwise.
*
* @param d date
* @return 0, 1, or 2, depending on the difference in the dates.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ActivityFeedAction.java-83:90
/*** Pulls Action Phrase from the associated TransactionType Enum
* Forms an English sentence with actor, action, and timestamp.
* @param actor actor
* @param timestamp timestamp
* @param code code
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddApptRequestAction.java-16:19
/***
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddDrugListAction.java-28:32
/*** Loads the given file input stream into the drug database.
* @param fileContent
* @throws IOException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddDrugListAction.java-53:53
//Skip drug type field

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddDrugListAction.java-63:63
//We just want to skip duplicate-entries. Let it pass.

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddDrugListAction.java-83:83
//Skip drug type field

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddDrugListAction.java-93:93
//Overwrite duplicate entries

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddERespAction.java-13:20
/*** Used for Add Personnel page (addPersonnel.jsp). This just adds an empty HCP/UAP, creates a random password
* for them.
*
* Very similar to {@link AddOfficeVisitAction} and {@link AddPatientAction}
*
* Copied from AddHCPAction
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddERespAction.java-25:30
/*** Sets up the defaults for the class
*
* @param factory factory for creating the defaults.
* @param loggedInMID person currently logged in
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddERespAction.java-37:44
/*** Adds the new user.  Event is logged.
*
* @param p bean containing the information for the new user
* @return MID of the new user.
* @throws FormValidationException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddExerciseEntryAction.java-13:19
/*** AddExerciseEntryAction.java
* Version 1
* 4/2/2015
* Copyright notice: none
* Responsible for adding a new exercise entry to a patient's Exercise Diary.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddExerciseEntryAction.java-26:33
/*** Uses the factory to instantiate the ExerciseEntryDAO
*
* @param factory
*            which DAOFactory to use
* @param loggedInMID
*            who is currently logged in
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddExerciseEntryAction.java-40:53
/*** Adds a new exercise entry to the exercise diary of the specified patient.
* Currently it checks to ensure that the patient whose exercise dairy we are
* adding to is the logged in patient, and that the patient exists.
* Since only patients can add to only their own exercise diaries,
* we do not need the MID of the patient whose exercise diary we are adding to,
* we just use the MID of the logged in user.
*
* @param entry
*            the ExerciseEntryBean to add to the exercise Diary
* @return Either a string saying the exercise entry was added successfully, or
*         a string saying there was an error
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddFoodEntryAction.java-13:16
/*** AddFoodEntryAction.java Version 1 2/21/2015 Copyright notice: none
* Responsible for adding a new food entry to a patient's Food Diary.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddFoodEntryAction.java-23:30
/*** Uses the factory to instantiate the foodentrydao
*
* @param factory
*            which DAOFactory to use
* @param loggedInMID
*            who is currently logged in
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddFoodEntryAction.java-37:51
/*** Adds a new food entry to the food diary of the specified patient.
* Currently it checks to ensure that the patient whose food dairy we are
* adding to is the logged in patient, and that the patient exists, but I
* don't know if we need to have those checks. Since only patients can add
* to only their own food diaries, we do not need the MID of the patient
* whose food diary we are adding to, we just use the MID of the logged in
* user.
*
* @param entry
*            the FoodEntryBean to add to the Food Diary
* @return Either a string saying the food entry was added successfully, or
*         a string saying there was an error
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddHCPAction.java-13:20
/*** Used for Add Personnel page (addPersonnel.jsp). This just adds an empty HCP/UAP, creates a random password
* for them.
*
* Very similar to {@link AddOfficeVisitAction} and {@link AddPatientAction}
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddHCPAction.java-24:29
/*** Sets up the defaults for the class
*
* @param factory factory for creating the defaults.
* @param loggedInMID person currently logged in
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddHCPAction.java-36:43
/*** Adds the new user.   Event is logged.
*
* @param p bean containing the information for the new user
* @return MID of the new user.
* @throws FormValidationException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddLTAction.java-13:18
/*** Used for Add Personnel page (addPersonnel.jsp). This just adds an empty LT, creates a random password
* for them.
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddLTAction.java-22:27
/*** Sets up the defaults for the class
*
* @param factory factory for creating the defaults.
* @param loggedInMID person currently logged in
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddLTAction.java-34:41
/*** Adds the new user.   Event is logged.
*
* @param p bean containing the information for the new user
* @return MID of the new user.
* @throws FormValidationException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddObstetricsAction.java-24:30
/*** Used for add obstetrics record page (addObstetricsRecord.jsp).
*
* Very similar to {@link AddOfficeVisitAction}
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddObstetricsAction.java-42:47
/*** Just the factory and logged in MID
*
* @param factory
* @param loggedInMID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddObstetricsAction.java-60:67
/*** Add a new obstetrics record
*
* @param p ObstetricsRecordBean containing the info for the record to be created
* @param flags FlagsBean ArrayList containing all flags manually set on the form that submitted this
* @throws FormValidationException if the patient is not successfully validated
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddObstetricsAction.java-75:75
//if not an office visit

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddObstetricsAction.java-85:85
//else, it is an office visit

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddObstetricsAction.java-97:97
//add the obstetrics record to the database

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddObstetricsAction.java-103:103
//set the manual flags first to load from later and pull if twins is set

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddObstetricsAction.java-111:111
//Office Visit flags

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddObstetricsAction.java-113:113
//Weight flag processing

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddObstetricsAction.java-116:116
//can only do BMI calculations if a normal office visit (with height/weight) exists before LMP

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddObstetricsAction.java-125:125
//calculate the original BMI

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddObstetricsAction.java-129:129
//find the expected weight offsets in BMI/weight tables

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddObstetricsAction.java-131:131
//This is the correct upper bound

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddObstetricsAction.java-134:134
//If not in expected twins range

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddObstetricsAction.java-140:140
//If not in expected range

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddObstetricsAction.java-151:151
//Set weight flag if needed

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddObstetricsAction.java-163:163
//Set FHR flag if needed

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddObstetricsAction.java-176:176
//Set BP flag if needed

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddObstetricsAction.java-190:190
//UC67: Allergies Flag

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddObstetricsAction.java-198:198
//Advanced maternal age flag

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddObstetricsAction.java-209:209
//Rh- flag

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddObstetricsAction.java-219:219
//Genetic miscarriage flag

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddObstetricsAction.java-237:237
//Pre-existing conditions flag

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOfficeVisitAction.java-11:18
/*** Used for Document Office Visit page (documentOfficeVisit.jsp). This just adds an empty office visit, and
* provides a list of office visits in case you want to edit an old office visit.
*
* Very similar to {@link AddPatientAction}
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOfficeVisitAction.java-23:29
/*** Sets up the defaults for the class
* @param factory
* @param pidString
*            Patient ID to be validated by the superclass, {@link PatientBaseAction}
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOfficeVisitAction.java-36:43
/*** Adds an empty office visit
*
* @param loggedInMID
*            For logging purposes
* @return Office visit ID (primary key) of the new office visit
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOfficeVisitAction.java-52:58
/*** Lists all office visits for a particular patient, regardless of who originally documented the office
* visit.
*
* @return List of office visits,
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOfficeVisitAction.java-63:69
/*** Returns the full name of the patient with this MID
*
* @return name in the form of a string
* @throws DBException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOphthalmologyOVAction.java-11:15
/*** Used for add ophthalmology office visit page (addOphalmologyOVRecord.jsp).
*
* Very similar to {@link AddObstetricsAction}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOphthalmologyOVAction.java-17:18
/**ophthalmologyOVDAO is the DAO that retrieves the ophthalmology office*  visit records from the database*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOphthalmologyOVAction.java-20:20
/**loggedInMID is the HCP that is logged in.*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOphthalmologyOVAction.java-22:22
/**loggingAction is used to write to the log.*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOphthalmologyOVAction.java-25:30
/*** AddOphthalmologyOVAction is the constructor for this action class. It simply initializes the
* instance variables.
* @param factory The factory used to get the obstetricsDAO.
* @param loggedInMID The MID of the logged in user.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOphthalmologyOVAction.java-37:42
/*** Adds a new ophthalmology office visit record.
* @param p OphthalmologyOVRecordBean containing the info for the record to be created.
* @throws FormValidationException if the patient is not successfully validated.
* @throws ITrustException thrown if the database encounters an issue.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOphthalmologyOVAction.java-46:46
//Validate the bean

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOphthalmologyOVAction.java-49:49
//Add the ophthalmology office visit record to the database

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOphthalmologyOVAction.java-52:52
//Log the transaction

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOphthalmologyScheduleOVAction.java-16:18
/*** Used for add ophthalmology office visit requests.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOphthalmologyScheduleOVAction.java-20:21
/** ophthalmologyOVDAO is the DAO that adds the ophthalmology scheduled office*  visit records to the database*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOphthalmologyScheduleOVAction.java-23:23
/** PatientDAO for working with patient objects in the database*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOphthalmologyScheduleOVAction.java-26:31
/*** AddOphthalmologyScheduleOVAction is the constructor for this action class. It simply initializes the
* instance variables.
* @param factory The factory used to get the obstetricsDAO.
* @param loggedInMID The MID of the logged in user.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOphthalmologyScheduleOVAction.java-37:42
/*** Adds a new ophthalmology scheduled office visit record.
* @param p OphthalmologyScheduleOVRecordBean containing the info for the record to be created.
* @throws FormValidationException if the patient is not successfully validated.
* @throws ITrustException thrown if the database encounters an issue.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOphthalmologyScheduleOVAction.java-48:48
//Add the ophthalmology office visit record to the database

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOphthalmologyScheduleOVAction.java-55:59
/*** Returns a list of PersonnelBeans of all ophthalmology personnel, ie doctors with the specialty of ophthalmologist or optometrist
*
* @return a list of PersonnelBeans of all ophthalmology personnel
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOphthalmologyScheduleOVAction.java-65:65
//If a DBException occurs print a stack trace and return an empty list

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOphthalmologySurgeryAction.java-11:15
/*** Used for add ophthalmology office visit page (addOphalmologySurgeryRecord.jsp).
*
* Very similar to {@link AddObstetricsAction}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOphthalmologySurgeryAction.java-17:18
/**ophthalmologySurgeryDAO is the DAO that retrieves the surgical ophthalmology* office visit records from the database*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOphthalmologySurgeryAction.java-20:20
/**loggedInMID is the HCP that is logged in.*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOphthalmologySurgeryAction.java-22:22
/**loggingAction is used to write to the log.*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOphthalmologySurgeryAction.java-25:30
/*** AddOphthalmologySurgeryAction is the constructor for this action class. It simply initializes the
* instance variables.
* @param factory The factory used to get the ophthalmologySurgeryRecordDAO.
* @param loggedInMID The MID of the logged in user.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOphthalmologySurgeryAction.java-37:42
/*** Adds a new ophthalmology office visit record.
* @param p OphthalmologySurgeryRecordBean containing the info for the record to be created.
* @throws FormValidationException if the patient is not successfully validated.
* @throws ITrustException thrown if the database encounters an issue.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOphthalmologySurgeryAction.java-46:46
//Validate the bean

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOphthalmologySurgeryAction.java-49:49
//Add the ophthalmology office visit record to the database

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddOphthalmologySurgeryAction.java-52:52
//Log the transaction

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientAction.java-14:21
/*** Used for Add Patient page (addPatient.jsp). This just adds an empty patient, creates a random password for
* that patient.
*
* Very similar to {@link AddOfficeVisitAction}
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientAction.java-27:32
/*** Just the factory and logged in MID
*
* @param factory
* @param loggedInMID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientAction.java-39:48
/*** Creates a new patient, returns the new MID. Adds a new user to the table with a
* specified dependency
*
* @param p patient to be created
* @param isDependent true if the patient is to be a dependent, false otherwise
* @return the new MID of the patient
* @throws FormValidationException if the patient is not successfully validated
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientFileAction.java-21:23
/*** Used for Upload Patient File page (uploadPatientFile.jsp).
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientFileAction.java-26:28
/*** Holds the accumulated list of errors from the CSVParser and this class
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientFileAction.java-30:32
/*** Holds the CSV header from the CSVParser
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientFileAction.java-34:36
/*** Holds the CSV data from the CSVParser
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientFileAction.java-38:40
/*** Holds the list of PatientBeans for passing back to the UI
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientFileAction.java-43:45
/*** List of fields required to be in the CSV
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientFileAction.java-47:49
/*** List of valid fields which can be included in the CSV
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientFileAction.java-53:55
/*** Array to map the required field lists above to the uploaded CSV header list (which may be in any order)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientFileAction.java-57:59
/*** Array to map the valid field lists above to the uploaded CSV header list (which may be in any order)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientFileAction.java-62:64
/*** PatientDAO used to add patients to the DB
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientFileAction.java-66:68
/*** AuthDAO to provide authorization for the patient actions
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientFileAction.java-70:72
/*** MID of the HCP performing the request
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientFileAction.java-76:83
/*** Accepts the DAO factory and the CSV stream from the view and parses it.
*
* @param factory The DAO factory
* @param loggedInMID The MID of the HCP
* @param CSVStream The CSV stream uploaded by the user
* @throws CSVFormatException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientFileAction.java-102:106
/*** Gets the patient list
*
* @return ArrayList<PatientBean> The patients from the parsed file
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientFileAction.java-111:115
/*** Gets the error list
*
* @return ErrorList All errors encountered while parsing
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientFileAction.java-120:126
/*** Builds the mappings between the local arrays and the CSV file
* Also checks for missing required, duplicate, and invalid fields
*
* @param CSVHeader
* @throws AddPatientFileExceptionTest
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientFileAction.java-162:167
/*** Creates the patients and adds them to the DB
*
* @throws DBException
* @throws AddPatientFileExceptionTest
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientFileAction.java-179:179
//TODO

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientFileAction.java-184:184
//TODO

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientFileAction.java-189:189
//TODO

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientFileAction.java-194:194
//TODO

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientFileAction.java-199:199
//TODO

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientFileAction.java-204:204
//TODO

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientFileAction.java-209:209
//TODO

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientFileAction.java-214:214
//TODO

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientFileAction.java-219:219
//TODO

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPatientFileAction.java-224:224
//TODO

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPHAAction.java-13:19
/*** Used for Add Personnel page (addPersonnel.jsp). This just adds an empty PHA, creates a random password
* for them.
*
* Very similar to {@link AddOfficeVisitAction} and {@link AddPatientAction}
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPHAAction.java-23:28
/*** Sets up the defaults for the class
*
* @param factory factory for creating the defaults.
* @param loggedInMID person currently logged in
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddPHAAction.java-35:42
/*** Adds the new user.   Event is logged.
*
* @param p bean containing the information for the new user
* @return MID of the new user.
* @throws FormValidationException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddRemoteMonitoringDataAction.java-14:17
/*** Handles adding remote monitoring patient data to the database
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddRemoteMonitoringDataAction.java-25:31
/*** Constructor
*
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param loggedInMID The MID of the person recording the patient's data.
* @param patientMID The MID of the patient
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddRemoteMonitoringDataAction.java-43:49
/*** Adds a patient's telemedicine data to the database.
*
* @param weight
* @param pedometerReading
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddRemoteMonitoringDataAction.java-62:62
//Store in DB

iTrust_v21\src\edu\ncsu\csc\itrust\action\AddRemoteMonitoringDataAction.java-66:72
/*** returns the patient name
*
* @return patient name
* @throws DBException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddSleepEntryAction.java-13:19
/*** AddSleepEntryAction.java
* Version 1
* 4/6/2015
* Copyright notice: none
* Responsible for adding a new sleep entry to a patient's Sleep Diary.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddSleepEntryAction.java-26:33
/*** Uses the factory to instantiate the SleepEntryDAO
*
* @param factory
*            which DAOFactory to use
* @param loggedInMID
*            who is currently logged in
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddSleepEntryAction.java-40:53
/*** Adds a new sleep entry to the sleep diary of the specified patient.
* Currently it checks to ensure that the patient whose sleep dairy we are
* adding to is the logged in patient, and that the patient exists.
* Since only patients can add to only their own sleep diaries,
* we do not need the MID of the patient whose sleep diary we are adding to,
* we just use the MID of the logged in user.
*
* @param entry
*            the SleepEntryBean to add to the sleep Diary
* @return Either a string saying the sleep entry was added successfully, or
*         a string saying there was an error
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddUAPAction.java-13:20
/*** Used for Add Personnel page (addPersonnel.jsp). This just adds an empty HCP/UAP, creates a random password
* for them.
*
* Very similar to {@link AddOfficeVisitAction} and {@link AddPatientAction}
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddUAPAction.java-24:29
/*** Sets up the defaults for the class
*
* @param factory factory for creating the defaults.
* @param loggedInMID person currently logged in
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\AddUAPAction.java-36:43
/*** Adds the new user.  Event is logged.
*
* @param p bean containing the information for the new user
* @return MID of the new user.
* @throws FormValidationException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ApptAction.java-13:15
/*** ApptAction
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ApptAction.java-18:18
/**apptDAO*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\ApptAction.java-20:20
/**patientDAO*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\ApptAction.java-22:22
/**personnelDAO*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\ApptAction.java-25:29
/*** ApptAction
* @param factory factory
* @param loggedInMID loggedMID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ApptAction.java-36:43
/*** Driver method to get all appointment conflicts, used in jsp files
* @param mid mid
* @param appt appt
* @return conflicts
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ApptAction.java-48:54
/*** returns a list of appointments that conflict for a given patient/hcp
* @param mid the MID of the user
* @return list of apptBeans
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ApptAction.java-62:68
/*** Gets a users's name from their MID
*
* @param mid the MID of the user
* @return the user's name
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\AddEntryAction.java-6:14
/*** AddEntryAction.java
* Version 1
* 4/2/2015
* Copyright notice: none
* General behavior for adding entries to a Wellness Diary subcategory.
* Food Diary.
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\AddEntryAction.java-16:23
/*** Adds a new entry to its associated diary in the database.
*
* @param entry
*            the Bean to add.
* @return Success/error message.
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\DeleteEntryAction.java-6:13
/*** Deletes a diary entry from the db
*
* @param entryID
*            the entry to delete
* @return the number of rows deleted (should never exceed 1)
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\EditEntryAction.java-8:18
/*** Communicates changes between a JSP page and the server for a given
* Wellness Diary entry.
*
* @param entry
*            the bean to be updated
* @return the number of rows updated (0 means nothing happened, -1 means
*         the logged in user cannot edit this entry, and anything else is
*         the number of rows updated which should never exceed 1)
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\EditOfficeVisitBaseAction.java-1:3
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\EditOfficeVisitBaseAction.java-9:15
/*** Base class for actions used to edit office visits.  This stores the HCP id,
* patient id, and office visit id.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\EditOfficeVisitBaseAction.java-21:26
/*** @param factory
* @param pidString
* @param ovIDString
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\EditOfficeVisitBaseAction.java-34:41
/*** An office visit that is initially unsaved.
*
* @param factory
* @param hcpid
* @param pidString
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\EditOfficeVisitBaseAction.java-48:52
/*** Get the HCP id.
*
* @return the HCP id
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\OfficeVisitBaseAction.java-7:20
/*** An abstract class which contains functionalities common among all actions relating to inserting and editing
* office visits. Because all office visits are with a certain patient, OfficeVisitBaseAction extends
* PatientBaseAction.
*
* Use this class whenever you have a page which not only requires a patient MID, but an office visit ID. Pass
* those IDs to the constructor, and an exception will be thrown if they are not valid IDs (which should kick
* the user out to the home page).
*
* The concrete methods created by this class allow for its association with the unique identifier of a given
* office visit. These identifiers can also be verified for their correctness and existence.
*
* Very similar to {@link PatientBaseAction} and {@link PersonnelBaseAction}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\OfficeVisitBaseAction.java-24:26
/*** A database access object for dealing with office visits.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\OfficeVisitBaseAction.java-29:31
/*** The unique identifier of the office visit this action is associated with.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\OfficeVisitBaseAction.java-34:45
/*** The default constructor.
*
* @param factory
*            A database access object factory for supplying a runtime context.
* @param pidString
*            The patient's MID as a String, to be passed to the super constructor (for PatientBaseAction)
* @param ovIDString
*            The unique identifier of the office visit as a String.
* @throws ITrustException
*             If any of the supplied parameters is incorrect or there is a DB problem.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\OfficeVisitBaseAction.java-54:62
/*** Constructs an action that is initially unsaved.  Like the three-argument
* constructor except that the office visit id is a sentinel value and does
* not represent a valid office visit.
*
* @param factory
* @param pidString
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\OfficeVisitBaseAction.java-70:79
/*** Asserts whether this unique office visit identifier both exists and is associated with the patient in
* the database.
*
* @param input
*            The presumed identifier as a String.
* @return The same identifier as a long of the existing office visit.
* @throws ITrustException
*             If the visit does not exist or if there is a DB problem.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\OfficeVisitBaseAction.java-95:98
/*** Indicates if the office visit has been saved or not.
* @return boolean that indicates if this has been saved.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\OfficeVisitBaseAction.java-103:107
/*** Raises an exception if the office visit has not been saved.  Otherwise,
* does nothing.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\OfficeVisitBaseAction.java-114:118
/*** For obtaining the unique identifier of the office visit this action is associated with.
*
* @return A long of the identifier.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\OfficeVisitBaseAction.java-123:131
/*** Converts all characters of the input string to their HTML special characters equivalent representation.
* Explicitly, the less than symbol becomes lt, the greater than symbol becomes gt and a newline feed
* becomes br.
*
* @param input
*            The string to encode.
* @return The encoded string.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\PatientBaseAction.java-7:20
/*** An abstract class for dealing with actions that require an associated patient. The concrete functionality
* provided by this class allows for asserting the correctness and existence of patients' MIDs.
*
* Use this class whenever your JSP requires a patient ID when it loads (e.g. editPatient.jsp). The patient
* string is passed to the constructor of this class and is checked for both format and existence. If the
* patient ID is wrong in any way, an exception is thrown, resulting in the user getting kicked out to the
* home page.
*
* Very similar to {@link PersonnelBaseAction} and {@link OfficeVisitBaseAction}
*
* Subclasses need not rewrite this functionality, and they are not held to any strict contract to extend this
* class.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\PatientBaseAction.java-23:25
/*** The database access object factory to associate this with a runtime context.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\PatientBaseAction.java-28:30
/*** Stores the MID of the patient associated with this action.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\PatientBaseAction.java-33:42
/*** The default constructor.
*
* @param factory
*            A factory to create a database access object.
* @param pidString
*            The patient's ID to associate with this action.
* @throws ITrustException
*             If the patient's ID is incorrect or there is a DB problem.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\PatientBaseAction.java-48:56
/*** Asserts whether the input is a valid, existing patient's MID.
*
* @param input
*            The presumed MID
* @return The existing patient's ID as a long.
* @throws ITrustException
*             If the patient does not exist or there is a DB Problem.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\PatientBaseAction.java-73:77
/*** Retrieves the identifier of the patient as a long.
*
* @return The patient's MID.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\PersonnelBaseAction.java-6:19
/*** An abstract class for dealing with actions that require an associated personnel. The concrete functionality
* provided by this class allows for asserting the correctness and existence of personnel' MIDs.
*
* Use this class whenever your JSP requires a personnel ID when it loads (e.g. editPatient.jsp). The patient
* string is passed to the constructor of this class and is checked for both format and existence. If the
* patient ID is wrong in any way, an exception is thrown, resulting in the user getting kicked out to the
* home page.
*
* Subclasses need not rewrite this functionality, and they are not held to any strict contract to extend this
* class.
*
* Very similar to {@link PatientBaseAction}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\PersonnelBaseAction.java-22:24
/*** The database access object factory to associate this with a runtime context.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\PersonnelBaseAction.java-27:29
/*** Stores the MID of the personnel associated with this action.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\PersonnelBaseAction.java-32:41
/*** The default constructor.
*
* @param factory
*            A factory to create a database access object.
* @param pidString
*            The personnel's ID to associate with this action.
* @throws ITrustException
*             If the personnel's ID is incorrect or there is a DB problem.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\PersonnelBaseAction.java-47:55
/*** Asserts whether the input is a valid, existing personnel's MID.
*
* @param input
*            The presumed MID
* @return The existing personnel's ID as a long.
* @throws ITrustException
*             If the personnel does not exist or there is a DB Problem.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\PersonnelBaseAction.java-68:72
/*** Retrieves the identifier of the patient as a long.
*
* @return The patient's MID.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\ViewEntryAction.java-9:17
/*** ViewEntryAction.java
* Version 1
* 4/2/2015
* Copyright notice: none
* General behavior for viewing entries in the Wellness Diary.
* Food Diary.
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\ViewEntryAction.java-20:26
/*** Gets all entries in the diary for a given patient.
*
* @param patientMID
*            the id of the patient whose diary we want
* @return a list of the patient's diary entries
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\ViewEntryAction.java-29:38
/*** Gets the totals relevant to the specific Wellness
* Diary page, sorted by day.
*
* @param patientMID
*            the patient we are looking at
* @return an entry that contains the totals for each day that
*         a user has an entry in his diary
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\ViewEntryAction.java-41:51
/*** Returns a list of diary entries between two dates.
*
* @param lowerDate
*            the first date
* @param upperDate
*            the second date
* @return list of TransactionBeans
* @throws DBException
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\base\ViewEntryAction.java-55:68
/*** Gets the totals relevant to the specific Wellness Diary
* page, bound between two dates, sorted by entry date.
*
* @param lowerDate
*            the first date
* @param upperDate
*            the second date
* @param patientMID
*            the patient we are looking at
* @return an entry that contains the totals for each
*         day in the bounded range.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ChangePasswordAction.java-10:14
/*** Manages resetting the password Used by resetPassword.jsp
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ChangePasswordAction.java-19:22
/*** Set up defaults
* @param factory The DAOFactory used to create the DAOs used in this action.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ChangePasswordAction.java-27:38
/*** Changes the password for the given mid
*
* @param mid of the user to have their password reset
* @param oldPass their old password
* @param newPass their desired password
* @param confirmPass their desired password again
* @return status message
* @throws FormValidationException
* @throws DBException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ChangePasswordAction.java-45:45
//Make sure old password is valid

iTrust_v21\src\edu\ncsu\csc\itrust\action\ChangePasswordAction.java-50:50
//Make sure new passwords match

iTrust_v21\src\edu\ncsu\csc\itrust\action\ChangePasswordAction.java-55:55
//Validate password. Must contain a letter, contain a number, and be a string of 5-20 alphanumeric characters

iTrust_v21\src\edu\ncsu\csc\itrust\action\ChangePasswordAction.java-57:57
//Change the password

iTrust_v21\src\edu\ncsu\csc\itrust\action\ChangePasswordAction.java-75:75
//TODO change the capacity in the byte array to match that of the original password

iTrust_v21\src\edu\ncsu\csc\itrust\action\ChangePasswordAction.java-65:80
/*** Generate a new more secure hashed and randomly salted password based on the users
* new desired password passed in as a String.
* @param newpas String, desired new plain text password
* @return
private String genPassword(String newpas){
String pas = "";
SecureRandom rand = new SecureRandom();
byte newbie[] = new byte[32];
sr.
return pas;
}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ChangePasswordAction.java-81:81
//TODO: note, increasing password security will mean changing also how passwords are stored and retrieved to also include the salts for that hash

iTrust_v21\src\edu\ncsu\csc\itrust\action\ChangePasswordAction.java-83:83
//generate a new salt for each time a user account is made

iTrust_v21\src\edu\ncsu\csc\itrust\action\ChangeSessionTimeoutAction.java-8:12
/*** Used to change the session timeout, sessionTimeout.jsp. Note that a change to this timeout only gets
* reflected on new sessions.
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ChangeSessionTimeoutAction.java-16:20
/*** Sets up defualts.
*
* @param factory
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ChangeSessionTimeoutAction.java-25:33
/*** Changes the session timeout, the complicated logic of this is somewhat regrettably in the DAO,
* {@link AccessDAO}
*
* @param minuteString
*            Pass the number of minutes in the form of a string, greater than 0.
* @throws FormValidationException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ChangeSessionTimeoutAction.java-45:50
/*** Returns the current session timeout in minutes, as reflected in the database
*
* @return the number of minutes it would take for an inactive session to timeout
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ChronicDiseaseRiskAction.java-13:19
/***
* Used for chronicDiseaseRisks.jsp. Passes most of the logic off to {@link ChronicDiseaseMediator}, and the
* various subclasses of {@link RiskChecker}.
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ChronicDiseaseRiskAction.java-24:35
/***
* @param factory
* @param loggedInMID
* @param pidString
*            The patient ID to be validated and used
* @throws ITrustException
* @throws DBException
* @throws NoHealthRecordsException
*             This is thrown if a patient is added without any health records to be checked. Try to avoid
*             having this exception be thrown in a normal flow of events.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ChronicDiseaseRiskAction.java-43:47
/*** Returns the ID of the patient to be checked.
*
* @return patient ID whose risk we are checking
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ChronicDiseaseRiskAction.java-52:58
/*** Gives the full name of the patient
*
* @return Full name of the patient who we are checking
* @throws DBException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ChronicDiseaseRiskAction.java-63:70
/*** Returns the risks for which this patient is at risk for. All logic has been passed to
* {@link ChronicDiseaseMediator} and the subclasses of {@link RiskChecker}.
*
* @return List of risks
* @throws ITrustException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\DeclareHCPAction.java-11:15
/*** Used by the patient to declare HCPs as "designated", in editHCPs.jsp.
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\DeclareHCPAction.java-21:27
/*** Sets up defaults
*
* @param factory The DAO factory to be used for generating the DAOs for this action.
* @param loggedInMID
*            This patient
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\DeclareHCPAction.java-34:39
/*** Lists the declared HCPs for this current patient
*
* @return Returns a list of the declared HCPs
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\DeclareHCPAction.java-44:51
/*** Validate an HCP's MID and declare them, if possible
*
* @param hcpStr
*            The MID of an HCP to declare
* @return A status message,
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\DeclareHCPAction.java-69:76
/*** Validate an HCP's MID and undeclare them, if possible
*
* @param input
*            The MID of an HCP to undeclare
* @return
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\DeleteExerciseEntryAction.java-9:12
/*** DeleteExerciseEntryAction.java Version 1 4/5/2105 Copyright notice: none
* Responsible for deleting an exercise entry from a patient's Exercise Diary.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\DeleteExerciseEntryAction.java-18:25
/*** Uses the factory to instantiate the ExerciseEntryDAO
*
* @param factory
*            which DAOFactory to use
* @param loggedInMID
*            who is currently logged in
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\DeleteExerciseEntryAction.java-31:38
/*** Deletes a exercise entry from the db
*
* @param entryID
*            the exercise entry to delete
* @return the number of rows deleted (should never exceed 1)
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\DeleteFoodEntryAction.java-10:21
/*** DeleteFoodEntryAction.java
* Version 1
* 2/26/2105
* Copyright notice: none
* Responsible for deleting a food entry from a patient's
* Food Diary.
* I would like to include validation here that a patient
* is not trying to delete somebody else's food entry, but I do
* not see how to do that without querying the database first,
* and I would prefer to keep trips to db as low as possible.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\DeleteFoodEntryAction.java-27:31
/*** Uses the factory to instantiate the foodentrydao
* @param factory which DAOFactory to use
* @param loggedInMID who is currently logged in
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\DeleteFoodEntryAction.java-37:42
/*** Deletes a food entry from the db
* @param entryID the food entry to delete
* @return the number of rows deleted (should never exceed 1)
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\DeleteSleepEntryAction.java-9:15
/*** DeleteSleepEntryAction.java
* Version 1
* 4/6/2105
* Copyright notice: none
* Responsible for deleting an sleep entry from a patient's Sleep Diary.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\DeleteSleepEntryAction.java-21:28
/*** Uses the factory to instantiate the SleepEntryDAO
*
* @param factory
*            which DAOFactory to use
* @param loggedInMID
*            who is currently logged in
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\DeleteSleepEntryAction.java-34:41
/*** Deletes a sleep entry from the db
*
* @param entryID
*            the sleep entry to delete
* @return the number of rows deleted (should never exceed 1)
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\DesignateNutritionistAction.java-12:16
/*** Responsible for allowing only designated nutritionists
* to view the Nutritional information of patients. Patients
* can declare their designated nutritionist
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\DesignateNutritionistAction.java-29:32
/*** Returns a list of all of the HCPs who have a specialty
* of Nutritionist
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\DesignateNutritionistAction.java-41:49
/*** Allows the patient to update who his designated nutritionist is.
* A patient may choose to have no designated nutritionist in which
* case no hcp may view his nutritional information.
* return 0 means nothing happened
* return -1 means the nutritionist is already his designated nutritionist
* return -2 means hcp is not a nutritionist
* return positive number means successful update
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\DesignateNutritionistAction.java-51:57
/* If the HCPID = -1 (HCPID can never be -1), then the* patient wishes to have 'None' as his selected hcp and
* we will delete it.
* if not -1, we will try first to just update it, and assume that
* the patient already has a designated nutritionist, if not
* we will add 1 for him
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\DesignateNutritionistAction.java-64:64
//the patient wants to update it to his current nutritionist

iTrust_v21\src\edu\ncsu\csc\itrust\action\DesignateNutritionistAction.java-70:70
//must first make sure the hcp in question has

iTrust_v21\src\edu\ncsu\csc\itrust\action\DesignateNutritionistAction.java-71:71
//specialty of nutritionist

iTrust_v21\src\edu\ncsu\csc\itrust\action\DrugInteractionAction.java-12:15
/*** Used by EditDrugInteraction.jsp to edit and get information about drug interactions.
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\DrugInteractionAction.java-20:25
/*** Sets up defaults
*
* @param factory The DAO factory to be used for generating the DAOs for this action.
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\DrugInteractionAction.java-31:37
/*** Method to report an interaction
* @param firstDrug
* @param secondDrug
* @param description
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\DrugInteractionAction.java-61:66
/*** Method to delete an interaction
* @param firstDrug
* @param secondDrug
* @return interaction
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\DrugInteractionAction.java-86:90
/*** Method to return a list of drug interactions for a given drug
* @param drugCode - The ND Code of the drug
* @return drugDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditApptAction.java-12:14
/*** EditApptAction
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditApptAction.java-19:23
/*** EditApptAction
* @param factory factory
* @param loggedInMID loggedInMID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditApptAction.java-28:36
/*** Retrieves an appointment from the database, given its ID.
* Returns null if there is no match, or multiple matches.
*
* @param apptID apptID
* @return ApptBean with matching ID
* @throws DBException
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditApptAction.java-49:58
/*** Updates an existing appointment
*
* @param appt Appointment Bean containing the updated information
* @param ignoreConflicts ignoreConflicts
* @return Message to be displayed
* @throws FormValidationException
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditApptAction.java-81:87
/*** Removes an existing appointment
*
* @param appt Appointment Bean containing the ID of the appointment to be removed.
* @return Message to be displayed
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditDiagnosesAction.java-1:3
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditDiagnosesAction.java-16:23
/*** Handle patients Diagnosis
* Edit Diagnosis
* Add Diagnosis
* Remove Diagnosis
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditExerciseEntryAction.java-13:20
/*** EditExerciseEntryAction.java
* Version 1
* 4/5/2105
* Copyright notice: none
* Responsible for editing a exercise entry from a patient's
* Exercise Diary.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditExerciseEntryAction.java-27:31
/*** Uses the factory to instantiate the ExerciseEntryDAO
* @param factory which DAOFactory to use
* @param loggedInMID who is currently logged in
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditExerciseEntryAction.java-38:48
/*** Edits the exercise entry of a patient. It first checks to make sure that the
* patient has the ability to edit this exercise entry because it belongs to
* him. Patients should only be able to edit entries that belong to them.
* @param exerciseEntry the bean to be updated
* @return the number of rows updated (0 means nothing happened,
* -1 means the logged in user cannot edit this exercise entry, and
* anything else is the number of rows updated which should never
* exceed 1)
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditExerciseEntryAction.java-58:58
//try to validate it

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditFoodEntryAction.java-13:20
/*** EditFoodEntryAction.java
* Version 1
* 2/26/2105
* Copyright notice: none
* Responsible for editing a food entry from a patient's
* Food Diary.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditFoodEntryAction.java-27:31
/*** Uses the factory to instantiate the foodentrydao
* @param factory which DAOFactory to use
* @param loggedInMID who is currently logged in
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditFoodEntryAction.java-38:48
/*** Edits the food entry of a patient. It first checks to make sure that the
* patient has the ability to edit this food entry because it belongs to
* him. Patients should only be able to edit entries that belong to them.
* @param foodEntry the bean to be updated
* @return the number of rows updated (0 means nothing happened,
* -1 means the logged in user cannot edit this food entry, and
* anything else is the number of rows updated which should never
* exceed 1)
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditFoodEntryAction.java-58:58
//try to validate it

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditHealthHistoryAction.java-21:25
/*** Edits the health history of a patient, used by viewBasicHealth.jsp
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditHealthHistoryAction.java-28:28
/** The number of months in a year */

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditHealthHistoryAction.java-30:30
/** The number of months in 3 years */

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditHealthHistoryAction.java-32:32
/** The number of months in 12 years */

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditHealthHistoryAction.java-44:51
/*** The patient ID is validated by the superclass
*
* @param factory The DAOFactory which will be used to generate the DAOs used for this action.
* @param loggedInMID The user authorizing this action.
* @param pidString The patient (or other user) who is being edited.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditHealthHistoryAction.java-59:66
/***
* @param factory
* @param hcpid
* @param pidString
* @param ovIDString
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditHealthHistoryAction.java-82:88
/*** returns the patient name
*
* @return patient name
* @throws DBException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditHealthHistoryAction.java-93:97
/*** Sets patient age for form validation when adding a new health record
*
* @param patientAge Age passed in from the EditOVBasicHealth.jsp
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditHealthHistoryAction.java-102:110
/*** Adds a health record for the given patient
*
* @param pid  The patient record who is being edited.
* @param hr  The filled out health record form to be added.
* @param ovID  The office visit id of the office visit from where the health record is added from
* @return message - "Information Recorded" or exception's message
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditHealthHistoryAction.java-134:134
//If there is already an existing health record with the specified office visit ID

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditHealthHistoryAction.java-136:136
//Remove the health record before adding a new one

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditHealthHistoryAction.java-147:154
/*** Moves the information from the form to a HealthRecord for a baby
*
* @param pid Patient of interest
* @param form Form to be translated
* @return A HealthRecord containing all the information in the form
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditHealthHistoryAction.java-167:174
/*** Moves the information from the form to a HealthRecord for a youth
*
* @param pid Patient of interest
* @param form Form to be translated
* @return A HealthRecord containing all the information in the form
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditHealthHistoryAction.java-189:196
/*** Moves the information from the form to a HealthRecord for an adult
*
* @param pid Patient of interest
* @param form Form to be translated
* @return A HealthRecord containing all the information in the form
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditHealthHistoryAction.java-215:221
/*** Returns a list of all HealthRecords for the given patient
*
* @param pid  The ID of the patient to look up
* @return list of HealthRecords
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditHealthHistoryAction.java-228:234
/*** Returns a HealthRecord related to a specific office visit ID
*
* @param ovID The office visit ID containing the health record of interest
* @return Health record specific to office visit ID
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditHealthHistoryAction.java-239:246
/***
* Removes a specific HealthRecord by office visit ID
*
* @param hr The HealthRecord to be removed
* @return A boolean indicating whether the removal was successful (true) or unsuccessful (false)
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditHealthHistoryAction.java-252:259
/*** Get patient's age in months by taking an office visit date and comparing it with the patient's
* date of birth.
*
* @param officeVisitDate The date of the office visit
* @return the patient's age in months
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditHealthHistoryAction.java-261:261
//Create int for patient's age in months

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditHealthHistoryAction.java-264:264
//Get the patient's birthdate

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditHealthHistoryAction.java-269:269
//Split the patient's birthdate into day, month, and year

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditHealthHistoryAction.java-273:273
//Split the office visit date into day month and year

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditHealthHistoryAction.java-278:278
//Calculate the year, month, and day differences

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditHealthHistoryAction.java-283:283
//Get the patient's age in months by multiplying the year difference by 12

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditHealthHistoryAction.java-284:284
//and adding the month difference

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditHealthHistoryAction.java-287:287
//If the day difference is negative, subtract a month from the age

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditHealthHistoryAction.java-292:292
//Return the age in months

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditImmunizationsAction.java-13:20
/*** Handle immunization for the patients
* Edit Immunizations
* Add Immunizations
* Delete Immunizations
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditLabProceduresAction.java-16:21
/*** Handles lab procedures
* add lab procedure
* Edit lab procedure
* Remove lab procedure
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditLabProceduresAction.java-28:35
/*** EditLabProceduresAction
* @param factory factory
* @param hcpid hcpid
* @param pidString pidString
* @param ovIDString ovIDString
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditLabProceduresAction.java-45:51
/*** EditLabProceduresAction
* @param factory factory
* @param hcpid hcpid
* @param pidString pidString
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditLabProceduresAction.java-62:66
/*** getLabProcedures
* @return list
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditLabProceduresAction.java-75:80
/*** getLabProcedure
* @param id id
* @return lab procedure
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditLabProceduresAction.java-86:90
/*** addLabProcedure
* @param bean bean
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditLabProceduresAction.java-93:93
//choose lab tech if not assigned in bean

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditLabProceduresAction.java-100:104
/*** editLabProcedure
* @param bean bean
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditLabProceduresAction.java-110:114
/*** deleteLabProcedure
* @param bean bean
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditLabProceduresAction.java-120:124
/*** getLabTechs
* @return lab techs
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditLabProceduresAction.java-129:134
/*** getLabTechName
* @param mid mid
* @return ""
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditLabProceduresAction.java-143:148
/*** getLabTechQueueSize
* @param mid mid
* @return lab tech queue size
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditLabProceduresAction.java-153:158
/*** getLabTechQueueSizeByPriority
* @param mid mid
* @return lab tech queue size by priority
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditLabProceduresAction.java-163:167
/*** getLabProcedureCodes
* @return get all loinc
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditMonitoringListAction.java-12:15
/*** Handles changes (adds and removes) to the monitoring list for a certain HCP.
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditMonitoringListAction.java-21:26
/*** Constructor
*
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param loggedInMID The MID of the HCP editing their monitoring list.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditMonitoringListAction.java-33:41
/*** Adds a patient to the current HCP's remote monitoring list
*
* @param patientMID the patient
* @param permissions Array indicating what data the patient is allowed to enter.
Ordered by Systolic Blood Pressure, Diastolic Blood Pressure, Glucose Level, Weight, Pedometer Reading.
* @return true if added successfully. False if already in list.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditMonitoringListAction.java-46:52
/*** Removes a patient from the current HCP's remote monitoring list
*
* @param patientMID the patient
* @return true if removed successfully. False if not in list.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditMonitoringListAction.java-57:62
/*** Returns whether a patient is in an HCP's list already
* @param patientMID the patient
* @return true if in DB, false otherwise
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditMonitoringListAction.java-72:78
/*** returns the patient name
*
* @return patient name
* @throws DBException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditObstetricsAction.java-28:33
/*** Just the factory and logged in MID
*
* @param factory
* @param loggedInMID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditObstetricsAction.java-45:45
//Get the current flag bean

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditObstetricsAction.java-75:75
//TODO set the calculation flags

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditObstetricsAction.java-81:81
//set the manual flags first to load from later and pull if twins is set

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditObstetricsAction.java-89:89
//Download the list of office visits for this patient

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditObstetricsAction.java-93:93
//Get FHR flag

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditObstetricsAction.java-101:101
//Get BP flag

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditObstetricsAction.java-109:109
//Weight flag processing

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditObstetricsAction.java-112:112
//can only do BMI calculations if a normal office visit (with height/weight) exists before LMP

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditObstetricsAction.java-117:117
//check if any record trigges any flags

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditObstetricsAction.java-120:120
//Do weight gain stuff

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditObstetricsAction.java-126:126
//caluclate the original BMI

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditObstetricsAction.java-131:131
//find the expected weight offsets in BMI/weight tables

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditObstetricsAction.java-133:133
//This is the correct upper bound

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditObstetricsAction.java-136:136
//If not in expected twins range

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditObstetricsAction.java-142:142
//If not in expected range

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditObstetricsAction.java-153:153
//do fhr stuff

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditObstetricsAction.java-160:160
//do bp stuff

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditObstetricsAction.java-171:171
//Set weight flag if needed

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOfficeVisitAction.java-22:30
/*** Edits the office visits of a patient Used by editOfficeVisit.jsp.  This
* exists in two states: saved and unsaved.  If unsaved, data cannot be saved
* to sub actions (if this is attempted, exceptions will be raised).  Once it
* is saved, however, the sub actions can be saved.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOfficeVisitAction.java-53:61
/*** Patient id and office visit id validated by super class
*
* @param factory The DAOFactory to be used in creating the DAOs for this action.
* @param loggedInMID The MID of the user who is authorizing this action.
* @param pidString The patient who this action is performed on.
* @param ovIDString The ID of the office visit in play.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOfficeVisitAction.java-85:94
/*** Create an OfficeVisitAction that is not yet associated with an actual
* office visit.  When update() is called, it will be saved.  Until then,
* any attempt to save health records, prescriptions, procedures, lab procedures,
* immunizations, or diagnoses will raise an exception.
* @param factory
* @param loggedInMID
* @param pidString
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOfficeVisitAction.java-118:122
/*** Used to update the sub actions once a office visit is saved.  Until this
* is called, attempting to save sub actions will raise an exception.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOfficeVisitAction.java-141:146
/*** Returns the office visit bean for the office visit
*
* @return the OfficeVisitBean of the office visit
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOfficeVisitAction.java-151:155
/*** Gets and returns the associated patient's health history record.
* @return The EditHealthHistoryACtoin sub action associated with this office visit.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOfficeVisitAction.java-159:162
/*** @return The EditPrescriptionsAction sub action associated with this office visit.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOfficeVisitAction.java-166:169
/*** @return The EditProceduresAction sub action associated with this office visit.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOfficeVisitAction.java-173:176
/*** @return The EditImmunizationsAction sub action associated with this office visit.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOfficeVisitAction.java-180:183
/*** @return The EditDiagnosesAction sub action associated with this office visit.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOfficeVisitAction.java-187:190
/*** @return The EditLabProceduresAction sub action associated with this office visit.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOfficeVisitAction.java-204:210
/*** This is a list of all hospitals, ordered by the office visit's hcp FIRST
*
* @param hcpID
* @return
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOfficeVisitAction.java-218:224
/*** Combines two lists of hospitals
*
* @param hcpsHospitals hospitals the HCP is assigned to
* @param allHospitals all hospitals
* @return the combined list
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOfficeVisitAction.java-233:242
/*** Updates the office visit with information from the form passed in.  If
* the office visit has not yet been saved, calling this method will save
* it as well as make the sub actions able to be saved.
*
* @param form
*            information to update
* @return "success" or exception's message
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOfficeVisitAction.java-255:261
/*** Helper that logs an office visit billing event.  The associated patient id, HCP
* id, and office visit id are automatically included.
* added with UC60
* @param trans Transaction type for the log.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOfficeVisitAction.java-266:271
/*** Helper that logs an office visit event.  The associated patient id, HCP
* id, and office visit id are automatically included.
* @param trans Transaction type for the log.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOfficeVisitAction.java-276:285
/***
* Sends e-mail regarding the prescribed dangerous drug.
*
* @param hcpID HCP the prescription is made by
* @param patID ID of the patient prescription is for
* @param problem The allergy and/or interaction that is the problem
* @return the sent e-mail
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOfficeVisitAction.java-300:306
/*** Updates the office visit.
*
* @param form form with all the information
* @throws DBException
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOfficeVisitAction.java-322:327
/*** @return The OfficeVisitBean associated with this office visit, or if it
* has not been saved, a default OfficeVisitBean with the HCP id and
* patient id filled in.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOfficeVisitAction.java-339:345
/*** Update the office visit with the given data.  If the office visit has
* not yet been saved, this will save it and reinitialize the sub actions.
* @param bean The data with which to update the office visit.
* @throws DBException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOPDiagnosesAction.java-1:3
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOPDiagnosesAction.java-13:20
/*** Handle patients Diagnosis
* Edit Diagnosis
* Add Diagnosis
* Remove Diagnosis
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOphthalmologyOVAction.java-11:15
/*** Used for edit ophthalmology office visit page (editOphalmologyOVRecord.jsp).
*
* Very similar to {@link EditObstetricsAction}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOphthalmologyOVAction.java-17:18
/**ophthalmologyOVDAO is the DAO that retrieves the ophthalmology office*  visit records from the database*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOphthalmologyOVAction.java-20:20
/**loggedInMID is the HCP that is logged in.*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOphthalmologyOVAction.java-22:22
/**loggingAction is used to write to the log.*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOphthalmologyOVAction.java-25:30
/*** EditOphthalmologyOVAction is the constructor for this action class. It simply initializes the
* instance variables.
* @param factory The factory used to get the obstetricsDAO.
* @param loggedInMID The MID of the logged in user.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOphthalmologyOVAction.java-37:43
/*** Edits an existing ophthalmology office visit record.
* @param oid The oid of the ophthalmology office visit.
* @param p OphthalmologyOVRecordBean containing the info for the record to be updated.
* @throws FormValidationException if the patient is not successfully validated.
* @throws ITrustException thrown if the database encounters an issue.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOphthalmologyScheduleOVAction.java-10:12
/*** Used for editing ophthalmology office visit requests.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOphthalmologyScheduleOVAction.java-14:15
/**ophthalmologyOVDAO is the DAO that retrieves the ophthalmology office*  visit records from the database*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOphthalmologyScheduleOVAction.java-18:23
/*** EditOphthalmologyScheduleOVAction is the constructor for this action class. It simply initializes the
* instance variables.
* @param factory The factory used to get the obstetricsDAO.
* @param loggedInMID The MID of the logged in user.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOphthalmologyScheduleOVAction.java-28:34
/*** Edits an existing ophthalmology scheduled office visit record.
* @param oid The oid of the ophthalmology scheduled office visit.
* @param p OphthalmologyScheduleOVRecordBean containing the info for the record to be updated.
* @throws FormValidationException if the patient is not successfully validated.
* @throws ITrustException thrown if the database encounters an issue.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOphthalmologySurgeryAction.java-11:15
/*** Used for edit ophthalmology office visit page (editOphalmologySurgeryRecord.jsp).
*
* Very similar to {@link EditObstetricsAction}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOphthalmologySurgeryAction.java-17:18
/**ophthalmologySurgeryDAO is the DAO that retrieves the ophthalmology office*  visit records from the database*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOphthalmologySurgeryAction.java-20:20
/**loggedInMID is the HCP that is logged in.*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOphthalmologySurgeryAction.java-22:22
/**loggingAction is used to write to the log.*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOphthalmologySurgeryAction.java-25:30
/*** EditOphthalmologySurgeryAction is the constructor for this action class. It simply initializes the
* instance variables.
* @param factory The factory used to get the obstetricsDAO.
* @param loggedInMID The MID of the logged in user.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditOphthalmologySurgeryAction.java-37:43
/*** Edits an existing ophthalmology office visit record.
* @param oid The oid of the ophthalmology office visit.
* @param p OphthalmologySurgeryRecordBean containing the info for the record to be updated.
* @throws FormValidationException if the patient is not successfully validated.
* @throws ITrustException thrown if the database encounters an issue.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPatientAction.java-22:26
/*** Edits a patient Used by editPatient.jsp
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPatientAction.java-35:42
/*** The super class validates the patient id
*
* @param factory The DAOFactory used to create the DAOs for this action.
* @param loggedInMID The MID of the user who is authorizing this action.
* @param pidString The MID of the patient being edited.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPatientAction.java-52:59
/*** Takes the information out of the PatientBean param and updates the patient's information
*
* @param p
*            the new patient information
* @throws ITrustException
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPatientAction.java-67:72
/*** Returns a PatientBean for the patient
*
* @return the PatientBean
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPatientAction.java-77:82
/***  Creates and e-mail to inform the patient that their information has been updated.
*
* @return the email with the notice
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPatientAction.java-103:106
/*** The DateOfDeactivationStr of the PatientBean when not null indicates that the user has been deactivated.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPatientAction.java-116:119
/*** The DateOfDeactivationStr of the PatientBean is null when the patient is activated
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPatientAction.java-144:144
//If a DBException occurs print a stack trace and return false

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPatientAction.java-157:157
//If a DBException occurs print a stack trace and return false

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPatientInstructionsAction.java-14:16
/*** Allows an HCP to add/edit/delete patient instructions for an office visit.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPatientInstructionsAction.java-21:28
/*** Creates an EditPatientInstructionsAction for an existing office visit.
* @param factory The DAO Factory.
* @param hcpid The HCP id.
* @param pidString The patient id as a string.
* @param ovIDString The office visit as a string.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPatientInstructionsAction.java-35:43
/*** Creates an EditPatientInstructionsAction for an non-existent office
* visit.  Most methods will throw exceptions if built with this
* constructor.
* @param factory
* @param hcpid  The HCP id.
* @param pidString The patient ID as a string.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPatientInstructionsAction.java-50:54
/*** Get the list of patient instructions associated with the office visit.
* @return A list of patient instructions.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPatientInstructionsAction.java-63:67
/*** Add patient instructions to the office visit.
* @param bean The instructions to add.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPatientInstructionsAction.java-73:77
/*** Modify patient instruction in this office visit.
* @param bean The instructions to modify
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPatientInstructionsAction.java-83:87
/*** Delete patient instructions from this office visit.
* @param bean The instructions to delete.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPatientInstructionsAction.java-93:98
/*** Verify the contents of the given instruction bean.
* @param bean The instructions to check.
* @throws ITrustException
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPersonnelAction.java-13:18
/*** Edits the designated personnel Used by admin/editPersonnel.jsp, staff/editMyDemographics.jsp,
* editPersonnel.jsp
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPersonnelAction.java-24:31
/*** Super class validates the patient id
*
* @param factory The DAOFactory used to create the DAOs for this action.
* @param loggedInMID The MID of the user editing this personnel.
* @param pidString The ID of the user being edited.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPersonnelAction.java-49:56
/*** Takes information from the personnelForm param and updates the patient
*
* @param personnelForm
*            PersonnelBean with new information
* @throws ITrustException
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPHRAction.java-39:41
/*** Edits the patient health record for a given patient Used by editPHR.jsp
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPHRAction.java-59:67
/*** Super class validates the patient id
*
* @param factory The DAOFactory to be used in creating DAOs for this action.
* @param loggedInMID The MID of the currently logged in user who is authorizing this action.
* @param pidString The MID of the patient whose personal health records are being added.
* @throws ITrustException
* @throws NoHealthRecordsException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPHRAction.java-86:93
/*** Adds an allergy to the patient's records
* @param pid pid
* @param ndcode ndcode
* @return "Allergy Added", exception message, a list of invalid fields, or "" (only if description is null)
* @throws FormValidationException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPHRAction.java-101:101
//now, set the ndcode if it happens to exist for the description

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPHRAction.java-120:123
/** adding loop that checks for allergy conflicts. The loop runs through every prescription bean
* and checks for conflict.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPHRAction.java-133:133
//log that this was added

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPHRAction.java-140:145
/*** Returns a PatientBean for the patient
*
* @return PatientBean
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPHRAction.java-150:155
/*** Returns a list of AllergyBeans for the patient
*
* @return list of AllergyBeans
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPHRAction.java-160:165
/*** Returns a list of FamilyMemberBeans for the patient
*
* @return list of FamilyMemberBeans
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPHRAction.java-191:196
/*** Returns a list of HealthRecords for the patient
*
* @return allHealthRecords
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPHRAction.java-202:207
/*** Returns a list of OfficeVisitBeans
*
* @return office visits
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPHRAction.java-212:217
/*** getProcedures
* @param visitID
* @return list
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPHRAction.java-222:228
/*** Returns a list of diseases for which the patient is at risk
*
* @return list of RiskCheckers
* @throws ITrustException
* @throws NoHealthRecordsException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPHRAction.java-234:240
/*** Checks to see if a particular family member has high blood pressure
*
* @param member the family member to check
* @return true if the family member has high blood pressure.  False if there are no records or the family member does not have high blood pressure
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPHRAction.java-252:258
/*** Checks to see if a particular family member has high cholesterol
*
* @param member the family member to check
* @return true if the family member has high cholesterol.  False if there are no records or the family member does not
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPHRAction.java-270:276
/*** Checks to see if a particular family member has diabetes
*
* @param member the family member to check
* @return true if the family member has diabetes.  False if there are no records or the family member does not
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPHRAction.java-289:295
/*** Checks to see if a particular family member has cancer
*
* @param member the family member to check
* @return true if the family member has cancer.  False if there are no records or the family member does not
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPHRAction.java-308:314
/*** Checks to see if a particular family member has heart disease
*
* @param member the family member to check
* @return true if the family member has heart disease.  False if there are no records or the family member does not
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPHRAction.java-326:332
/*** Checks to see if a particular family member smokes
*
* @param member the family member to check
* @return true if the family member smokes.  False if there are no records or the family member does not
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPHRAction.java-345:351
/*** Checks to see if the family member is dead and returns their cause of death if so
*
* @param member the family member to check
* @return the cause of death if there is one; otherwise null
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPHRAction.java-362:367
/*** Creates a fake e-mail to notify the user that their records have been altered.
*
* @return the e-mail to be sent
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPrescriptionsAction.java-4:4
//import java.util.Date;

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPrescriptionsAction.java-22:24
/*** Edits a patient's prescription information.  Used by hcp-uap/editPrescription.jsp
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPrescriptionsAction.java-38:44
/*** Creates a new action by initializing the office visit
* database access object.
*
* @param factory
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPrescriptionsAction.java-53:63
/*** A prescription action that is part of an office visit that is not yet
* saved.  All attempts to modify this action will throw exceptions.  Once
* the office visit is saved, obtain a new EditPrescriptionsAction using
* the four-argument constructor.  (This is done automatically by the
* EditOfficeVisitAction class.)
* @param factory
* @param hcpid
* @param pidString
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPrescriptionsAction.java-84:89
/*** Checks the prescription bean for interactions, allergies, and legal
* values.
* @param pres The prescription bean.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPrescriptionsAction.java-110:113
/*** Indicates if the prescription bean has a valid allergy/interaction
* override.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPrescriptionsAction.java-118:121
/*** Returns a string suitable for a user warning message that a
* drug-interaction was detected.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPrescriptionsAction.java-137:140
/*** Returns a string suitable for a user warning message that a
* drug-allergy warning was detected.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPrescriptionsAction.java-146:153
/*** Checks to see if the given prescription has an interaction with any
* other previously prescribed prescriptions.
* @param newPrescription
* @return A list of interaction warning messages.  The list is empty if no
* 	interactions were detected.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPrescriptionsAction.java-190:196
/*** Checks to see if the patient is allergic to the given prescription.
* @return A list of allergy warnings.  The list is empty if no allergies
* were detected.
* @throws ITrustException
* @throws PrescriptionWarningException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPrescriptionsAction.java-205:205
//Allergy: Aspirin. First Found: 12/20/2008.

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPrescriptionsAction.java-219:225
/*** Edits an existing prescription in the database.  If the office visit is
* unsaved, this will throw an exception.
*
* @param pres The prescription bean that has been changed.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPrescriptionsAction.java-231:235
/*** @return A list of all prescriptions for this office visit.  (If the
* 	office visit is unsaved, this returns an empty list.)
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPrescriptionsAction.java-243:248
/*** Add a prescription to this office visit.  If the office visit is
* unsaved, this will throw an exception.
* @param pres
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPrescriptionsAction.java-258:264
/*** Delete a prescription from this office visit.  If the office visit is
* unsaved, this will throw an exception.
* @param pres
* @throws DBException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPrescriptionsAction.java-270:275
/*** Returns a list of known medications.  This can be called even if the
* office visit is unsaved.
* @throws DBException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPrescriptionsAction.java-279:287
/*** Validates a prescription form, converts it into a bean, and returns that bean.
* @param form  The form to convert.
* @param defaultInstructions  The default value given in the instructions
* 	field.  If the field equals this value, the validation will fail.
* @return
* @throws FormValidationException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditPrescriptionsAction.java-310:315
/*** Creates a fake e-mail to notify the user that their records have been altered.
*
* @return the e-mail to be sent
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditProceduresAction.java-13:17
/*** Edit patiens procedure action
*
* @aurhor student
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditProceduresAction.java-23:29
/*** @param factory
* @param hcpid
* @param pidString
* @param ovIDString
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditReferralsAction.java-1:3
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditReferralsAction.java-17:21
/*** Class for creating and editing referrals associated with a particular office
* visit.
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditReferralsAction.java-46:50
/*** Get all referrals associated with this office visit.
* @return List of ReferralBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditReferralsAction.java-59:64
/*** Get a specific referral.
* @param id The id of the desired referral.
* @return ReferralBean
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditReferralsAction.java-69:74
/*** Get the patient name associated with the given referral.
* @param bean
* @return The patient's name as a String.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditReferralsAction.java-79:84
/*** Get the name of the receiving HCP associated with the given referral.
* @param bean
* @return The HCP's name as a String.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditRepresentativesAction.java-13:17
/*** Edits a patient's personal representatives. Used by hcp/editRepresentatives.jsp
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditRepresentativesAction.java-21:28
/*** Super class validates the patient mid
*
* @param factory The DAOFactory used in creating the DAOs for this action.
* @param loggedInMID The MID of the patient editing his/her representatives.
* @param pidString The MID of the representative in question.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditRepresentativesAction.java-36:40
/*** Gets the name of the representative patient
* @return the full name of the representative patient
* @throws ITrustException if patient does not exist
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditRepresentativesAction.java-46:46
//If a DBException is caught print a stack trace and return an empty string

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditRepresentativesAction.java-53:59
/*** Return a list of patients that pid represents
*
* @param pid The id of the personnel we are looking up representees for.
* @return a list of PatientBeans
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditRepresentativesAction.java-64:71
/*** Makes the patient (pid) represent the input mid parameter
*
* @param pidString
*            the mid of the person who will be represented (the representee)
* @return a message
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditRepresentativesAction.java-91:98
/*** Makes the patient (pid) no longer represent the input mid param
*
* @param input
*            the mid of the person be represented (representee)
* @return a message
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditRepresentativesAction.java-117:117
// TODO Auto-generated catch block

iTrust_v21\src\edu\ncsu\csc\itrust\action\EditSingleReferralAction.java-13:17
/*** Class that allows creating, editing, and deleting of a single referral.
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditSingleReferralAction.java-37:42
/*** Get a specific referral.
* @param id
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditSingleReferralAction.java-47:51
/*** Add a new referral to the database.
* @param bean
* @throws Exception
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditSingleReferralAction.java-61:65
/*** Edit an existing referral.
* @param bean
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditSingleReferralAction.java-73:77
/*** Delete a referral from the database.
* @param bean
* @throws Exception
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditSingleReferralAction.java-86:91
/*** Get the patient name associated with the given referral.
* @param bean
* @return The patient's name as a String.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditSingleReferralAction.java-96:101
/*** Get the name of the receiving HCP associated with the given referral.
* @param bean
* @return The HCP's name as a String.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditSingleReferralAction.java-115:119
/*** Send messages to the users associated with creating a referral.
* @param bean
* @throws Exception
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditSingleReferralAction.java-161:165
/*** Send messages to the users associated with canceling a referral.
* @param bean
* @throws Exception
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditSleepEntryAction.java-13:20
/*** EditSleepEntryAction.java
* Version 1
* 4/6/2105
* Copyright notice: none
* Responsible for editing a sleep entry from a patient's
* Sleep Diary.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditSleepEntryAction.java-27:31
/*** Uses the factory to instantiate the SleepEntryDAO
* @param factory which DAOFactory to use
* @param loggedInMID who is currently logged in
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditSleepEntryAction.java-38:48
/*** Edits the sleep entry of a patient. It first checks to make sure that the
* patient has the ability to edit this sleep entry because it belongs to
* him. Patients should only be able to edit entries that belong to them.
* @param sleepEntry the bean to be updated
* @return the number of rows updated (0 means nothing happened,
* -1 means the logged in user cannot edit this sleep entry, and
* anything else is the number of rows updated which should never
* exceed 1)
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EditSleepEntryAction.java-58:58
//try to validate it

iTrust_v21\src\edu\ncsu\csc\itrust\action\EmergencyReportAction.java-23:27
/*** Creates a new Emergency Report Used by emergencyReport.jsp
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EmergencyReportAction.java-34:41
/*** The super class handles validating the pid Logs viewing of the report
*
* @param factory The DAOFactory used in creating the DAOs for this action.
* @param loggedInMID The MID of the user who is looking at the emergency report.
* @param pidString The ID of the patient whose report is being generated.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EmergencyReportAction.java-53:57
/*** Returns the patient's name
*
* @return patient's full name
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EmergencyReportAction.java-62:66
/*** Returns the patient's age
*
* @return patient's age
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EmergencyReportAction.java-71:75
/*** Returns the patient's gender
*
* @return patient's gender
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EmergencyReportAction.java-80:84
/*** Returns the patient's emergency contact
*
* @return patient's emergency contact
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EmergencyReportAction.java-89:93
/*** Returns the patient's blood type
*
* @return the patient's blood type
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EmergencyReportAction.java-98:103
/*** Returns a list of allergies for the given patient
*
* @return a list of AllergyBeans
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EmergencyReportAction.java-108:113
/*** Returns a list of prescriptions the patient is currently taking
*
* @return a list of PrescriptionBeans for which the patient is currently taking
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EmergencyReportAction.java-124:129
/*** Returns a list of diagnoses that are in the range indicated by the DiagnosisRange enum
*
* @return list of DiagnosisBeans
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EmergencyReportAction.java-159:164
/*** Returns a list of prescriptions the patient is currently taking
*
* @return a list of PrescriptionBeans for which the patient is currently taking
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EmergencyReportAction.java-170:175
/*** Creates a fake e-mail to notify the user that an emergency report has been created and viewed.
*
* @return the e-mail to be sent
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EventLoggingAction.java-8:12
/*** Handles retrieving the log of record accesses for a given user Used by viewAccessLog.jsp
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EventLoggingAction.java-16:21
/*** Set up
*
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param loggedInMID The MID of the person retrieving the logs.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\EventLoggingAction.java-26:35
/*** Log a transaction, with all of the info. The meaning of secondaryMID and addedInfo changes depending on
* the transaction type.
*
* @param type The {@link TransactionType} enum representing the type this transaction is.
* @param loggedInMID The MID of the user who is logged in.
* @param secondaryMID Typically, the MID of the user who is being acted upon.
* @param addedInfo A note about a subtransaction, or specifics of this transaction (for posterity).
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\FindExpertAction.java-17:20
/*** Action class to find experts based on the distance from the user and type of expert.
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\FindExpertAction.java-23:25
/*** HospitalDAO to grab hospitals from
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\FindExpertAction.java-28:30
/*** PersonnelDAO to find experts from
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\FindExpertAction.java-33:36
/*** Constructor simply is used to initialize the DAOs
* @param factory used to initialize DAOs
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\FindExpertAction.java-42:51
/***
* Main method used to find the hospitals and all specified personnel within range
*
* @param distance The maximum distance that a hospital must be within range in order for it to return
* @param specialty The specialty that the user is interested in
* @param patientZip Zipcode entered by the patient
* @param zipRange The range to search hospitals for. The amount of zipcode digits to match, starting with the first digit.
* @return A relationship between hospitals within the defined proximity and the specified experts at the hospital.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\FindExpertAction.java-55:55
//Grab all hospitals and filter them based on distance

iTrust_v21\src\edu\ncsu\csc\itrust\action\FindExpertAction.java-57:57
//Find experts in hospitals

iTrust_v21\src\edu\ncsu\csc\itrust\action\FindExpertAction.java-60:60
//

iTrust_v21\src\edu\ncsu\csc\itrust\action\FindExpertAction.java-65:70
/*** Method used to find experts of specified specialty from hospitals that are in range
* @param hospitals The hospitals within the proximity of the user
* @param specialty The expertise specified
* @return A relationship between the hospitals within proximity and the personnel with the specified expertise within them.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\FindExpertAction.java-74:74
//Go through all nearby hospitals

iTrust_v21\src\edu\ncsu\csc\itrust\action\FindExpertAction.java-76:76
//Put the specified experts into a hashmap with the hospital

iTrust_v21\src\edu\ncsu\csc\itrust\action\FindExpertAction.java-80:80
//

iTrust_v21\src\edu\ncsu\csc\itrust\action\FindExpertAction.java-85:90
/*** Method used to find experts of specified specialty from hospitals that are in range
* @param hospitals The hospitals within the proximity of the user
* @param specialty The expertise specified
* @return A relationship between the hospitals within proximity and the personnel with the specified expertise within them.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\FindExpertAction.java-99:99
//Go through all nearby hospitals

iTrust_v21\src\edu\ncsu\csc\itrust\action\FindExpertAction.java-101:101
//Put the specified experts into a hashmap with the hospital

iTrust_v21\src\edu\ncsu\csc\itrust\action\FindExpertAction.java-102:102
//experts.put(hospital, personnelDAO.getPersonnelFromHospital(hospital.getHospitalID(), specialty));

iTrust_v21\src\edu\ncsu\csc\itrust\action\FindExpertAction.java-120:126
/*** Filters hospitals down to just the hospitals in the specified range of the user
* @param hospitals Hospitals to filter
* @param patientZip Zipcode entered by the patient
* @param zipRange The range to search hospitals for. The amount of zipcode digits to match, starting with the first digit.
* @return All hospitals within the specified range of the user
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\FindExpertAction.java-131:131
//A hospital is in range if its zipcode matches the user entered one from the first number to the zipRangeth number

iTrust_v21\src\edu\ncsu\csc\itrust\action\FindExpertAction.java-135:135
//Examine next hospital if current has null zipcode entry

iTrust_v21\src\edu\ncsu\csc\itrust\action\FindExpertAction.java-137:137
//If the hospital's zip code is not at least 5 digits long, examine next hospital

iTrust_v21\src\edu\ncsu\csc\itrust\action\GenerateCalendarAction.java-19:22
/*** Action class for calendar.jsp
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GenerateCalendarAction.java-29:34
/*** Set up defaults
*
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param loggedInMID The MID of the user who is viewing the calendar
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GenerateCalendarAction.java-42:45
/*** Return the send request for an AppointmentBean
* @return the send request for an AppointmentBean
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GenerateCalendarAction.java-50:60
/*** Check appointments appearing on the calendar for conflicts
* with other appointments on the calendar.
*
* The array from this method is used to determine what appointments
* will appear in bold on the calendar.
*
* @return An array of items that are in conflict with other items.
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GenerateCalendarAction.java-78:87
/*** Creates a hash table with all of the Appointments to be
* displayed on the calendar for the month and year being viewed.
*
* @param thisMonth The month of the calendar to be rendered
* @param thisYear The year of the calendar to be rendered
* @return A Hashtable containing the AppointmentBeans to be rendered
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GenerateCalendarAction.java-106:114
/*** Creates a hash table with all of the Office Visits to be
* displayed on the calendar for the month and year being viewed.
*
* @param thisMonth The month of the calendar to be rendered
* @param thisYear The year of the calendar to be rendered
* @return A Hashtable containing the OfficeVisitBeans to be rendered
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GenerateCalendarAction.java-132:140
/*** Creates a hash table with all of the lab procedures to be
* displayed on the calendar for the month and year being viewed.
*
* @param thisMonth The month of the calendar to be rendered
* @param thisYear The year of the calendar to be rendered
* @return A Hashtable containing the LabProcedureBeans to be rendered
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GetUserNameAction.java-6:10
/*** Handles Getting the person's name associated with a certain mid Used by getUser.jsp
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GetUserNameAction.java-14:18
/*** Set up defaults
*
* @param factory The DAOFactory used for creating the DAOs for this action.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GetUserNameAction.java-23:30
/*** Returns the person's name that matches the inputMID param
*
* @param inputMID The MID to look up.
* @return the person's name
* @throws DBException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-20:24
/*** Gets the VisitReminders for a given patient Used by visitReminders.jsp
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-29:31
/*** Reminder Type enumeration.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-50:55
/*** Gets the ReminderType for the name passed as a param
*
* @param name
* @return the ReminderType associated with the name
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-60:64
/*** Returns the type name as a string
*
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-70:74
/***
* Begin GetVisitRemindersAction code
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-79:85
/*** Set up defaults
*
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param loggedInMID MID of the person who is logged in
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-92:100
/*** Returns a list of VisitReminderReturnForms for the type passed in as a param
*
* @param type
*            the ReminderType
* @return the list of VisitReminderReturnForms
* @throws ITrustException
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-109:109
//return stripDupes(visitReminderDAO.getDiagnosedVisitNeeders(loggedInMID));

iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-122:128
/*** Gets a list of anyone who need immunizations
*
* @param mid the HCP whose patients are being checked
* @return a list of all the people who need immunizations--done in a visit reminder
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-135:135
// Get list of patients that designate this HCP

iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-151:156
/*** Checks a patient to see what immunizations they need
*
* @param pid patient to be checked
* @return patient list of those lacking immunizations according to the schedule
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-202:202
// Hep B (90371)

iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-208:208
// Rotavirus (90681)

iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-214:214
// Diptheria, Tetanus, Pertussis (90696)

iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-220:220
// Haemophilus influenza (90645)

iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-230:230
// Pneumococcal (90669)

iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-238:238
// Poliovirus (90712)

iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-244:244
// Measles, Mumps, Rubella (90707)

iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-250:250
// Varicella (90396)

iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-256:256
// Hep A (90633)

iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-262:262
// Human Papillomaavirus (90649)

iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-316:323
/*** Checks to see if a patient needs the HPV immunization
*
* @param count			how many HPV immunizations she has already had
* @param patientAge	how old the patient is, in weeks
* @param time			date of the last procedure
* @return the			reason the immunization should be given, including required immunization age
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-349:356
/*** Checks to see if a patient needs the Hepatits A immunization
*
* @param count which immunization they are on
* @param patientAge how old the patient is
* @param time what the current date is
* @return when the immunization should be given
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-373:380
/*** Checks to see if a patient needs the Varicella immunization
*
* @param count which immunization they are on
* @param patientAge how old the patient is
* @param time what the current date is
* @return when the immunization should be given
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-397:404
/*** Checks to see if a patient needs the Measles, Mumps, and Rubekka immunization
*
* @param count which immunization they are on
* @param patientAge how old the patient is
* @param time what the current date is
* @return when the immunization should be given
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-421:428
/*** Checks to see if a patient needs the Polio immunization
*
* @param count which immunization they are on
* @param patientAge how old the patient is
* @param time what the current date is
* @return when the immunization should be given
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-449:455
/*** Checks to see if a patient needs the Pneumococcal immunization
*
* @param count which immunization they are on
* @param time what the current date is
* @return when the immunization should be given
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-482:488
/*** Checks to see if a patient needs the Haemophilus Infulenzae immunization
*
* @param count which immunization they are on
* @param time what the current date is
* @return when the immunization should be given
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-512:518
/*** Checks to see if a patient needs the Diphtheria, Tetanus, Pertussis immunization
*
* @param count which immunization they are on
* @param time what the current date is
* @return when the immunization should be given
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-551:557
/*** Checks to see if a patient needs the Rotavirus immunization
*
* @param count which immunization they are on
* @param time what the current date is
* @return when the immunization should be given
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GetVisitRemindersAction.java-580:586
/*** Checks to see if a patient needs the Hepatitis B immunization
*
* @param count which immunization they are on
* @param time what the current date is
* @return when the immunization should be given
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportAction.java-24:27
/***
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportAction.java-35:38
/***
* @param factory
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportAction.java-46:50
/***
* @param filters
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportAction.java-67:72
/***
* @param patient
* @param filterType
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportAction.java-199:204
/***
* @param patient
* @param filterType
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportAction.java-268:273
/***
* @param patient
* @param filterType
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportAction.java-295:299
/***
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportGeneratorAction.java-17:20
/*** Generates group reports, producing ArrayLists containing
* the headers, data, and filters.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportGeneratorAction.java-23:25
/*** DAOFactory for database operations
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportGeneratorAction.java-28:30
/*** GroupReportAction for generating the individual records
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportGeneratorAction.java-33:35
/*** List of ReportFilters to be used in the report
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportGeneratorAction.java-38:40
/*** List of report filter types that were used in the report
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportGeneratorAction.java-43:45
/*** List of report filter values that were used in the report
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportGeneratorAction.java-48:50
/*** List of headers for the report
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportGeneratorAction.java-53:55
/*** List of lists (each of the sub-lists is a record) in the report
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportGeneratorAction.java-58:62
/*** Initializes the group report generator with a list of filters
*
* @param filters List of filters to be used in the report
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportGeneratorAction.java-69:73
/*** Initializes the group report generator with a list of filters after parsing them
*
* @param filters HttpServletRequest to grab and parse parameters from
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportGeneratorAction.java-81:85
/*** Gets a list of the filters used in the report.
*
* @return List of FilterTypes used in the report
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportGeneratorAction.java-90:94
/*** Gets a list of the filter values used in the report.
*
* @return List of filter values used in the report
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportGeneratorAction.java-99:103
/*** Gets a list of the report headers.
*
* @return List of report headers
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportGeneratorAction.java-108:112
/*** Gets a list of lists of report records (patients)
*
* @return List of lists of report records
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportGeneratorAction.java-117:120
/*** Generates the ArrayLists for the report based on the filters passed
* in the constructor.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportGeneratorAction.java-123:123
//Initialize the GroupReportBean

iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportGeneratorAction.java-126:126
//Populate the filter lists

iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportGeneratorAction.java-132:132
//Populate the header list with the DemographicReportFilters

iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportGeneratorAction.java-139:139
//Populate the header list with the MedicalReportFilters

iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportGeneratorAction.java-149:149
//Populate the header list with the PersonnelReportFilters

iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportGeneratorAction.java-154:154
//Loop through all the patients in the report

iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportGeneratorAction.java-157:157
//Create a temporary ArrayList for the current patient's data

iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportGeneratorAction.java-160:160
//Populate the current record with Demographic data

iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportGeneratorAction.java-172:172
//Populate the current record with Medical data

iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportGeneratorAction.java-184:184
//Populate the current record with Personnel data

iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportGeneratorAction.java-194:194
//Add the current record to the list of records

iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportGeneratorAction.java-198:198
//Remove MID from report

iTrust_v21\src\edu\ncsu\csc\itrust\action\GroupReportGeneratorAction.java-206:210
/*** Method that parses the request parameters to create the filter list in order to run report.
*
* @param request with form parameters to create the filter list
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\LabelAction.java-19:26
/*** Uses the factory to construct labelDAO and patientDAO
*
* @param factory
*            DAO factory to use
* @param loggedInMID
*            who is currently logged in
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\LabelAction.java-33:38
/*** Returns a single label
* @param entryID ID of the label in the database
* @return a LabelBean if there exist any labels
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\LabelAction.java-47:55
/*** Takes in which patient you want to view the labels for, and then returns
* all of the labels for that patient. It first checks to ensure that the
* person requesting the labels is a patient
*
* @param patientMID
*            the id of the patient whose food diary we want
* @return a list of the patient's labels
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\LabelAction.java-60:60
// if true, then it is a patient, so show own labels

iTrust_v21\src\edu\ncsu\csc\itrust\action\LabelAction.java-84:94
/*** Edits the label of a patient. It first checks to make sure that the
* patient has the ability to edit this label because it belongs to
* them. Patients should only be able to edit entries that belong to them.
* @param label the bean to be updated
* @return the number of rows updated (0 means nothing happened,
* -1 means the logged in user cannot edit this food entry, and
* anything else is the number of rows updated which should never
* exceed 1)
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\LabelAction.java-110:117
/*** Deletes a label from the database
*
* @param entryID
*            the label to delete
* @return the number of rows deleted (should never exceed 1)
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\LabProcHCPAction.java-14:18
/*** Action class for LabProcHCP.jsp.
*
* @extends LabProcUAPAction
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\LabProcHCPAction.java-26:31
/*** Sets up defaults
*
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param loggedInMID  MID for the logged in HCP
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\LabProcHCPAction.java-41:46
/*** This method sorts by LOINC and returns the list
*
* @param id the ID to sort the list by
* @return List sorted by LOINC
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\LabProcHCPAction.java-51:55
/*** Returns a list of all the lab procedures for the next month
*
* @return all the lab procedures for the next month
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\LabProcHCPAction.java-72:77
/*** Changes the privacy settings
*
* @param x the ID of the procedure to change
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\LabProcHCPAction.java-92:97
/*** Checks to see if the logged in HCP is the one who made the procedure.  Used to generate links for page to edit OfficeVisit
*
* @param x the ID of the HCP to check
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\LabProcLTAction.java-13:15
/*** Class for LabProcLT.jsp.  Handles lab procedures for LTs
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\LabProcLTAction.java-20:23
/*** Setup
* @param factory The DAOFactory used to create the DAOs used in this action.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\LabProcUAPAction.java-15:17
/*** Class for LabProcUAP.jsp.  Handles lab procedures for UAPs
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\LabProcUAPAction.java-24:28
/*** Setup
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param loggedInMID UAP who is logged in
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\LabProcUAPAction.java-37:43
/*** Updates a lab procedure
*
* @param b the procedure to update
* @throws DBException
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\LabProcUAPAction.java-46:46
//need to check if status is what's being changed - if new status!=old status send email

iTrust_v21\src\edu\ncsu\csc\itrust\action\LabProcUAPAction.java-53:59
/*** Sends an e-mail informing the patient that their procedure has been updated
*
* @param b the procedure that was updated
* @return an e-mail to the patient with the notice
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\LabProcUAPAction.java-72:78
/*** Returns a list of all the lab procedures for a particular patient.
*
* @param id MID of the UAP viewing the procedures
* @return a list of all the lab procedures for that UAP
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\LabProcUAPAction.java-83:90
/*** Returns a list of the lab procedures associated with both the HCP and
* the given patient.
*
* @param pid The id of the patient.
* @return A list of lab procedures.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\LoginFailureAction.java-8:22
/*** Please note that this is not the best mitigation for Denial of Service attacks. The better way would be to
* keep track of password failure attempts per user account, NOT with easily spoofable ip addresses. The
* reason this feature is implemented with ip addresses is a limitation in Tomcat authentication (actually,
* it's technically JSP's fault for not specifying a form of account lockout). <br />
* <br />
* All authentication in this application is done by the container (Tomcat), which doesn't support account
* lockout. So our options would be (a) to implement our own authentication (yuck!), or (2) to extend the
* JDBCRealm class in the Tomcat source code and add the logic. I've looked into this and it's actually pretty
* easy. The ONLY reason it's not implemented here is that the code would be buried in a jar in your Tomcat
* installation - not very educational for those who want to learn about authentication in webapps. Feel free
* to change this; extending this would be perfectly acceptable.
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\LoginFailureAction.java-29:33
/*** Set up defaults
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param ipAddr The IP address of the user making the login attempt.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\LoginFailureAction.java-41:45
/*** Calls authDAO to record the login failure in the database
*
* @return How many login failure attempts or a DBException message
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\LoginFailureAction.java-58:62
/*** Checks to see if the current user can login (#failures<3)
*
* @return true if the user is valid to login
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\LoginFailureAction.java-80:84
/*** resetFailure
* @throws DBException
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\LoginFailureAction.java-92:95
/*** setCaptcha
* @param val val
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\LoginFailureAction.java-100:103
/*** getFailureCount
* @return 0
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ManageHospitalAssignmentsAction.java-10:14
/*** Manages the assignment of HCPs to hospitals Used by hospitalAssignments.jsp
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ManageHospitalAssignmentsAction.java-18:25
/*** Set up defaults
*
* @param factory
*            The DAOFactory used to create the DAOs used in this action.
* @param loggedInMID
*            The MID of the user managing hospitals.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ManageHospitalAssignmentsAction.java-31:37
/*** Returns a list of hospitals to which the given mid is not currently assigned
*
* @param midString
* @return list of HospitalBeans
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ManageHospitalAssignmentsAction.java-53:59
/*** Returns a list of hospitals to which the given mid is currently assigned
*
* @param midString
* @return list of HosptialBeans
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ManageHospitalAssignmentsAction.java-69:78
/*** Assigns the mid to the hospital
*
* @param midString
*            The MID of the person assigned to the hospital as a String.
* @param hospitalID
*            The ID of the hospital.
* @return message indicating the status of the assignment
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ManageHospitalAssignmentsAction.java-69:86
public String assignHCPToHospital(String midString, String hospitalID) throws ITrustException {
try {
long hcpID = Long.valueOf(midString);
boolean confirm = hospitalsDAO.assignHospital(hcpID, hospitalID);
if (confirm) {/*
* only patient is mentioned for transaction type 0, but spec looks like personnel
* should be included too...
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ManageHospitalAssignmentsAction.java-95:104
/*** Removes HCPs assignment to the designated hospital
*
* @param midString
*            the HCP's mid
* @param hospitalID
*            the hospital id to be removed
* @return Status message
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ManageHospitalAssignmentsAction.java-118:125
/*** Removes all hospital assignments for the given hcp mid
*
* @param midString
*            HCP's mid
* @return status message
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ManageHospitalAssignmentsAction.java-137:144
/*** Checks if the hcpID param is a HCP
*
* @param hcpID
*            the String to be checked
* @return the mid as a long if the hcpID is a HCP's mid
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ManageHospitalAssignmentsAction.java-157:164
/*** Checks if the HCP is a LT if it is then check to see if a hospital is assigned to them
*
* @param hcpID
*            the String to be checked
* @return true If the LT has an assigned hospital, false if not
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\MonitorAdverseEventAction.java-3:5
/*** Used by PHAs to view the reported adverse events
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\MonitorAdverseEventAction.java-30:34
/*** Constructor
* @param factory
* @param loggedInMID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\MonitorAdverseEventAction.java-43:53
/*** Returns a list of reports between specified dates
* @param isPrescription Boolean to return prescriptions or immunizations
* @param start The starting date
* @param end The ending date
* @return the list of events
* @throws ITrustException
* @throws FormValidationException
* @throws SQLException
* @throws ParseException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\MonitorAdverseEventAction.java-63:67
/*** Returns the patient's name
* @param MID the MID of the patient to return the name for.
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\MonitorAdverseEventAction.java-78:84
/*** Sends an e-mail to a patient requesting more information
* @param patientMID The patient to receive the message
* @param message The message
* @return string for testing purposes
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\MonitorAdverseEventAction.java-99:105
/*** Method used to remove an adverse event report
*
* @param id the id of the report to be removed
* @throws DBException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\MyDiagnosisAction.java-22:26
/*** Edits the privacy levels of diagnoses, used by myDiagnoses.jsp
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\MyDiagnosisAction.java-37:43
/*** Set up for defaults
*
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param loggedInMID The MID of the user who is looking at their diagnoses.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\MyDiagnosisAction.java-54:59
/*** Returns a list of DiagnosisBeans for the patient
*
* @return the list of DiagnosisBeans
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\MyDiagnosisAction.java-64:70
/*** Returns a list of all the HCPs who have a particular diagnosis
*
* @param icdcode the diagnosis of interest
* @return the list of HCPs
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\MyDiagnosisAction.java-82:82
// check for HCP-Patient locality based on first 3 digits in ZIP

iTrust_v21\src\edu\ncsu\csc\itrust\action\MyDiagnosisAction.java-86:86
// Check to see if we already have a bean for the HCP associated with this visit

iTrust_v21\src\edu\ncsu\csc\itrust\action\MyDiagnosisAction.java-89:89
// get all prescriptions associated with an office visit

iTrust_v21\src\edu\ncsu\csc\itrust\action\MyDiagnosisAction.java-107:107
// Get Lab Procedures

iTrust_v21\src\edu\ncsu\csc\itrust\action\MyDiagnosisAction.java-122:122
// Check if this patient has been seen multiple times for this diagnosis

iTrust_v21\src\edu\ncsu\csc\itrust\action\MyDiagnosisAction.java-160:166
/*** Looks up all the prescriptions given by a certain HCP with the same ICD code.
* @param hcpid The MID of the HCP
* @param icdcode The ICD code of the prescription we are looking up.
* @return A java.util.List of PrescriptionBeans made by this HCP of this ICD code.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\MyDiagnosisAction.java-185:188
/*** Checks to see what HCP has had the most experience with a diagnosis
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\MyDiagnosisAction.java-193:199
/*** Compares one HCP with another
*
* @param a the first HCP
* @param b the second HCP
* @return -1 if a has had more patients, 1 if b has had more patients; otherwise 0
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\PatientRoomAssignmentAction.java-10:12
/*** DAOFactory to use with the WardDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\PayBillAction.java-19:22
/*** This class aids payBill.jsp in paying a bill for a user. This mostly will
* interact with the BillingDAO and verify user input.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\PayBillAction.java-24:24
/**billingDAO just access the database when I need to.*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\PayBillAction.java-26:26
/**myBill is the bill that we are paying.*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\PayBillAction.java-31:31
/**The length of a credit card number*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\PayBillAction.java-34:38
/*** PayBillAction is the constructor and it just sets the instance variables.
* @param factory The object that makes the BillingDAO.
* @param bID The ID of the bill we are paying.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\PayBillAction.java-50:53
/*** getBill returns the billing bean to make jsp stuff easy.
* @return the bill we a handling.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\PayBillAction.java-58:61
/*** getPatient gets the patient of the office visit.
* @return The name of the patient.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\PayBillAction.java-72:76
/*** getOVBean returns the office visit bean
* associated with this bill.
* @return The office visit for this bill.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\PayBillAction.java-87:95
/*** Pay bill with CreditCard validates input, and pays the bill if it can.
* @param ccNum The Credit Card number.
* @param ccHolder The Credit Card holder.
* @param ccType The Credit Card type.
* @param billAddress The bill address.
* @param cvv The cvv.
* @throws Exception It just throws an exception that contains the error message.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\PayBillAction.java-150:162
/*** Pay bill with insurance just pays the bill with insurance information.
* @param insHolder The holder of the insurance.
* @param insProvider The provider of the insurance.
* @param insID The insurance policy id.
* @param insAdd1 The insurance address.
* @param insAdd2 The insurance address.
* @param insCity The insurance city.
* @param insState The insurance state.
* @param insZip The insurance zip code.
* @param insPhone The insurance phone number.
* @throws Exception The exception contains the error message.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\PrescriptionReportAction.java-21:27
/*** Handles Prescription Reports for the given pid Used by hcp-uap/getPrescriptionReport.jsp,
* hcp-uap/viewPrescriptionRecord.jsp, patient/getMyPrescriptionReport.jsp, &
* patient/viewMyPrescriptionRecord.jsp
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\PrescriptionReportAction.java-35:44
/*** Super class validates pidString
*
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param loggedInMID The MID of the user who is making a prescription report.
* @param pidString The MID of the patient in question.
* @throws ITrustException
* @throws DBException
* @throws NoHealthRecordsException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\PrescriptionReportAction.java-54:62
/*** Takes the patient's representee as a param and returns it as a long if the patient represents the input
* param
*
* @param input
*            the patient's representee mid
* @return representee's mid as a long
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\PrescriptionReportAction.java-78:83
/*** Returns a list of all office visits for the pid
*
* @return list of OfficeVisitBeans for the pid
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\PrescriptionReportAction.java-88:96
/*** Used by the JSP, passes a Map from the html form and a list of OfficeVisitBeans Returns a list of
* PrescriptionReportBeans
*
* @param params A java.util.HashMap containing the parameter map.
* @param officeVisits A java.util.List of OfficeVisitBeans for the visits.
* @return list of PrescriptionReportBeans
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\PrescriptionReportAction.java-108:108
// just skip it

iTrust_v21\src\edu\ncsu\csc\itrust\action\PrescriptionReportAction.java-117:122
/*** Returns a PatientBean for the pid
*
* @return PatientBean
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\PrescriptionReportAction.java-127:137
/*** Used by the JSP, which passes the param map from the html form and a list of OfficeVisitBeans Returns a
* string that will be used to create a new url. The JSP will pull params from this url to create the
* prescription report.
*
* @param paramMap A java.util.HashMap of the parameters.
* @param officeVisits A java.util.List of OfficeVisitBeans.
* @return the string that will be used in the new url
* @throws FormValidationException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\PrescriptionReportAction.java-149:155
/*** Checks office visits
*
* @param myParams list of parameters
* @param officeVisits list of office visits
* @return Returns a java.util.ArrayList of Integers for the given office visits.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\PrescriptionReportAction.java-166:171
/*** Builds a query string for office visits
*
* @param ovOffsets offsets for the office visits
* @return A SQL query in a Java String.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ReportAdverseEventAction.java-19:21
/*** ReportAdverseEventAction
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ReportAdverseEventAction.java-32:37
/*** ReportAdverseEventAction
* @param hcpID hcpID
* @param factory factory
* @param loggedInMID loggedInMID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ReportAdverseEventAction.java-50:54
/*** Constructor used to send e-mails only
* @param factory factory
* @param loggedInMID loggedInMID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ReportAdverseEventAction.java-63:69
/*** Method that sends exactly one e-mail to each MID in the list of Adverse Events
* @param aeList The list of adverse Event Beans that need to be acted upon
* @return EList The list of e-mails sent for testing purposes
* @throws ITrustException
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ReportAdverseEventAction.java-114:120
/*** A method used to send a single e-mail. Used in immunizations.
* @param aeBean aeBean
* @return Email returns the Email for testing purposes.
* @throws ITrustException
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ReportAdverseEventAction.java-146:153
/*** Method used to add a report to the data base
* @param aeBean The adverse event to add
* @return a string for testing purposes only
* @throws ITrustException
* @throws FormValidationException
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-22:22
/** Error message for if there is a database exception*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-24:24
/** Error message for if there is no digital signature on a request form*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-26:26
/** Success message for if the request form is successfully submitted */

iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-29:29
/** RecordsReleaseDAO object for working with record releases in the database*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-31:31
/** PatientDAO for working with patient objects in the database*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-33:33
/** HospitalsDAO for getting hospital objects from the database*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-36:36
/** RecordsReleaseFormValidator to validate records release forms*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-38:38
/** Long for storing the patient's mid */

iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-41:44
/*** Constructor for RequestRecordsReleaseAction. Gets and initializes all necessary DAOs for
* working with requesting a patient's records.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-53:56
/***
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-83:86
/***
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-90:90
//Validate the form

iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-92:92
//Check that there is a digital signature

iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-95:95
//Transfer the form to a RecordsReleaseBean object

iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-97:97
//Add the bean to the dao

iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-101:101
//Check that there is a digital signature

iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-104:104
//If a form validation exception is thrown, indicate the release could not be added

iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-107:107
//If a DBException is thrown, indicate the release could not be added

iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-111:111
//Indicate that the release request was successfully added

iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-130:130
//Get all hospitals where the patient has visited

iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-133:133
//If a DBException is thrown, print a stack trace and return an empty list

iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-143:143
//Set the date to the current time

iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-145:145
//Set the pid

iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-147:147
//Set the hospital id

iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-149:149
//Set the recipient hospital name and address

iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-152:152
//Set the receiving doctor's name

iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-155:155
//Set the receiving doctor's phone and email

iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-158:158
//Set the justification comment

iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-160:160
//Set the status of the request to pending

iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-167:171
/*** Returns a list of PatientBeans of all patients the currently logged in patient represents
*
* @return a list of PatientBeans of all patients the currently logged in patient represents
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-177:177
//If a DBException occurs print a stack trace and return an empty list

iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-183:187
/*** Returns a list of PatientBeans of all patients the currently logged in patient represents and are a dependent
*
* @return a list of PatientBeans of all patients the currently logged in patient represents and are a dependent
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\RequestRecordsReleaseAction.java-193:193
//If a DBException occurs print a stack trace and return an empty list

iTrust_v21\src\edu\ncsu\csc\itrust\action\ResetPasswordAction.java-19:21
/*** Manages resetting the password Used by resetPassword.jsp
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ResetPasswordAction.java-24:24
/**MAX_RESET_ATTEMPTS*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\ResetPasswordAction.java-31:34
/*** Set up defaults
* @param factory The DAOFactory used to create the DAOs used in this action.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ResetPasswordAction.java-41:46
/*** Checks to see if a user exists with the given mid
*
* @param midString The user's MID to check for.
* @return 0 if the user does not exist, else the mid of the user as a long
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ResetPasswordAction.java-60:66
/*** Checks to see if the number of reset password attempts has been exceeded for the given ipAddress
*
* @param ipAddress The IPv4 or IPv6 IP address as a String.
* @return true if the the number of reset attempts is greater than or equal to MAX_RESET_ATTEMPTS
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ResetPasswordAction.java-71:80
/*** Checks if the given mid matches the given role
*
* @param mid
*            the mid to be checked
* @param role
*            the role to be checked
* @return true if the mid and role match
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ResetPasswordAction.java-93:93
//TODO

iTrust_v21\src\edu\ncsu\csc\itrust\action\ResetPasswordAction.java-101:106
/*** Checks if the answer param is null
*
* @param answer the user's security answer
* @return answer if not null, else return null
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ResetPasswordAction.java-114:120
/*** Returns the security question for the mid param
*
* @param mid MID of the user
* @return the security question or "" if DBException thrown
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ResetPasswordAction.java-133:145
/*** Resets the password for the given mid
*
* @param mid of the user to have their password reset
* @param role what role the user has in iTrust
* @param answer answers to their security question
* @param password their password
* @param confirmPassword their password again
* @param ipAddr the ip address the request is coming from
* @return status message
* @throws FormValidationException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ResetPasswordAction.java-183:190
/*** Creates and sends an e-mail about the change
*
* @param mid the user who's password was changed
* @param role what role they have in iTrust
* @return the e-mial that is sent
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ResetPasswordAction.java-215:221
/*** Checks to make sure the password is correctly entered twice.
*
* @param password the password
* @param confirmPassword the password again for confirmation
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ReviewsAction.java-12:16
/*** This class forms the action for the HCP Reviewing system, each category
* rated on a scale from 1 (lowest) to 5 (highest), and providing an overall rating
* for the HCP.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ReviewsAction.java-28:31
/*** Add a review based on the input params for input of a bean.
* @return true if added and false otherwise
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ReviewsAction.java-36:41
/*** Method that returns physician based on a mid.
* @param mid of physician
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ReviewsAction.java-47:53
/*** Get all reviews for a given HCP (ie pid input param),
* return as a Java ArrayList
* @param pid HCP under review's ID
* @return java.utils.ArrayList of all reviews for the HCP
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ReviewsAction.java-58:63
/*** Checks whether a patient can post a review for a physician.
* @param pid
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ReviewsAction.java-70:75
/*** Get total average rating for a given HCP.
* @param pid Long ID of the HCP under review
* @return average int "rating" for the information
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\SearchUsersAction.java-16:18
/*** SearchUsersAction
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\SearchUsersAction.java-25:30
/*** Set up defaults
*
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param loggedInMID The MID of the user who is performing the search.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\SearchUsersAction.java-37:42
/*** Searches for all personnel with the first name and last name specified in the parameter list.
* @param firstName The first name to be searched.
* @param lastName The last name to be searched.
* @return A java.util.List of PersonnelBeans for the users who matched.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\SearchUsersAction.java-58:62
/*** Search for all experts with first name and last name given in parameters.
* @param query query
* @return A java.util.List of PersonnelBeans
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\SearchUsersAction.java-96:101
/*** Search for all patients with first name and last name given in parameters.
* @param firstName The first name of the patient being searched.
* @param lastName The last name of the patient being searched.
* @return A java.util.List of PatientBeans
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\SearchUsersAction.java-117:121
/*** Search for all patients with first name and last name given in parameters.
* @param query query
* @return A java.util.List of PatientBeans
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\SearchUsersAction.java-126:131
/*** Search for all patients with first name and last name given in parameters.
* @param query query
* @param allowDeactivated allowDeactivated
* @return A java.util.List of PatientBeans
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\SearchUsersAction.java-151:151
//If the patient exists with the mid, then add the patient to the patient list

iTrust_v21\src\edu\ncsu\csc\itrust\action\SearchUsersAction.java-155:155
//old way of doing it when they only were returning one person

iTrust_v21\src\edu\ncsu\csc\itrust\action\SearchUsersAction.java-156:156
//now that we are returning everybody with that as a substring in their MID, not necessary

iTrust_v21\src\edu\ncsu\csc\itrust\action\SearchUsersAction.java-157:157
//yet want to keep it in case we revert sometime

iTrust_v21\src\edu\ncsu\csc\itrust\action\SearchUsersAction.java-160:160
//TODO

iTrust_v21\src\edu\ncsu\csc\itrust\action\SearchUsersAction.java-175:175
//TODO

iTrust_v21\src\edu\ncsu\csc\itrust\action\SearchUsersAction.java-192:195
/*** getDeactivated is a special case used for when we want to see all deactivated patients.
* @return The List of deactivated patients.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\SearchUsersAction.java-206:206
//TODO

iTrust_v21\src\edu\ncsu\csc\itrust\action\SendMessageAction.java-22:24
/*** Class for SendMessage.jsp.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\SendMessageAction.java-36:40
/*** Sets up defaults
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param loggedInMID The MID of the user sending the message.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\SendMessageAction.java-51:57
/*** Sends a message
*
* @param mBean message to be sent
* @throws ITrustException
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\SendMessageAction.java-126:132
/*** Returns the patient's name
*
* @param mid MId of the patient
* @return the name of the patient
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\SendMessageAction.java-137:143
/*** Returns the personnel's name
*
* @param mid MId of the personnel
* @return the name of the personnel
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\SendMessageAction.java-148:153
/*** Returns a list of the patients that the logged in HCP represents
*
* @return list of the patients that the logged in HCP represents
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\SendMessageAction.java-159:159
//TODO

iTrust_v21\src\edu\ncsu\csc\itrust\action\SendMessageAction.java-164:169
/*** Returns the designated HCPs for the logged in patient.
*
* @return designated HCPs for the logged in patient.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\SendMessageAction.java-174:179
/*** Returns the designated HCPs for the given patient.
* @param pid pid
* @return designated HCPs for the given patient.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\SendMessageAction.java-185:185
//TODO

iTrust_v21\src\edu\ncsu\csc\itrust\action\SendMessageAction.java-190:195
/*** getDLHCPByMID
* @param mid mid
* @return personnel
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\SetSecurityQuestionAction.java-9:14
/*** Handles setting and retrieving the security questions/answers for users Used by
* patient/editMyDemographics.jsp, staff/editMyDemographics.jsp, staff/editPersonnell.jsp
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\SetSecurityQuestionAction.java-20:26
/*** Sets up defaults
*
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param rLoggedInMID The MID of the user who is setting their security question.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\SetSecurityQuestionAction.java-32:38
/*** Updates information in the database from the information held in the SecurityQA bean passed as a param
*
* @param a
*            SecurityQuestionBean that holds new information
* @throws Exception
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\SetSecurityQuestionAction.java-45:50
/*** Returns a SecurityQA bean holding the security info for the currently logged in user
*
* @return SecurityQA for loggedInMid
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\SetSecurityQuestionAction.java-57:63
/*** Checks to make sure the MID exists in iTrust
*
* @param mid MID to check
* @return returns the MID if the user is valid, otherwise, throws an exception
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\SurveyAction.java-10:14
/*** This class is used to add patient survey data to the database.  The office visit ID is linked with the survey ID.  Once the
* survey is added, the transaction is logged
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\SurveyAction.java-19:22
/*** Sets up defaults
* @param factory The DAOFactory used to create the DAOs used in this action.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\SurveyAction.java-29:34
/*** Pass the OfficeVistBean along with SurveyBean
* @param surveyBean contains data to be added to database
* @param visitID The Office Visit ID corresponding to this Survey.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateCPTCodeListAction.java-11:20
/*** Updates the CPT Code (Medical Procedures) List Used by editCPTProcedureCodes.jsp
*
* The CPT code set accurately describes medical, surgical, and diagnostic services
* and is designed to communicate uniform information about medical services and procedures
* among physicians, coders, patients, accreditation organizations, and payers for administrative,
* financial, and analytical purposes.
*
* @see http://www.ama-assn.org/ama/pub/physician-resources/solutions-managing-your-practice/coding-billing-insurance/cpt/about-cpt.shtml
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateCPTCodeListAction.java-25:29
/***
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param loggedInMID The MID of the administrator who is updating the CPTs.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateCPTCodeListAction.java-34:41
/*** Adds a new cpt code (med procedure)
*
* @param proc
*            ProcedureBean that holds the new cpt code
* @return status message
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateCPTCodeListAction.java-57:64
/*** Updates a procedure with new information from the ProcedureBean
*
* @param proc
*            ProcedureBean with new information (but same CPT code)
* @return Status message
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateCPTCodeListAction.java-81:87
/*** Updates the cpt code
*
* @param proc the code to be updated
* @return updated code
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateHospitalListAction.java-11:15
/*** Handles updating the list of hospitals Used by hospitalListing.jsp
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateHospitalListAction.java-19:24
/*** Set up
*
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param performerID The MID of the person updating the hospitals.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateHospitalListAction.java-29:35
/*** Adds a hospital using the HospitalBean passed as a parameter
*
* @param hosp the new hospital listing
* @return Status message
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateHospitalListAction.java-52:59
/*** Updates a hospital (based on the hospital id) using new information from the HospitalBean passed as a
* parameter
*
* @param hosp the new hospital information with the same hospital id
* @return Status message
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateHospitalListAction.java-73:79
/*** Updates hospital
*
* @param hosp new information
* @return id for the updated hospital
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateICDCodeListAction.java-11:21
/*** Handles updating the ICD Code (Diagnosis) List Used by editICDCodes.jsp
*
* The International Statistical Classification of Diseases and Related Health Problems
* (most commonly known by the abbreviation ICD) provides codes to classify diseases and a
* wide variety of signs, symptoms, abnormal findings, complaints, social circumstances and
* external causes of injury or disease.
*
* @see http://www.cdc.gov/nchs/icd9.htm
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateICDCodeListAction.java-26:31
/*** Set up
*
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param performerID The MID of the person udpating the ICDs.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateICDCodeListAction.java-36:43
/*** Adds a new ICD code (diagnosis) based on the DiagnosisBean passed as a param
*
* @param diagn
*            The new diagnosis (ICD code)
* @return Status message
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateICDCodeListAction.java-59:66
/*** Updates a diagnosis with new information from the DiagnosisBean passed as a param
*
* @param diagn
*            new information to update (but same code)
* @return Status message
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateLOINCListAction.java-22:29
/*** Handles updating the LOINC Used.
*
* Logical Observation Identifiers Names and Codes (LOINC) is a database and universal standard for
* identifying medical laboratory observations.
*
* @see http://loinc.org/
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateLOINCListAction.java-34:39
/*** Sets up defaults
*
* @param factory
*            The DAOFactory used to create the DAOs used in this action.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateLOINCListAction.java-44:51
/*** Adds a new LOINC
*
* @param diagn
*            New LOINC
* @return Status message
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateLOINCListAction.java-64:71
/*** Updates a LOINC
*
* @param diagn
*            new information to update (but same code)
* @return Status message
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateLOINCListAction.java-87:91
/***
* @param beanInfo an array of string data to add to the LOINC bean
* @return a LOINCbean created from the beanInfo
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateLOINCListAction.java-128:137
/*** Reads a LOINC data file line by line, looking for valid LOINC data to add to the database.
*
* @param data
*            an InputStream associated with the file to parse
* @param ignoreDupData
*            false if existing in the database should be updated if new data exists in the file
* @return a list of messages concerning the parsing of the file
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateLOINCListAction.java-148:148
// Match for starting with a LOINC code: "NUMBERS AND DASHES"

iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateLOINCListAction.java-155:155
// The line must start with a LOINC code to be further processed

iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateLOINCListAction.java-161:161
// split the line along tabs

iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateLOINCListAction.java-164:164
// the line must have been split into at least 2 parts to continue

iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateLOINCListAction.java-167:167
// this was an empty field

iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateLOINCListAction.java-172:172
// The first 7 fields of LOINC data must be surrounded by quotes. If they aren't then it's wrong.

iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateLOINCListAction.java-176:176
// strip quotes

iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateLOINCListAction.java-186:186
// success

iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateLOINCListAction.java-202:202
// We updated some data

iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateLOINCListAction.java-206:206
// We skipped a line

iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateLOINCListAction.java-213:213
// If we got this we should report the line as an error

iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateLOINCListAction.java-219:219
// this is an IO error and not a data error

iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateLOINCListAction.java-220:220
// treat it differently

iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateLOINCListAction.java-223:223
// No data was changed

iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateLOINCListAction.java-225:225
// Files are only invalid if we didnt add any new data nor update any existing data.

iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateLOINCListAction.java-229:229
// Otherwise, we just skipped existing data lines.

iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateLOINCListAction.java-234:234
// Tell the user how many lines were updated/inserted.

iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateNDCodeListAction.java-11:18
/*** Handles updating the ND Code (Prescription) List Used by editNDCodes.jsp
*
* The National Drug Code (NDC) is a universal product identifier used in the
* United States for drugs intended for human use.
*
* @see http://www.fda.gov/Drugs/InformationOnDrugs/ucm142438.htm
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateNDCodeListAction.java-23:28
/*** Set up defaults.
*
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param performerID The MID of the user updating the ND lists.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateNDCodeListAction.java-33:40
/*** Adds a new ND Code (prescription) to the list
*
* @param med
*            The new ND Code to be added
* @return Status message
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateNDCodeListAction.java-56:63
/*** Updates the ND Code with new information from the MedicationBean
*
* @param med
*            the MedicationBean that holds new information but the same code
* @return status message
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateNDCodeListAction.java-79:85
/*** Medication information should already be validated
*
* @param med
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateNDCodeListAction.java-90:97
/*** Removes a ND Code (prescription) from the list
*
* @param med The ND Code to be removed
*
* @return Status message
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateReasonCodeListAction.java-11:18
/*** Handles updating the Reason Codes List Used by editReasonCodes.jsp
*
* The National Drug Code (NDC) is a universal product identifier used in the
* United States for drugs intended for human use.
*
* @see http://archinte.ama-assn.org/cgi/content/full/163/21/2625/TABLEIOI20692T4
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateReasonCodeListAction.java-23:28
/*** Set up defaults.
*
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param performerID The MID of the user updating the ND lists.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateReasonCodeListAction.java-33:40
/*** Adds a new ND Code (prescription) to the list
*
* @param orc
*            The new ND Code to be added
* @return Status message
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateReasonCodeListAction.java-56:63
/*** Updates the ND Code with new information from the OverrideReasonBean
*
* @param orc
*            the OverrideReasonBean that holds new information but the same code
* @return status message
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UpdateReasonCodeListAction.java-79:85
/*** Override Reason information should already be validated
*
* @param orc
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-17:23
/*** UploadReferenceTablesAction is an action class that is used for uploading reference tables. It reads
* in csv files and parses and loads them to a specified reference table. Contains methods for storing
* csv files for weight, height, bmi, and head circumference statistics. Each store method also verifies
* whether the passed in file is correctly formatted.
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-25:28
/*** Regex pattern to match the header format of a CDC health stats csv. Checks that header contains
* at least sex, age, L, M, and S fields
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-30:33
/*** Regex pattern to match each row of data in a CDC health stats csv. Checks that header contains at
* least sex, age, L, M, and S fields
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-41:45
/*** Constructor for UploadReferenceTablesAction. Reads in DAOFactory and initializes
* CDCStatsDAO fields with the factory.
* @param factory the DAOfactory to use for database transactions
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-53:58
/*** Parses a CSV file and stores the statistics for average patient weights
* @param weightCSV InputStream object with weight statistics csv file
* @return true if data is stored correctly in the database.
* 		   false if csv file is of the incorrect format and cannot be stored
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-63:68
/*** Parses a CSV file and stores the statistics for average patient heights/lengths
* @param heightCSV InputStream object with height statistics csv file
* @return true if data is stored correctly in the database.
* 		   false if csv file is of the incorrect format and cannot be stored
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-73:78
/*** Parses a CSV file and stores the statistics for average patient head circumferences
* @param  @param headCircCSV InputStream object with head circumference statistics csv file
* @return true if data is stored correctly in the database.
* 		   false if csv file is of the incorrect format and cannot be stored
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-83:88
/*** Parses a CSV file and stores the statistics for average patient BMIs
* @param bmiCSV InputStream object with bmi statistics csv file
* @return true if data is stored correctly in the database.
* 		   false if csv file is of the incorrect format and cannot be stored
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-93:102
/*** Parses a csv file and sends it to the CDCStatsDAO that is passed in to store the data.
* First verifies whether the csv file is formatted correctly. If the file is of the correct
* format then the file is parsed and passed into the specified CDCStatsDAO for storing.
* @param healthStatsCSV InputStream with the csv file containing the health statistics to
* store in the database
* @param dao the CDCStatsDAO to use to store the data from the csv file
* @return true if data is stored correctly in the database.
* 		   false if csv file is of the incorrect format and cannot be stored
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-108:108
//If the csv file cannot be verified, close the InputStream and return false

iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-118:118
//Create scanner to read each line of data in the csv

iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-120:120
//Scanner to parse through each row of data

iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-122:122
//String for saving a row of data

iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-125:125
//Scan and throw away the header line.

iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-128:128
//CDCStatsBean for storing health metric statistics taken from the csv file

iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-133:133
//Create new CDCStatsBean for storing a new row of data

iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-136:136
//Read a row of data

iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-139:139
//Read the next row if row is a header

iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-143:143
//Create scanner to parse each row by using commas as the delimiter

iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-145:145
//Get the sex field

iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-147:147
//Get the age field

iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-149:149
//Get the L field

iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-151:151
//Get the M field

iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-153:153
//Get the S field

iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-156:156
//Insert CDCStatsBean into the database

iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-160:160
//If there is a DBException close the InputStream and

iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-161:161
//return false since not all the data has been added correctly

iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-165:165
//Still return false if I/O error occurs

iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-173:178
/*** Verifies that a health stats csv file is of the correct format. Checks that the header is formatted
* correctly, and then checks that each data row contains only integers, doubles, and commas
* @param healthStatsCSV InputStream with the csv file whose format needs to be checked
* @return true if the csv file is correctly formatted. false otherwise.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-181:181
//Create scanner to read each line of data in the csv

iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-183:183
//String for holding a line of data from the CSV file

iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-186:186
//Read the header line

iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-191:191
//If the csv file does not contain a line, the csv file is incorrect

iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-194:194
//If the header line is incorrectly formatted then the csv file is incorrect

iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-200:200
//Verify that each consecutive line follows correct formatting

iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-203:203
//If none of the lines match a data line format nor a header line

iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-204:204
//format then the csv file is incorrect

iTrust_v21\src\edu\ncsu\csc\itrust\action\UploadReferenceTablesAction.java-211:211
//The csv file passes the verification process it is deemed correct

iTrust_v21\src\edu\ncsu\csc\itrust\action\VerifyClaimAction.java-10:13
/*** VerifyClaimAction handles the interaction between a user and the
* DAOs.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\VerifyClaimAction.java-15:15
/**The DAO to access the billing table*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\VerifyClaimAction.java-17:17
/**The DAO to access the office visits DAO*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\VerifyClaimAction.java-19:19
/**The bill that we are verifying*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\VerifyClaimAction.java-21:21
/**The office visit associated with the bill*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\VerifyClaimAction.java-24:28
/*** VerifyClaimAction simply initializes the instance variables.
* @param factory The DAO factory
* @param bID The ID of the bill.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\VerifyClaimAction.java-40:43
/*** getBill returns the bill we are handling.
* @return The billing bean.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\VerifyClaimAction.java-48:51
/*** getOV returns the office visit we are handling.
* @return The office visit bean.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\VerifyClaimAction.java-56:58
/*** denyClaim handles the user choosing to deny the claim.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\VerifyClaimAction.java-68:70
/*** approveClaim handles the user choosing to approve the claim.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewApptRequestsAction.java-17:19
/*** ViewApptRequestsAction
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewApptRequestsAction.java-27:31
/*** ViewApptRequestsAction
* @param hcpid hcpid
* @param factory factory
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewApptRequestsAction.java-40:45
/*** getApptRequests
* @return reqs
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewApptRequestsAction.java-50:56
/*** getNumRequests
* @param reqs reqs
* @return int
*
* Returns the number of times in the appointment request list
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewApptRequestsAction.java-67:73
/*** acceptApptRequest
* @param reqID reqID
* @return message
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewApptRequestsAction.java-85:85
//TODO

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewApptRequestsAction.java-93:99
/*** rejectApptRequest
* @param reqID reqID
* @return message
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewApptRequestsAction.java-110:110
//TODO

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewApptRequestsAction.java-118:126
/*** constructMessage
* @param appt appt
* @param accepted accepted
* @return msg
* @throws ITrustException
* @throws SQLException
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewClaimsAction.java-13:15
/*** ViewClaimsAction handles interaction between user input and the billing DAO.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewClaimsAction.java-18:18
/**billingAccess provides access to the Billing table*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewClaimsAction.java-20:20
/**patientRetriever provides access to the patients table*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewClaimsAction.java-23:26
/*** ViewClaimsAction simply initializes the DAOs.
* @param fact The dao factory that will create the DAOs
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewClaimsAction.java-32:35
/*** getClaims returns a list of all the insurance claims.
* @return A list of all the insurance claims.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewClaimsAction.java-46:50
/*** getSubmitter returns the person who submitted the claim.
* @param b The bill we are curious about.
* @return The name of the submitter.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewClaimsAction.java-61:65
/*** getDate returns the date the bill was submitted.
* @param b The bill we are talking
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewDiagnosisStatisticsAction.java-18:21
/*** Used for the View Diagnosis Statistics page. Can return a list of all Diagnoses
* and get diagnosis statistics for a specified Zip code, Diagnosis code, and date range.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewDiagnosisStatisticsAction.java-23:23
/** Database access methods for ICD codes (diagnoses) */

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewDiagnosisStatisticsAction.java-25:25
/** Database access methods for diagnosis information */

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewDiagnosisStatisticsAction.java-27:27
/** ICD Code for malaria */

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewDiagnosisStatisticsAction.java-29:29
/** ICD Code for Influenza */

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewDiagnosisStatisticsAction.java-32:35
/*** Constructor for the action. Initializes DAO fields
* @param factory The session's factory for DAOs
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewDiagnosisStatisticsAction.java-41:46
/*** Gets all the diagnosis codes in iTrust and returns them in a list of beans.
*
* @return List of DiagnosisBeans correlating to all ICDCodes
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewDiagnosisStatisticsAction.java-51:61
/*** Gets the counts of local and regional diagnoses for the specified input
*
* @param lowerDate The beginning date for the time range
* @param upperDate The ending date for the time range
* @param icdCode The diagnosis code to examine
* @param zip The zip code to examine
* @return A bean containing the local and regional counts
* @throws FormValidationException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewDiagnosisStatisticsAction.java-97:107
/*** Gets the local and regional counts for the specified week and calculates the prior average.
*
* @param startDate a date in the week to analyze
* @param icdCode the diagnosis to analyze
* @param zip the area to analyze
* @param threshold threshold
* @return statistics for the week and previous averages
* @throws FormValidationException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewDiagnosisStatisticsAction.java-182:190
/*** Determines if an Influenza Epidemic is happening
*
* @param curDateStr a date in the currently evaluated week
* @param zip the zip code to analyze
* @return whether or not there is an epidemic
* @throws ParseException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewDiagnosisStatisticsAction.java-217:222
/*** Calculates the threshold of an influenza epidemic
*
* @param weekNumber the week of the year
* @return the epidemic threshold for flu cases
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewDiagnosisStatisticsAction.java-227:236
/*** Determines whether a Malaria epidemic is happening
*
* @param weekDate a date in the currently evaluated week
* @param zip the zip code to analyze
* @param thresholdStr the threshold for an epidemic
* @return whether or not there is an epidemic
* @throws DBException
* @throws ParseException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewDiagnosisStatisticsAction.java-260:260
//Find earliest Malaria Case. Set calendar's year to that year

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewExerciseEntryAction.java-21:26
/*** ViewExerciseEntryAction.java
* Version 1
* 4/5/2015
* Copyright notice: none
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewExerciseEntryAction.java-34:41
/*** Uses the factory to construct ExerciseEntryDAO and PatientDAO
*
* @param factory
*            DAO factory to use
* @param loggedInMID
*            who is currently logged in
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewExerciseEntryAction.java-49:58
/*** Takes in which patient you want to view the exercise diary for, and then
* returns all of the exercise dairy entries for that patient. It first checks
* to ensure that the person requesting the exercise diary is either a patient,
* or is an HCP with a specialty of fitness expert.
*
* @param patientMID
*            the id of the patient whose exercise diary we want
* @return a list of the patient's exercise diary entries
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewExerciseEntryAction.java-64:68
/** This nightmare if-statement just checks for two things. Either:
* 1) The patient is viewing their own diary.
* 2) A trainer designated for the provided PID is viewing the diary.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewExerciseEntryAction.java-83:91
/*** Gets the total hours and calories burned, sorted by day.
*
* @param patientMID
*            the patient we are looking at
* @return an entry that contains the totals for each day that a user has an
*         entry in his exercise diary
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewExerciseEntryAction.java-97:101
/** This nightmare if-statement just checks for two things. Either:
* 1) The patient is viewing their own diary.
* 2) A trainer designated for the provided PID is viewing the diary.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewExerciseEntryAction.java-116:126
/*** Returns a list of exercise diary entries between two dates.
*
* @param lowerDate
*            the first date
* @param upperDate
*            the second date
* @return list of TransactionBeans
* @throws DBException
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewExerciseEntryAction.java-132:136
/** This nightmare if-statement just checks for two things. Either:
* 1) The patient is viewing their own diary.
* 2) A trainer designated for the provided PID is viewing the diary.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewExerciseEntryAction.java-141:144
/** Month can have 1 or 2 digits, same with day, and year must
* have 4.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewExerciseEntryAction.java-149:152
/** If it fails to match either of them, throw the form
* validation exception
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewExerciseEntryAction.java-181:193
/*** Gets the total hours and calories burned between a given date range, sorted by day.
*
* @param lowerDate
*            the first date
* @param upperDate
*            the second date
* @param patientMID
*            the patient we are looking at
* @return an entry that contains the totals for each day in the given range
*         for the patient
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewExerciseEntryAction.java-199:203
/** This nightmare if-statement just checks for two things. Either:
* 1) The patient is viewing their own diary.
* 2) A trainer designated for the provided PID is viewing the diary.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewExerciseEntryAction.java-208:211
/** Month can have 1 or 2 digits, same with day, and year must
* have 4.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewExerciseEntryAction.java-216:219
/** If it fails to match either of them, throw the form
* validation exception
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewExpiredPrescriptionsAction.java-15:19
/*** Handles retrieving beans for viewPrescriptionRecords.jsp
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewExpiredPrescriptionsAction.java-26:31
/*** Set up defaults
*
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param loggedInMID The MID of the person viewing the expired prescriptions.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewExpiredPrescriptionsAction.java-39:45
/*** Gets a PatientBean from an MID
*
* @param patientID MID of the patient
* @return PatientBean for the MID given
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewExpiredPrescriptionsAction.java-50:55
/*** Gets the logged in person's representees
*
* @return list of PatientBeans holding the representees
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewExpiredPrescriptionsAction.java-60:66
/*** Returns the prescribing HCP for a prescription
*
* @param prescription item in question
* @return HCP who prescribed the prescription
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewExpiredPrescriptionsAction.java-71:77
/*** Returns all the prescriptions for a given patient
*
* @param patientID patient in question
* @return list of all the prescriptions for that patient
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewFoodEntryAction.java-21:27
/*** We need to decide how we want to do this. We can include a check here in
* getting a food diary to ensure that the person viewing it is either a patient
* or an HCP with the specialty of 'nutritionist' before letting them get the
* food diary, or we could break this up into separate classes and separate jsp
* pages. ViewFoodEntryAction.java Version 1 2/21/2015 Copyright notice: none
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewFoodEntryAction.java-35:42
/*** Uses the factory to construct foodentrydao and patientdao
*
* @param factory
*            DAO factory to use
* @param loggedInMID
*            who is currently logged in
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewFoodEntryAction.java-50:59
/*** Takes in which patient you want to view the food diary for, and then
* returns all of the food dairy entries for that patient. It first checks
* to ensure that the person requesting the food diary is either a patient,
* or is an HCP with a specialty of nutritionist.
*
* @param patientMID
*            the id of the patient whose food diary we want
* @return a list of the patient's food diary entries
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewFoodEntryAction.java-65:70
/** This nightmare if-statement just checks for two things. Either:
* 1) The patient is viewing their own diary.
* 2) A nutritionist designated for the provided PID is viewing the diary.
* the Nutritionist must be the designated nutritionist
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewFoodEntryAction.java-85:94
/*** Gets the totals of carbs, protein, sugar, calories, sodium, fat, and
* fiber a user has eaten sorted by day.
*
* @param patientMID
*            the patient we are looking at
* @return an entry that contains the totals for each day that a user has an
*         entry in his food diary
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewFoodEntryAction.java-100:104
/** This nightmare if-statement just checks for two things. Either:
* 1) The patient is viewing their own diary.
* 2) A nutritionist designated for the provided PID is viewing the diary.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewFoodEntryAction.java-119:129
/*** Returns a list of food diary entries between two dates.
*
* @param lowerDate
*            the first date
* @param upperDate
*            the second date
* @return list of TransactionBeans
* @throws DBException
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewFoodEntryAction.java-135:139
/** This nightmare if-statement just checks for two things. Either:
* 1) The patient is viewing their own diary.
* 2) A nutritionist designated for the provided PID is viewing the diary.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewFoodEntryAction.java-145:148
/** Month can have 1 or 2 digits, same with day, and year must
* have 4.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewFoodEntryAction.java-153:156
/** If it fails to match either of them, throw the form
* validation exception
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewFoodEntryAction.java-185:198
/*** Gets the totals of carbs, protein, sugar, calories, sodium, fat, and
* fiber a user has eaten in a given date range, sorted by day.
*
* @param lowerDate
*            the first date
* @param upperDate
*            the second date
* @param patientMID
*            the patient we are looking at
* @return an entry that contains the totals for each day in the given range
*         for the patient
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewFoodEntryAction.java-204:208
/** This nightmare if-statement just checks for two things. Either:
* 1) The patient is viewing their own diary.
* 2) A nutritionist designated for the provided PID is viewing the diary.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewFoodEntryAction.java-214:217
/** Month can have 1 or 2 digits, same with day, and year must
* have 4.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewFoodEntryAction.java-222:225
/** If it fails to match either of them, throw the form
* validation exception
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-28:33
/*** ViewHealthRecordsHistoryAction is an action class used for viewing a patient's health records.
* Allows a patient or hcp to view a patient's health records dependent on the age. Contains methods
* that will sort health records by age during the office visit, calculating z scores for health metrics,
* and calculating percentiles for those z scores.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-36:36
/** The number of months in a year */

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-38:38
/** The integer for representing a Male patient */

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-40:40
/** The integer for representing a Female patient */

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-42:42
/** Pounds in a kilogram */

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-44:44
/** Inches in a centimeter */

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-46:46
/** The max z score value in the normal distribution table */

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-48:48
/** The min z score value in the normal distribution table */

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-69:76
/*** Constructor for ViewHealthRecordsHistoryAction. Initializes all DAO field objects with the DAOFactory that is passed
* in. Also sets the pid of the patient whose records are to be viewed and saves the logged in user's mid for logging.
* @param factory the DAOFactory to have database interactions with
* @param pidString the String representing the patient's mid
* @param loggedInMID long for the logged in user's mid
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-90:93
/*** Initializes the DAO fields by getting them from the DAOFactory passed in from the constructor
* @param factory DAOFactory to initialize the DAO fields with
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-103:106
/*** Gets the patient's MID as a long
* @return the patient's mid
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-111:115
/*** Get the patient's name as a String
* @return the patient's name
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-120:125
/*** Gets all of a patient's health records. Returns an ordered list starting from when the patient is youngest
* to oldest at the time the health record was taken.
* @return list of health records ordered by oldest to most recent
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-129:129
//Log for a patient

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-133:133
//Log for an HCP

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-137:137
//Get the patient's date of birth

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-140:140
//Age 3 date

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-145:145
//Age 12 date

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-162:171
/*** Calculates the percentile based on a z score. Turns the z score into a string that has significant figures to
* two decimal places. Uses the z score value up to the first decimal digit to get a normal bean from the database.
* After getting the normal bean, the percentile is obtained from the bean based on the last digit (value from the
* second decimal place).
* @param zScore the z-score to get the percentile for as a double. Z score should be an up to 2 decimal digit value.
* @return The percentile obtained from the z-score value
* -1 is returned if there is an error finding the z score in the database.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-179:179
//Convert the z score into a string rounded to two decimal places

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-181:181
//Get the normal bean for the z score based on the z score value up to the first decimal digit

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-183:183
//If the z score cannot be found in the database, return -1

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-187:187
//Double value for holding the percentile

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-190:190
//Get the percentile based on the last decimal digit value

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-220:220
//If the value is not 1-9 then it is 0

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-225:225
//Multiply the percentile value by 100 to actually get a percent value

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-227:227
//Format the percent to two decimal places

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-230:230
//Return the percentile

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-234:247
/*** Calculates the z score for a patient's weight depending on his or her age and sex. References
* values from the cdc weight statistics table. Takes the L (Box-Cox transformation), M (median), and
* S (generalized coefficient of variation) and calculates the z-score using the following equation:
* Z = ((X / M) ^ L - 1) / (L * S), if L != 0
* and
* Z = ln(X / M) / S, if L == 0
* where X is the patient's weight in kilograms.
* After the z score is calculated, it is rounded to two decimal places before it is returned.
* @param record the HealthRecord to get the patient's weight z score for
* @return the z score of the patient's weight at the office visit's rounded to two decimal places.
* -999 is also returned if there is no matching CDC stats entry in the database.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-249:249
//Get the CDCStatsBean for a patient's weight at his or her age

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-251:251
//If there is no matching entry in the CDC Stats table then return -999

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-255:255
//Get the weight in kilograms

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-258:258
//Get the z score for the patient's weight

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-264:277
/*** Calculates the z score for a patient's height depending on his or her age and sex. References
* values from the cdc height statistics table. Takes the L (Box-Cox transformation), M (median), and
* S (generalized coefficient of variation) and calculates the z-score using the following equation:
* Z = ((X / M) ^ L - 1) / (L * S), if L != 0
* and
* Z = ln(X / M) / S, if L == 0
* where X is the patient's height in centimeters.
* After the z score is calculated, it is rounded to two decimal places before it is returned.
* @param record the HealthRecord to get the patient's height z score for
* @return the z score of the patient's height at the office visit's rounded to two decimal places.
* -999 is also returned if there is no matching CDC stats entry in the database.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-279:279
//Get the CDCStatsBean for a patient's height at his or her age

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-281:281
//If there is no matching entry in the CDC Stats table then return -999

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-285:285
//Get the height in centimeters

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-288:288
//Get the z score for the patient's height

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-294:307
/*** Calculates the z score for a patient's head circumference depending on his or her age and sex. References
* values from the cdc head circumference statistics table. Takes the L (Box-Cox transformation), M (median), and
* S (generalized coefficient of variation) and calculates the z-score using the following equation:
* Z = ((X / M) ^ L - 1) / (L * S), if L != 0
* and
* Z = ln(X / M) / S, if L == 0
* where X is the patient's head circumference in centimeters.
* After the z score is calculated, it is rounded to two decimal places before it is returned.
* @param record the HealthRecord to get the patient's head circumference z score for
* @return the z score of the patient's head circumference at the office visit's rounded to two decimal places
* -999 is also returned if there is no matching CDC stats entry in the database.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-309:309
//Get the CDCStatsBean for a patient's head circumference at his or her age

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-311:311
//If there is no matching entry in the CDC Stats table then return -999

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-315:315
//Get the head cirumference in centimeters

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-318:318
//Get the z score for the patient's head circumference

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-324:337
/*** Calculates the z score for a patient's bmi depending on his or her age and sex. References
* values from the cdc bmi statistics table. Takes the L (Box-Cox transformation), M (median), and
* S (generalized coefficient of variation) and calculates the z-score using the following equation:
* Z = ((X / M) ^ L - 1) / (L * S), if L != 0
* and
* Z = ln(X / M) / S, if L == 0
* where X is the patient's bmi in centimeters.
* After the z score is calculated, it is rounded to two decimal places before it is returned.
* @param record the HealthRecord to get the patient's bmi z score for
* @return the z score of the patient's bmi at the office visit's rounded to two decimal places
* -999 is also returned if there is no matching CDC stats entry in the database.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-339:339
//Get the CDCStatsBean for a patient's BMI at his or her age

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-341:341
//If there is no matching entry in the CDC Stats table then return -999

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-345:345
//Get the bmi of the patient

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-348:348
//Get the z score for the patient's bmi

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-354:361
/*** Gets a CDCStatsBean based on a patient's age, sex, and health metric. Reads in a CDCStatsDAO that
* determines what database the bean is taken from.
* @param record the HealthRecord object that a patient's age is calculated from
* @param statsDAO the CDCStatsDAO to get a the CDCStatsBean from
* @return a CDCStatsBean based on the patient's age, sex, and health metric
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-363:363
//Integer for holding the patient's gender

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-365:365
//Get the patient's gender

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-372:372
//Get the patient's age

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-375:375
//If the patient's birthdate equals the office visit date,

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-376:376
//the patient's age is 0 months

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-379:379
//Otherwise add 0.5 to the patient's age in months

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-383:383
//Get the CDCStatsBean for a patient's health metric at his or her age

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-387:387
//If there is no match with the specified age and sex,

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-388:388
//query again with the age rounded down as a whole number

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-395:409
/*** Calculates the z score for a patient's health metric. Takes the L (Box-Cox transformation), M (median),
* and S (generalized coefficient of variation) from the passed in CDCStatsBean and calculates the z-score
* using the following equation:
* Z = ((X / M) ^ L - 1) / (L * S), if L != 0
* and
* Z = ln(X / M) / S, if L == 0
* where X is the patient's health metric in metric units (Centimeters for height and head circumference.
* Kilograms for weight). After the z score is calculated, it is rounded to two decimal places before it
* is returned.
* @param statsBean The stats bean for
* @param healthMetric value for the health metric to get a z score for.
* (In cm for height and head circumference. In kg for weight)
* @return the z score for the health metric value based on the L, M, and S values from the CDCStatsBean.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-411:411
//Get the L, M, and S values for a patient's bmi at his or her age

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-416:416
//Double for holding the z-score

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-420:420
//If L is 0 then calculate the z score differently

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-426:426
//Round the z score to two decimal places

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-432:436
/*** Returns the patient's gender for use in percentile charting.
* @return patient gender as a string: "Male" or "Female"
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-442:448
/*** Calculates the patient's age during an office visit. Reads in an office visit ID and gets
* its visit date to check against the patient's birthday. Returns the patient's age in months.
* @param ovID long for the office visit ID of the office visit to get the patient's age for
* @return the patient's age in months
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-450:450
//Create int for patient's age in months

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-453:453
//Get office visit information

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-458:458
//Get the patient's birthdate

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-463:463
//Split the patient's birthdate into day, month, and year

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-467:467
//Split the office visit date into day month and year

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-472:472
//Calculate the year, month, and day differences

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-477:477
//Get the patient's age in months by multiplying the year difference by 12

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-478:478
//and adding the month difference

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-481:481
//If the day difference is negative, subtract a month from the age

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHealthRecordsHistoryAction.java-486:486
//Return the age in months

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHelperAction.java-3:6
/*** Edits the designated personnel Used by admin/editPersonnel.jsp, staff/editMyDemographics.jsp,
* editPersonnel.jsp
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewHelperAction.java-9:15
/*** calculateColor
* @param primaryColor primaryColor
* @param secondaryColor secondaryColor
* @param ratio ratio
* @return string
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewImmunizationReportAction.java-32:34
/** This method will return a list of all of the required procedures currently in the system.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewImmunizationReportAction.java-39:41
/** This method will return a list of all of the required procedures for the ageGroup passed in.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewImmunizationReportAction.java-46:49
/** This method will return a list of all of the procedures that the patient passed in will need in
* order to be covered for their age group.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewImmunizationReportAction.java-67:67
//check to see if the patient is over the age of 5 and 18 respectively

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewImmunizationReportAction.java-75:75
//check to see if the patient was born BEFORE 1994 and 1957 respectively.

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewImmunizationReportAction.java-85:85
//add the required procedures to the list, checking our controlling variables for extenuating vaccinations

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewImmunizationReportAction.java-105:105
//RETURN THAT SHIT

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewImmunizationReportAction.java-109:114
/*** Get an HCP's name from their MID.
* @param hcpId String MID of the HCP to get
* @return the name of the specified HCP
* @throws ITrustException if the HCP ID does not exist
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMacronutrientsAction.java-16:25
/*** ViewMacronutrientsAction.java
* Version 1
* 4/1/2015
* Copyright notice: none
*
* Responsible for loading the entries in a patient's food diary,
* the totals a patient has eaten, and adding a new entry to a patient's
* food diary
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMacronutrientsAction.java-27:27
// MacronutrientsBean FoodEntryBean

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyAccessLogAction.java-20:24
/*** Handles retrieving the log of record accesses for a given user Used by viewAccessLog.jsp
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyAccessLogAction.java-30:35
/*** Set up
*
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param loggedInMID The MID of the person retrieving the logs.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyAccessLogAction.java-42:52
/*** Returns a list of TransactionBeans between the two dates passed as params
*
* @param lowerDate
*            the first date
* @param upperDate
*            the second date
* @return list of TransactionBeans
* @throws DBException
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyAccessLogAction.java-58:58
//get the medical dependents for a signed in user. If the selected user is not the

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyAccessLogAction.java-59:59
//signed in user or one of the dependents, then the user doesn't have access to the log

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyAccessLogAction.java-66:66
//TODO

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyAccessLogAction.java-80:80
//user has either 0 or 1 DLHCP's. Get one if exists so it can be filtered from results

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyAccessLogAction.java-89:92
/*the way the Date class works, is if you enter more months, or days thanis allowed, it will simply mod it, and add it all together. To make sure it
matches MM/dd/yyyy, I am going to use a Regular Expression
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyAccessLogAction.java-93:93
//month can have 1 or 2 digits, same with day, and year must have 4

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyAccessLogAction.java-97:97
//if it fails to match either of them, throw the form validation exception

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyAccessLogAction.java-114:120
/*** Returns the date of the first Transaction in the list passed as a param if the list is not empty
* otherwise, returns today's date
*
* @param accesses A java.util.List of TransactionBeans for the accesses.
* @return A String representing the date of the first transaction.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyAccessLogAction.java-132:138
/*** Returns the date of the last Transaction in the list passed as a param if the list is not empty
* otherwise, returns today's date
*
* @param accesses A java.util.List of TransactionBeans storing the access.
* @return A String representation of the date of the last transaction.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyAccessLogAction.java-150:156
/*** Return a list of patients that pid represents
*
* @param pid The id of the personnel we are looking up representees for.
* @return a list of PatientBeans
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyApptsAction.java-25:32
/*** Gets a user's appointments
*
* @param mid the MID of the user
* @return a list of the user's appointments
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyBillingAction.java-1:3
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyBillingAction.java-13:14
/** This class is responsible for retrieving bills for a patient*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyBillingAction.java-19:22
/*** @param factory The DAOFactory used to create the DAOs used in this action
* @param loggedInMID MID of the patient who is viewing their bills
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyBillingAction.java-28:34
/*** Gets all the unpaid bills for a logged in patient
*
* @return a list of all unpaid bills
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyBillingAction.java-39:45
/*** Gets all the bills for a logged in patient.
*
* @return a list of all bills
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyLabProceduresAction.java-22:27
/*** Get the number of unviewed lab procedures that the current user has.
*
* @return The number of unviewed lab procedures.
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyMessagesAction.java-20:22
/*** Action class for ViewMyMessages.jsp
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyMessagesAction.java-30:35
/*** Set up defaults
*
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param loggedInMID The MID of the user who is viewing their messages.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyMessagesAction.java-44:50
/*** Gets all the messages for the logged in user
*
* @return a list of all the user's messages
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyMessagesAction.java-56:62
/*** Gets all the messages for the logged in user and sorts by ascending time
*
* @return a list of all the user's messages
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyMessagesAction.java-68:74
/*** Gets all the messages for the logged in user and sorts names in ascending order
*
* @return a list of all the user's messages
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyMessagesAction.java-80:86
/*** Gets all the messages for the logged in user and sorts name in descending order
*
* @return a list of all the user's messages
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyMessagesAction.java-92:97
/*** Gets all the sent messages for the logged in user
*
* @return a list of all the user's sent messages
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyMessagesAction.java-103:108
/*** Gets all the messages for the logged in user and sorts by ascending time
*
* @return a list of all the user's messages
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyMessagesAction.java-114:119
/*** Gets all the messages for the logged in user and sorts names in ascending order
*
* @return a list of all the user's messages
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyMessagesAction.java-125:130
/*** Gets all the messages for the logged in user and sorts name in descending order
*
* @return a list of all the user's messages
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyMessagesAction.java-137:145
/*** Gets a list of messages for a user based on their filter criteria.
*
* @param messages List of all of a user's MessageBeans
* @param filter String containing a user's filter criteria.
* @return a List of MessageBeans that meet the criteria of the filter.
* @throws ITrustException
* @throws ParseException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyMessagesAction.java-150:154
/*** Check the sender filter field.
* Exclude if this MessageBean does not match the
* requested sender, if one is specified.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyMessagesAction.java-159:163
/*** Check the subject filter field.
* Exclude if this MessageBean does not match the
* requested subject, if one is specified.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyMessagesAction.java-168:172
/*** Check the body of the message for certain words.
* Exclude if this MessageBean if it does not contain
* those words in the message body.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyMessagesAction.java-177:181
/*** Check the body of the message for certain words.
* Exclude if this MessageBean if it does contain
* those words in the message body.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyMessagesAction.java-186:190
/*** Check the start date filter field.
* Exclude if this MessageBean was not sent after
* this date.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyMessagesAction.java-198:202
/*** Check the end date filter field.
* Exclude if this MessageBean was not sent before
* this date.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyMessagesAction.java-214:218
/*** If the message has not been eliminated by any
* of the filter fields, add it to the new list
* of messages.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyMessagesAction.java-225:231
/*** Gets a patient's name from their MID
*
* @param mid the MID of the patient
* @return the patient's name
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyMessagesAction.java-239:245
/*** Gets a personnel's name from their MID
*
* @param mid the MID of the personnel
* @return the personnel's name
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyMessagesAction.java-250:254
/*** Set the state of the MessageBean to read, after
* it is read by a user.
* @param mBean MessageBean to be read
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyMessagesAction.java-259:259
//TODO

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyMessagesAction.java-263:269
/*** Get the number of unread messages that the current user has.
*
* @return The number of unread messages.
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyMessagesAction.java-281:286
/*** linkedToReferral
* @param id id
* @return referralDAO
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyMessagesAction.java-291:297
/*** getCCdMessages
* @param refID refID
* @return messageDAO
* @throws DBException
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-35:39
/*** Handles patients viewing their own records Used by viewMyRecords.jsp
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-41:41
/** The number of months in a year */

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-59:63
/*** Set up
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param loggedInMID The MID of the person viewing the records.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-87:95
/*** Takes the patient's representee as a param and returns it as a long if the patient represents the input
* param
*
* @param input
*            the patient's representee mid
* @return representee's mid as a long
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-110:115
/*** Returns a PatientBean for the currently logged in patient
*
* @return PatientBean for the currently logged in patient
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-120:125
/*** Returns a PatientBean for the specified MID
* @param mid id of the requested bean
* @return PatientBean for the specified MID
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-130:135
/*** Returns a PersonnelBean for the requested MID
* @param mid id of the requested bean
* @return a PersonnelBean for the requested MID
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-140:145
/*** Returns a PatientBean for the currently logged in patient
*
* @return PatientBean for the currently logged in patient
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-150:155
/*** Returns a list of AllergyBeans for the currently logged in patient
*
* @return a list of AllergyBeans for the currently logged in patient
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-160:164
/*** Returns a list of Parents, Siblings, and Children of the currently logged in patient
*
* @return list of FamilyMemberBeans
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-196:200
/*** Returns a list of Parents, Siblings, and Grand Parents of the currently logged in patient
*
* @return list of FamilyMemberBeans
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-231:236
/*** Returns a list of HealthRecords for the currently logged in patient
*
* @return a list of HealthRecords for the currently logged in patient
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-241:246
/*** Returns a list of HealthRecords for the specified family member
*
* @return a list of HealthRecords for the specified family member
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-251:256
/*** Returns a list of OfficeVisitBeans for all office visits for the currently logged in patient
*
* @return  a list of OfficeVisitBeans for all office visits for the currently logged in patient
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-261:266
/*** Returns a complete OfficeVisitBean given a visitID
*
* @return a complete OfficeVisitBean given a visitID
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-275:280
/*** Returns a list of PatientBeans of all patients the currently logged in patient represents
*
* @return a list of PatientBeans of all patients the currently logged in patient represents
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-285:290
/*** Returns a list of PatientBeans of all patients the currently logged in patient represents
*
* @return a list of PatientBeans of all patients the currently logged in patient represents
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-295:301
/*** Has a survey been created for this office visit
*
* @param visitID ID of the office visit in question
* @return true if the survey has been completed, otherwise false
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-306:311
/*** Returns a list of lab procedures
*
* @return a list of lab procedures for the logged in patient
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-327:331
/*** Returns all the report requests for the logged in patient
* @return the report requests for the logged in patient
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-336:342
/*** Checks to see if family members have high blood pressure
*
* @param member the family member in question
* @return true if the family member has the risk factor, otherwise false.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-354:360
/*** Checks to see if family members have high cholesterol
*
* @param member the family member in question
* @return true if the family member has the risk factor, otherwise false.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-372:378
/*** Checks to see if family members have diabetes
*
* @param member the family member in question
* @return true if the family member has the risk factor, otherwise false.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-390:396
/*** Checks to see if family members have cancer
*
* @param member the family member in question
* @return true if the family member has the risk factor, otherwise false.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-408:414
/*** Checks to see if family members have heart disease
*
* @param member the family member in question
* @return true if the family member has the risk factor, otherwise false.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-426:432
/*** Checks to see if family members smoke
*
* @param member the family member in question
* @return true if the family member has the risk factor, otherwise false.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-444:450
/*** Checks to see if family member is dead, and if so, what their cause of death was
*
* @param member the family member in question
* @return the cause of death for the family member
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-461:468
/*** Get patient's (logged in user's) age in months by taking the date of viewing the patient's records
* and comparing it with the patient's date of birth.
*
* @param viewDate The date of the patient's records are being viewed
* @return the patient's age in months
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-470:470
//Create int for patient's age in months

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-473:473
//Get the patient's birthdate

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-478:478
//Split the patient's birthdate into day, month, and year

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-482:482
//Split the office visit date into day month and year

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-487:487
//Calculate the year, month, and day differences

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-492:492
//Get the patient's age in months by multiplying the year difference by 12

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-493:493
//and adding the month difference

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-496:496
//If the day difference is negative, subtract a month from the age

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRecordsAction.java-501:501
//Return the age in months

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRemoteMonitoringListAction.java-16:18
/*** Handles retrieving the patient data for a certain HCP as used by viewTelemedicineData.jsp
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRemoteMonitoringListAction.java-24:29
/*** Constructor
*
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param loggedInMID The MID of the HCP retrieving the patient data.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRemoteMonitoringListAction.java-36:42
/*** Returns a list of RemoteMonitoringDataBeans for the logged in HCP
*
* @return list of TransactionBeans
* @throws DBException
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRemoteMonitoringListAction.java-47:55
/*** Returns a list of RemoteMonitoringDataBeans for the logged in HCP
* @param patientMID patientMID
* @param startDate startDate
* @param endDate endDate
* @return list of TransactionBeans
* @throws DBException
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRemoteMonitoringListAction.java-72:79
/*** Returns a list of RemoteMonitoringDataBeans for the logged in HCP based on a certain data type
* @param patientMID patientMID
* @param dataType dataType
* @return list of TransactionBeans
* @throws DBException
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRemoteMonitoringListAction.java-99:103
/*** getPatientDataWithoutLogging
* @return rmDAO
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRemoteMonitoringListAction.java-108:113
/*** returns the patient name
* @param pid pid
* @return patient name
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyRemoteMonitoringListAction.java-118:123
/*** Useful to figure out who is monitoring a given patient
*
* @return list of HCPs monitoring this patient
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyReportRequestsAction.java-12:14
/*** Action class for ViewMyReports.jsp.  Allows the user to see all their reports
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyReportRequestsAction.java-20:25
/*** Set up
*
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param loggedInMID The MID of the person viewing their report requests.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyReportRequestsAction.java-32:37
/*** Returns all the reports for the currently logged in HCP
*
* @return list of all reports for the logged in HCP
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyReportRequestsAction.java-43:49
/*** Adds a report request to the list
*
* @param patientMID ID of the patient that the report request is for
* @return id
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyReportRequestsAction.java-58:64
/*** Returns the requested report
*
* @param ID id of the requested report
* @return the requested report
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyReportRequestsAction.java-69:74
/*** Sets the viewed status of the report.  If the report is "viewed" the HCP must request a new one to see it again.
*
* @param ID id of the report
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyReportRequestsAction.java-80:86
/*** Gets the status of the request
*
* @param id id of the request
* @return the request's status
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewMyReportRequestsAction.java-105:105
// purpose

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewObstetricsAction.java-15:18
/*** ViewObstetricsAction is a class to help the Initialize Obstetrics Record page to get all the records that should
* be displayed on the page (by MID), and the View Obstetrics Record page to get a record when selected (by OID).
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewObstetricsAction.java-21:21
/**obstetricsDAO is the DAO that retrieves the obstetrics records from the database*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewObstetricsAction.java-24:24
/**loggedInMID is the HCP that is logged in.*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewObstetricsAction.java-28:36
/*** ViewObstetricsAction is the constructor for this action class. It simply initializes the
* instance variables.
* @param factory The factory used to get the obstetricsDAO.
* @param loggedInMID The MID of the logged in user.
* @param MID The MID
* @param OID the OID
* @throws ITrustException When there is a bad user.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewObstetricsAction.java-45:49
/*** getViewableObstetricsRecordsByMID returns a list of obstetrics record beans for past obstetrics care
* @return The list of obstetrics records.
* @throws ITrustException When there is a bad user.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewObstetricsAction.java-56:60
/*** getViewableObstetricsRecordsByMID returns a list of obstetrics record beans for past obstetrics care
* @return The list of obstetrics records.
* @throws ITrustException When there is a bad user.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewObstetricsAction.java-68:73
/*** Retrieves a ObstetricsRecordBean
*
* @return ObstetricsRecordBean
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOfficeVisitAction.java-26:31
/*** Handles viewing the office visits, prescriptions, and HCP name for the given ovID Used by
* viewOfficeVisit.jsp
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOfficeVisitAction.java-34:34
/** The number of months in a year */

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOfficeVisitAction.java-47:55
/*** Super class handles validating the loggedInMid and ovIDString
*
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param loggedInMID The MID of the person viewing their office visits.
* @param ovIDString
*            The unique identifier of the office visit as a String.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOfficeVisitAction.java-70:78
/*** Super class handles validating the pidString and ovIDString. Usually used for representing a patient.
*
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param repPIDString The MID of the representative viewing the records.
* @param ovIDString
*            The unique identifier of the office visit as a String.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOfficeVisitAction.java-106:112
/*** Returns the office visit as an OfficeVisitBean for the ovID that was initially passed to the
* constructor
*
* @return the OfficeVisitBean for the ovID
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOfficeVisitAction.java-117:122
/*** Returns the prescriptions associated with the ovID initially passed to the constructor
*
* @return list of PrescriptionBeans for the ovID
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOfficeVisitAction.java-147:152
/*** Returns the HealthRecord related to this office visit's ID
*
* @return Health record specific to office visit ID
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOfficeVisitAction.java-164:170
/*** Returns the name of the HCP for the hcpID passed as a param
*
* @param hcpID
* @return the name of the HCP
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOfficeVisitAction.java-183:189
/*** Get patient's age in months by taking the office visit date and comparing it with the patient's
* date of birth.
*
* @return the patient's age in months
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOfficeVisitAction.java-191:191
//Create int for patient's age in months

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOfficeVisitAction.java-194:194
//Get the office visit date

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOfficeVisitAction.java-198:198
//Get the patient's birthdate

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOfficeVisitAction.java-203:203
//Split the patient's birthdate into day, month, and year

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOfficeVisitAction.java-207:207
//Split the office visit date into day month and year

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOfficeVisitAction.java-212:212
//Calculate the year, month, and day differences

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOfficeVisitAction.java-217:217
//Get the patient's age in months by multiplying the year difference by 12

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOfficeVisitAction.java-218:218
//and adding the month difference

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOfficeVisitAction.java-221:221
//If the day difference is negative, subtract a month from the age

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOfficeVisitAction.java-226:226
//Return the age in months

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOphthalmologyOVAction.java-15:19
/*** Used for view ophthalmology office visit page (viewOphalmologyOVRecord.jsp).
*
* Very similar to {@link ViewObstetricsAction}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOphthalmologyOVAction.java-21:22
/**ophthalmologyOVDAO is the DAO that retrieves the ophthalmology office*  visit records from the database*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOphthalmologyOVAction.java-24:24
/**loggedInMID is the User that is logged in.*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOphthalmologyOVAction.java-26:26
/**loggingAction is used to write to the log.*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOphthalmologyOVAction.java-28:28
/** PatientDAO for working with patient objects in the database*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOphthalmologyOVAction.java-31:36
/*** ViewOphthalmologyOVAction is the constructor for this action class. It simply initializes the
* instance variables.
* @param factory The factory used to get the obstetricsDAO.
* @param loggedInMID The MID of the logged in user.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOphthalmologyOVAction.java-44:49
/*** getOphthalmologyOVByMID returns a list of ophthalmology office visits record beans for past ophthalmology care.
* @param mid the mid of the patient.
* @return The list of ophthalmology office visit records.
* @throws ITrustException When there is a bad user.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOphthalmologyOVAction.java-54:59
/*** Retrieves an OphthalmologyOVRecordBean for an HCP.
* @param oid The oid of the ophthalmology office visit
* @return A bean containing the ophthalmology office visit.
* @throws ITrustException When there is a bad oid passed in.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOphthalmologyOVAction.java-67:72
/*** Retrieves an OphthalmologyOVRecordBean for a Patient.
* @param oid The oid of the ophthalmology office visit
* @return A bean containing the ophthalmology office visit.
* @throws ITrustException When there is a bad oid passed in.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOphthalmologyOVAction.java-80:85
/*** Retrieves an OphthalmologyOVRecordBean for Representee of the dependent.
* @param oid The oid of the ophthalmology office visit
* @return A bean containing the ophthalmology office visit.
* @throws ITrustException When there is a bad oid passed in.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOphthalmologyOVAction.java-93:98
/*** Returns a list of PatientBeans of all patients the currently logged in patient represents and are a dependent
*
* @param mid The mid of the patient that the dependents for are being returned.
* @return a list of PatientBeans of all patients the currently logged in patient represents and are a dependent
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOphthalmologyOVAction.java-104:104
//If a DBException occurs print a stack trace and return an empty list

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOphthalmologyScheduleOVAction.java-10:12
/*** Used for viewing ophthalmology office visit requests.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOphthalmologyScheduleOVAction.java-15:16
/**ophthalmologyOVDAO is the DAO that retrieves the ophthalmology office*  visit records from the database*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOphthalmologyScheduleOVAction.java-19:24
/*** ViewOphthalmologyOVAction is the constructor for this action class. It simply initializes the
* instance variables.
* @param factory The factory used to get the obstetricsDAO.
* @param loggedInMID The MID of the logged in user.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOphthalmologyScheduleOVAction.java-29:34
/*** getOphthalmologyScheduleOVByMID returns a list of ophthalmology scheduled office visits record beans for the patient.
* @param mid the mid of the patient.
* @return The list of ophthalmology office visit records.
* @throws ITrustException When there is a bad user.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOphthalmologyScheduleOVAction.java-39:44
/*** getOphthalmologyScheduleOVByMID returns a list of ophthalmology scheduled office visits record beans for the doctor.
* @param mid the mid of the patient.
* @return The list of ophthalmology office visit records.
* @throws ITrustException When there is a bad user.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOphthalmologyScheduleOVAction.java-49:54
/*** Retrieves an OphthalmologyScheduleOVRecordBean for a Patient.
* @param oid The oid of the ophthalmology scheduled office visit
* @return A bean containing the ophthalmology scheduled office visit.
* @throws ITrustException When there is a bad oid passed in.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOphthalmologyScheduleOVAction.java-60:65
/*** Retrieves an OphthalmologyScheduleOVRecordBean for a HCP.
* @param oid The oid of the ophthalmology scheduled office visit
* @return A bean containing the ophthalmology scheduled office visit.
* @throws ITrustException When there is a bad oid passed in.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOphthalmologySurgeryAction.java-11:15
/*** Used for view ophthalmology office visit page (viewOphalmologySurgeryRecord.jsp).
*
* Very similar to {@link ViewObstetricsAction}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOphthalmologySurgeryAction.java-17:18
/**ophthalmologySurgeryDAO is the DAO that retrieves the ophthalmology office*  visit records from the database*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOphthalmologySurgeryAction.java-20:20
/**loggedInMID is the User that is logged in.*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOphthalmologySurgeryAction.java-22:22
/**loggingAction is used to write to the log.*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOphthalmologySurgeryAction.java-25:30
/*** ViewOphthalmologySurgeryAction is the constructor for this action class. It simply initializes the
* instance variables.
* @param factory The factory used to get the obstetricsDAO.
* @param loggedInMID The MID of the logged in user.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOphthalmologySurgeryAction.java-37:42
/*** getOphthalmologySurgeryByMID returns a list of ophthalmology office visits record beans for past ophthalmology care.
* @param mid the mid of the patient.
* @return The list of ophthalmology office visit records.
* @throws ITrustException When there is a bad user.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewOphthalmologySurgeryAction.java-47:52
/*** Retrieves an OphthalmologySurgeryRecordBean for an HCP.
* @param oid The oid of the ophthalmology office visit
* @return A bean containing the ophthalmology office visit.
* @throws ITrustException When there is a bad oid passed in.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientAction.java-13:16
/*** ViewPatientAction is just a class to help the edit demographics page get all the users that should
* be displayed on the page.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientAction.java-19:19
/**patientDAO is the patientDAO that retrieves the users from the database*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientAction.java-21:21
/**loggedInMID is the patient that is logged in.*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientAction.java-23:23
/**Viewer is the patient bean for the person that is logged in*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientAction.java-26:33
/*** ViewPateintAction is the constructor for this action class. It simply initializes the
* instance variables.
* @param factory The facory used to get the patientDAO.
* @param loggedInMID The MID of the logged in user.
* @param pidString The user ID patient we are viewing.
* @throws ITrustException When there is a bad user.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientAction.java-42:47
/*** getViewablePateints returns a list of patient beans that should be viewed by this
* patient.
* @return The list of this users dependents and this user.
* @throws ITrustException When there is a bad user.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientAction.java-53:53
//see if this viewer has updated his information at all, and then add him to the list

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientAction.java-63:70
/*** Retrieves a PatientBean for the mid passed in as a String
*
* @param input
*            the mid for which the PatientBean will be returned
* @return PatientBean
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientInstructionsAction.java-16:18
/*** Allow a patient to view his patient-specific instructions.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientInstructionsAction.java-25:30
/*** Construct a ViewPatientInstructionsAction for a given patient.
* @param factory The DAO Factory.
* @param pidString The patient ID as a string.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientInstructionsAction.java-38:42
/*** Get all office visits for this patient that contain instructions.
* @return A list of office visit beans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientInstructionsAction.java-47:52
/*** Get a list of patient instructions for a given office vsiit.
* @param ovid The office visit id to check.
* @return A list of patient instructions beans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientInstructionsAction.java-57:61
/*** Get a map in which to lookup HCP names from an HCP id.
* @return A map which associated HCP ids with their names.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientOfficeVisitHistoryAction.java-18:22
/***
* Action class for ViewPatientOfficeVisitHistory.jsp
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientOfficeVisitHistoryAction.java-30:34
/*** Set up defaults
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param loggedInMID The MID of the person viewing the office visits.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientOfficeVisitHistoryAction.java-45:49
/*** Adds all the office visits for the logged in HCP to a list.
*
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientOfficeVisitHistoryAction.java-55:55
// Create a new visit bean

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientOfficeVisitHistoryAction.java-58:58
// Add patient's information to the visit

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientOfficeVisitHistoryAction.java-64:64
// Get this patients office visit history

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientOfficeVisitHistoryAction.java-66:66
// If they've had an office visit previously, get the date of the latest visit

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientOfficeVisitHistoryAction.java-68:68
// The list is ordered DESC, so the first entry will be the latest

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientOfficeVisitHistoryAction.java-82:82
// The patient hasn't had an office visit, so set the date to null

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientOfficeVisitHistoryAction.java-97:102
/*** Get the list of patients an HCP has had office visits with
*
* @return the list of patients an HCP has had office visits with
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientOfficeVisitHistoryAction.java-109:109
//TODO

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientOfficeVisitHistoryAction.java-114:118
/*** Returns a PersonnelBean for the logged in HCP
* @return PersonnelBean for the logged in HCP
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientReferralsAction.java-14:18
/*** This class is an action class that sits in between the JSP and the DAO The methods help facilitate
* functionality for the viewPatientReferrals.jsp
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientReferralsAction.java-31:40
/*** Get all referrals for a patient sorted by the given field and in the given direction.
*
* @param field
*            The name of the pseudo-field to sort by.
* @param dir
*            The direction of the sort.
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientReferralsAction.java-45:50
/*** This method returns the number of messages for a given patient that have not been read.
*
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientReferralsAction.java-55:61
/*** This method gets a referral by its id
*
* @param id
* @return a referral bean
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientReferralsAction.java-66:72
/*** This method updates the referral in the DAO
*
* @param bean
* @return a boolean expression used for testability
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientReferralsAction.java-78:84
/*** This method updates the referral in the DAO
*
* @param bean
* @return a boolean expression used for testability
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPatientReferralsAction.java-90:97
/*** This method returns an office visit bean given its id. The purpose is to use the bean in the related
* JSP to get the office visit date.
*
* @param id
* @return an office visit bean
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPersonnelAction.java-12:16
/*** Handles retrieving personnel beans for a given personnel Used by viewPersonnel.jsp
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPersonnelAction.java-22:27
/*** Set up defaults
*
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param loggedInMID The MID of the person retrieving personnel beans.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPersonnelAction.java-34:41
/*** Retrieves a PersonnelBean for the mid passed as a param
*
* @param input
*            the mid for which the PersonnelBean will be returned
* @return PersonnelBean
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPersonnelAction.java-56:61
/*** Returns a PatientBean for the currently logged in personnel
*
* @return The PatientBean
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPrescriptionRecordsAction.java-17:21
/*** Handles retrieving beans for viewPrescriptionRecords.jsp
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPrescriptionRecordsAction.java-28:33
/*** Set up defaults
*
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param loggedInMID The MID of the person viewing prescription records.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPrescriptionRecordsAction.java-41:47
/*** Gets a PatientBean from an MID
*
* @param patientID MID of the patient
* @return PatientBean for the MID given
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPrescriptionRecordsAction.java-52:57
/*** Gets the logged in person's representees
*
* @return list of PatientBeans holding the representees
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPrescriptionRecordsAction.java-62:68
/*** Returns the prescribing HCP for a prescription
*
* @param prescription item in question
* @return HCP who prescribed the prescription
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPrescriptionRecordsAction.java-73:79
/*** Returns all the prescriptions for a given patient
*
* @param patientID patient in question
* @return list of all the prescriptions for that patient
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPrescriptionRenewalNeedsAction.java-11:15
/** This action returns a list of patients with a special-diagnosis-history who
* have the logged in HCP as a DHCP and whose medications are going to
* expire within seven days.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPrescriptionRenewalNeedsAction.java-20:25
/*** Set up defaults
*
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param loggedInMID The MID of the person viewing the prescription renewals.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewPrescriptionRenewalNeedsAction.java-31:37
/*** Uses PatientDAO as a helper class to return a list of patients with a special-diagnosis-history who
* have the logged in HCP as a DHCP and whose medications are going to
* expire within seven days.
*
* @return A list of PatientBean's
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewReceivingReferralsAction.java-12:13
/***/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-21:21
/** PersonnelDAO object for accessing the patients in the database*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-23:23
/** RecordsReleaseDAO object for accessing record release requests in the database*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-25:25
/** AuthDAO for determining the type of user the user is */

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-27:27
/** PatientDAO for working with patient objects in the database*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-29:29
/** HospitalsDAO for getting hospital objects from the database*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-31:31
/** HealthRecordsDAO for getting health records from the database*/

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-34:34
/** Long for storing the logged in hcp/uap's mid */

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-37:40
/*** Constructor for RequestRecordsReleaseAction. Gets and initializes all necessary DAOs for
* working with requesting a patient's records.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-81:81
//Try to get the doctor's name with the specified mid

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-84:84
//If a DBException is thrown, print a stack trace and return a blank name

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-92:92
//List for holding records release requests

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-94:94
//List of hospitals that the hcp/uap is associated with

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-96:96
//Get the logged in user's role

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-100:100
//Check the user's role and get a list of hospitals depending on that

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-110:110
//Add to the list of records release requests from each associated hospital

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-112:112
//Get each hospital's id

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-117:117
//If there is a DBException return an empty list

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-146:146
//If the request status is not pending, don't update

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-150:150
//Set the request to approved status

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-153:153
//Update the records release object

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-156:156
//If a DBException is caught reset the status and return false

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-165:165
//If the request status is not pending, don't update

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-169:169
//Set the request to denied status

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-173:173
//Update the records release object

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-176:176
//If a DBException is caught reset the status and return false

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-185:185
//Get the patient's mid

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-187:187
//Get the hospital id of the request

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-190:190
//List of health records from the requested hospital

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-194:194
//Get all of the patient's health records from the specified hospital

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewRecordsReleaseAction.java-197:197
// If a DBException is thrown print a stack trace and return an empty list

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewReportAction.java-14:18
/***
* Action class for ViewReport.jsp
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewReportAction.java-23:27
/*** Set up defaults
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param loggedInMID The MID of the person viewing the report.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewReportAction.java-33:38
/***  Get diagnosis list for the given patient
* @param pid the patient of interest
* @return list of diagnoses
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewReportAction.java-43:48
/***  Get procedure list for the given patient
* @param pid the patient of interest
* @return list of procedures
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewReportAction.java-53:58
/***  Get prescription list for the given patient
* @param pid the patient of interest
* @return list of prescriptions
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewReportAction.java-63:68
/***  Get declared HCPs list for the given patient
* @param pid the patient of interest
* @return list of declared HCPs
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewReportAction.java-73:78
/*** Returns a PersonnelBean when given an MID
* @param mid HCP of interest
* @return PersonnelBean of the given HCP
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewReportAction.java-83:88
/*** Returns a PaitentBean when given an MID
* @param mid patient of interest
* @return PatientBean of the given HCP
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewSentReferralsAction.java-1:3
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewSentReferralsAction.java-17:20
/*** Class for viewing the referrals sent by a particular HCP.
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewSentReferralsAction.java-37:44
/*** Get all sent referrals sorted by the given field and in the given
* direction.
* @param field The name of the pseudo-field to sort by.
* @param dir The direction of the sort.
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewSentReferralsAction.java-49:54
/*** Get a specific referral.
* @param id
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewSentReferralsAction.java-60:65
/*** Get the patient name associated with the given referral.
* @param bean
* @return The patient's name as a String.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewSentReferralsAction.java-70:75
/*** Get the name of the receiving HCP associated with the given referral.
* @param bean
* @return The HCP's name as a String.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewSleepEntryAction.java-20:25
/*** ViewSleepEntryAction.java
* Version 1
* 4/6/2015
* Copyright notice: none
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewSleepEntryAction.java-33:40
/*** Uses the factory to construct SleepEntryDAO and PatientDAO
*
* @param factory
*            DAO factory to use
* @param loggedInMID
*            who is currently logged in
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewSleepEntryAction.java-48:57
/*** Takes in which patient you want to view the sleep diary for, and then
* returns all of the sleep dairy entries for that patient. It first checks
* to ensure that the person requesting the sleep diary is either a patient
* or a HCP.
*
* @param patientMID
*            the id of the patient whose sleep diary we want
* @return a list of the patient's sleep diary entries
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewSleepEntryAction.java-61:65
/** This nightmare if-statement just checks for two things. Either:
* 1) The patient is viewing their own diary.
* 2) A HCP is viewing the diary.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewSleepEntryAction.java-79:87
/*** Gets the total hours slept, sorted by day.
*
* @param patientMID
*            the patient we are looking at
* @return an entry that contains the totals for each day that a user has an
*         entry in his sleep diary
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewSleepEntryAction.java-91:95
/** This nightmare if-statement just checks for two things. Either:
* 1) The patient is viewing their own diary.
* 2) A HCP is viewing the diary.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewSleepEntryAction.java-109:119
/*** Returns a list of sleep diary entries between two dates.
*
* @param lowerDate
*            the first date
* @param upperDate
*            the second date
* @return list of TransactionBeans
* @throws DBException
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewSleepEntryAction.java-124:128
/** This nightmare if-statement just checks for two things. Either:
* 1) The patient is viewing their own diary.
* 2) A HCP is viewing the diary.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewSleepEntryAction.java-132:135
/** Month can have 1 or 2 digits, same with day, and year must
* have 4.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewSleepEntryAction.java-140:143
/** If it fails to match either of them, throw the form
* validation exception
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewSleepEntryAction.java-172:184
/*** Gets the total hours slept between a given date range, sorted by day.
*
* @param lowerDate
*            the first date
* @param upperDate
*            the second date
* @param patientMID
*            the patient we are looking at
* @return an entry that contains the totals for each day in the given range
*         for the patient
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewSleepEntryAction.java-189:193
/** This nightmare if-statement just checks for two things. Either:
* 1) The patient is viewing their own diary.
* 2) A HCP is viewing the diary.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewSleepEntryAction.java-197:200
/** Month can have 1 or 2 digits, same with day, and year must
* have 4.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewSleepEntryAction.java-205:208
/** If it fails to match either of them, throw the form
* validation exception
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewSurveyResultAction.java-11:13
/*** This class is used to handle retrieving survey results from the database.  It also logs the transaction.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewSurveyResultAction.java-19:22
/*** Set up defaults.
* @param factory The DAOFactory used to create the DAOs used in this action.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewSurveyResultAction.java-28:34
/*** Retrieves survey results for a whole hospital.
* @param bean The SurveyResultBean containing the survey result specs.
* @return A java.util.List of Survey Results.
* @throws ITrustException
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewSurveyResultAction.java-42:48
/*** Retrieves survey results for a given zip code.
* @param bean The SurveyResultBean containing the survey result specs.
* @return A java.util.List of Survey Results.
* @throws ITrustException
* @throws FormValidationException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewVisitedHCPsAction.java-17:19
/*** Action class for ViewVisitedHCPs.jsp
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewVisitedHCPsAction.java-26:26
//private ArrayList<HCPVisitBean> visits;

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewVisitedHCPsAction.java-28:32
/*** Set up defaults
* @param factory The DAOFactory used to create the DAOs used in this action.
* @param loggedInMID The MID of the person viewing the visited HCPs.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewVisitedHCPsAction.java-42:49
/*** Create an HCPVisitBean from a given PersonnelBean and office visit date.
*
* @param pb The PersonnelBean that will be visited.
* @param visitDate The date of the visit.  This may be the empty string.
* @return The new HCPVisitBean.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewVisitedHCPsAction.java-63:72
/*** Checks to see if a PersonnelBean matches against a given set of
* criteria.
*
* @param pb The PersonnelBean to check.
* @param lastName The last name to check against.  May be null or the empty string to ignore.
* @param specialty The specialty to check against.  May be null or the empty string to ignore.
* @param zip The zip code to check against.  May be null or the empty string to ignore.
* @return true if the PersonnelBean matches all the given parameters, or false otherwise.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewVisitedHCPsAction.java-86:100
/*** Get a list of all HCPs visited and/or designated by by the current
* user.  The list can optionally be filtered by the doctor's last name,
* specialty, or zip code.
*
* @param lastName The last name (or a part of it) of the doctor to search
* 				   for, or null or an empty string to accept all doctors.
* @param specialty The specialty of the doctor to search for, or null or
* 					an empty string to accept all doctors.
* @param zip The zip code of the doctor to search for, or null or an empty
* 			  string to accept all doctors.
* @return A list of HCPVisitBeans where each represents one HCP that has
* 	       been visited or has been designated.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewVisitedHCPsAction.java-104:104
// Visited HCPs in this case includes both HCPs visited *and* HCPs

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewVisitedHCPsAction.java-105:105
// designated by the patient.  These two groups are retrieved in

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewVisitedHCPsAction.java-106:106
// different ways, then combined.

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewVisitedHCPsAction.java-110:110
// get most recent office visit for each provider

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewVisitedHCPsAction.java-126:126
// Get visited HCPs.

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewVisitedHCPsAction.java-136:136
// Get all designated HCPs.  Because a designated HCP may have been

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewVisitedHCPsAction.java-137:137
// visited, we will ensure the HCP is not already in the list.

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewVisitedHCPsAction.java-143:143
// if HCP is already in visits list, skip here

iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewVisitedHCPsAction.java-161:164
/*** Returns a list of all the visited and/or designated HCPs.
* @return list of all the visited HCPs
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewVisitedHCPsAction.java-178:182
/*** Given an HCP's name, return the corresponding HCPVisitBean.
* @param name name
* @return r
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewVisitedHCPsAction.java-194:200
/*** Set a given HCP as undeclared.
*
* @param name HCP to undeclare.
* @return An empty string.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewVisitedHCPsAction.java-215:221
/*** Set a given HCP as declared
*
* @param name HCP to declare
* @return An empty string.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewVisitedHCPsAction.java-259:263
/*** Check to see if a given HCP is declared
* @param mid HCP to check
* @return true if the HCP is declared, otherwise false
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ViewVisitedHCPsAction.java-268:275
/*** Filter the list of HCPs by last name, specialty, or zip code.
* @param specialty Filter by specialty.  May be null or the empty string
*   			    to ignore.
* @param zip Filter by zip.  May be null or the empty string to ignore.
* @param lastName lastName
* @return Filtered list of HCPs.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ZipCodeAction.java-14:16
/*** Action class which handles zip code related functionality;
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ZipCodeAction.java-19:19
//	private DAOFactory factory;

iTrust_v21\src\edu\ncsu\csc\itrust\action\ZipCodeAction.java-20:20
//	private long loggedInMID;

iTrust_v21\src\edu\ncsu\csc\itrust\action\ZipCodeAction.java-22:22
//	private PersonnelDAO personnelDAO;

iTrust_v21\src\edu\ncsu\csc\itrust\action\ZipCodeAction.java-26:30
/*** Constructor for ZipCodeAction
* @param factory
* @param loggedInMID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ZipCodeAction.java-38:44
/*** Calculates the distance between two ZipCodes
* @param zipCode1
* @param zipCode2
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ZipCodeAction.java-68:75
/*** Returns all of the hospitals within the mileage range specified.
* @param specialty
* @param zipCode
* @param mileRange
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\action\ZipCodeAction.java-100:107
/*** Gets all the experts within a certain range and with a certain specialty.
* @param specialty
* @param zipCode
* @param mileRange
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\BeanBuilder.java-9:12
/*** Takes a parameter map and creates a bean from that map of the appropriate type.
* @param <T> The type to be returned from the appropriate parameter map.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\BeanBuilder.java-14:24
/*** The code here is not obvious, but this method should not need rewriting unless a bug is found
*
* @param map -
*            typically a request.getParameterMap; also can be a HashMap
* @param bean -
*            an instantiated bean to be loaded. Loaded bean is returned.
* @return a loaded "bean"
* @throws Exception -
*             Several exceptions are thrown here, so promotion seemed fitting
*/


iTrust_v21\src\edu\ncsu\csc\itrust\BeanBuilder.java-25:25
// this warning is only suppressed because Map isn't parameterized (old JSP)

iTrust_v21\src\edu\ncsu\csc\itrust\BeanBuilder.java-28:28
// JavaBeans should not have overloaded methods, according to their API

iTrust_v21\src\edu\ncsu\csc\itrust\BeanBuilder.java-29:29
// (a stupid limitation!)

iTrust_v21\src\edu\ncsu\csc\itrust\BeanBuilder.java-30:30
// Nevertheless, we should check for it

iTrust_v21\src\edu\ncsu\csc\itrust\BeanBuilder.java-33:33
// Use an introspector to find all of the getXXX or setXXX, we only want

iTrust_v21\src\edu\ncsu\csc\itrust\BeanBuilder.java-34:34
// the setXXX

iTrust_v21\src\edu\ncsu\csc\itrust\BeanBuilder.java-38:38
// if object is null, either it was ignored or empty - just go with

iTrust_v21\src\edu\ncsu\csc\itrust\BeanBuilder.java-39:39
// bean's default

iTrust_v21\src\edu\ncsu\csc\itrust\BeanBuilder.java-43:43
// descriptor's name is the name of your property; like

iTrust_v21\src\edu\ncsu\csc\itrust\BeanBuilder.java-44:44
// firstName

iTrust_v21\src\edu\ncsu\csc\itrust\BeanBuilder.java-45:45
// only take the first string

iTrust_v21\src\edu\ncsu\csc\itrust\BeanBuilder.java-47:47
// Skip the setters for enumerations

iTrust_v21\src\edu\ncsu\csc\itrust\BeanBuilder.java-51:51
// Throw a more informative exception

iTrust_v21\src\edu\ncsu\csc\itrust\BeanBuilder.java-60:64
/*** Checks for overloaded methods
*
* @param bean item to check
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\AdverseEventBean.java-3:10
/*** A bean for storing data about a adverse event based on a drug.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters.
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\AdverseEventBean.java-37:39
/*** @return the id
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\AdverseEventBean.java-44:46
/*** @param id the id to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\AdverseEventBean.java-51:53
/*** @return the date
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\AdverseEventBean.java-58:60
/*** @param date the date to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\AdverseEventBean.java-73:75
/*** @return the patient MID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\AdverseEventBean.java-80:83
/***
* @param mID the patients MID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\AdverseEventBean.java-88:91
/***
* @return the drug the event is being reported for
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\AdverseEventBean.java-96:99
/***
* @param drug sets the drug the event is being reported for
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\AdverseEventBean.java-103:105
/*** @return the description
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\AdverseEventBean.java-109:111
/*** @param description the description to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\AllergyBean.java-6:14
/*** A bean for storing data about Allergies.
*
* A bean's purpose is to store data. Period. Little or no functionality is to
* be added to a bean (with the exception of minor formatting such as
* concatenating phone numbers together). A bean must only have Getters and
* Setters (Eclipse Hint: Use Source > Generate Getters and Setters.to create
* these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\AllergyBean.java-22:24
/*** Default constructor.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\AllergyBean.java-28:32
/*** Returns the description for the allergy.
*
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\AllergyBean.java-37:41
/*** Sets the description for the allergy.
*
* @param description
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\AllergyBean.java-46:50
/*** Returns the ND code for the allergy.
*
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\AllergyBean.java-55:59
/*** Sets the ND code for the allergy.
*
* @param ndcode
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\AllergyBean.java-64:68
/*** Returns the date the allergy was first found.
*
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\AllergyBean.java-76:80
/*** Sets the date the allergy was first found.
*
* @param firstFound
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\AllergyBean.java-88:92
/*** Returns the allergy ID.
*
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\AllergyBean.java-97:101
/*** Sets the allergy ID.
*
* @param id
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\AllergyBean.java-106:108
/*** Returns the description of the allergy.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\AllergyBean.java-114:118
/*** Returns the patient ID.
*
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\AllergyBean.java-123:127
/*** Sets the patient ID.
*
* @param patientID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\AllergyBean.java-132:136
/*** Returns the date first found as a String.
*
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ApptBean.java-8:10
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ApptBean.java-20:22
/*** @return the price
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ApptBean.java-27:29
/*** @param price the price to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ApptBean.java-34:36
/*** @return the apptType
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ApptBean.java-41:43
/*** @param apptID the apptID to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ApptBean.java-52:54
/*** @param apptType the apptType to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ApptBean.java-58:60
/*** @return the patient
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ApptBean.java-64:66
/*** @param patient the patient to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ApptBean.java-70:72
/*** @return the hcp
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ApptBean.java-76:78
/*** @param hcp the hcp to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ApptBean.java-82:84
/*** @return the date
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ApptBean.java-88:90
/*** @param date the date to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ApptBean.java-94:96
/*** @return the comment
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ApptBean.java-100:102
/*** @param comment the comment to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ApptBean.java-112:114
/*** Returns true if both id's are equal. Probably needs more advance field by field checking.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ApptRequestBean.java-3:5
/*** ApptRequestBean
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ApptRequestBean.java-10:13
/*** getRequestedAppt
* @return requestedAppt
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ApptRequestBean.java-18:21
/*** isPending
* @return status
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ApptRequestBean.java-26:29
/*** isAccepted
* @return status
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ApptRequestBean.java-34:37
/*** setRequestedAppt
* @param appt appt
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ApptRequestBean.java-42:45
/*** setPending
* @param pending pending
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ApptRequestBean.java-54:58
/*** If setPending(false) has not been called before using this method, this method will have no effect.
*
* @param accepted accepted
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-6:8
/*** Stores information about a bill
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-42:44
/*** @return the isInsurance
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-48:50
/*** @param isInsurance the isInsurance to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-55:57
/*** @return the ccHolderName
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-61:63
/*** @param ccHolderName the ccHolderName to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-67:69
/*** @return the billingAddress
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-73:75
/*** @param billingAddress the billingAddress to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-79:81
/*** @return the ccType
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-85:87
/*** @param ccType the ccType to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-91:93
/*** @return the ccNumber
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-97:99
/*** @param ccNumber the ccNumber to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-103:105
/*** @return the cvv
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-109:111
/*** @param cvv the cvv to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-115:117
/*** @return the insHolderName
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-121:123
/*** @param insHolderName the insHolderName to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-127:129
/*** @return the insID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-133:135
/*** @param insID the insID to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-139:141
/*** @return the insProviderName
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-145:147
/*** @param insProviderName the insProviderName to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-151:153
/*** @return the insAddress1
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-157:159
/*** @param insAddress1 the insAddress1 to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-163:165
/*** @return the insAddress2
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-169:171
/*** @param insAddress2 the insAddress2 to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-175:177
/*** @return the insCity
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-181:183
/*** @param insCity the insCity to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-187:189
/*** @return the insState
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-193:195
/*** @param insState the insState to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-199:201
/*** @return the insZip
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-205:207
/*** @param insZip the insZip to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-211:213
/*** @return the insPhone
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-217:219
/*** @param insPhone the insPhone to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-224:226
/*** @return the billID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-230:232
/*** @param billID the billID to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-237:239
/*** @return the apptID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-243:245
/*** @param apptID the apptID to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-249:251
/*** @return the patient
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-255:257
/*** @param patient the patient to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-261:263
/*** @return the hcp
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-267:269
/*** @param hcp the hcp to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-273:275
/*** @return the amt
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-279:281
/*** @param amt the amt to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-285:287
/*** @return the status
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-291:293
/*** @param status the status to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-297:299
/*** @return the submissions
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-303:305
/*** @param submissions the submissions to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-309:311
/*** @return the billTime
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-315:317
/*** @param billTime the billTime to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-324:326
/*** @return the subTime
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-330:332
/*** @return the subDate
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\BillingBean.java-336:338
/*** @param subTime the subTime to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\CDCStatsBean.java-3:10
/*** A bean for storing CDC statistics data.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\CDCStatsBean.java-18:20
/*** Constructs a CDCStatsBean with all null values for the fields
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\CDCStatsBean.java-24:27
/*** Gets the gender associated with the cdc statistic
* @return the gender associated with the cdc statistic. 1 stands for male. 2 stands for female.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\CDCStatsBean.java-32:35
/*** Sets the gender for the cdc statistic
* @param sex integer for the gender of the cdc statistic. 1 for male. 2 for female.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\CDCStatsBean.java-40:43
/*** Gets the age in months
* @return the age of the cdc statistic in months
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\CDCStatsBean.java-48:51
/*** Sets the age in months for the cdc statistic
* @param age the age in months as a float
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\CDCStatsBean.java-56:59
/*** Gets the Box-Cox transformation or L value
* @return the Box-Cox transformation or L value
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\CDCStatsBean.java-64:67
/*** Sets the Box-Cox transformation or L value
* @return L double for the Box-Cox transformation or L value
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\CDCStatsBean.java-72:75
/*** Gets the median or the M value
* @return the median
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\CDCStatsBean.java-80:83
/*** Sets the median or the M value
* @param M double value for the median
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\CDCStatsBean.java-88:91
/*** Gets the generalized coefficient of variation or S value
* @return the generalized coefficient of variation or S value
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\CDCStatsBean.java-96:99
/*** Sets the generalized coefficient of variation or S Value
* @param S double for the generalized coefficient of variation
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisBean.java-3:10
/*** A bean for storing data about Diagnosis.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters.
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisBean.java-20:22
/*** diagnosisBean
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisBean.java-26:31
/***
* @param code code
* @param description description
* @param classification classification
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisBean.java-44:50
/*** diagnosesBean
* @param code code
* @param description description
* @param classification classification
* @param URL URL
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisBean.java-65:71
/*** diagnosesBean
* @param code code
* @param description description
* @param classification classification
* @param URL URL
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisBean.java-92:96
/*** Gets the ICD Code for this procedure
*
* @return The ICD Code for this procedure
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisBean.java-101:104
/*** setICDCode
* @param code code
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisBean.java-109:112
/*** getClassification
* @return classification
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisBean.java-117:120
/*** getClassification
* @return classification
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisBean.java-125:129
/*** Gets the ICD Description for this procedure
*
* @return The ICD Description for this procedure
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisBean.java-134:137
/*** setDescription
* @param description
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisBean.java-142:145
/*** getFormattedDescription
* @return description
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisBean.java-150:154
/*** Optional - for use with editing an office visit
*
* @return ovDiagnosisID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisBean.java-159:162
/*** setOvDiagnosisID
* @param ovDiagnosisID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisBean.java-167:170
/*** setVisitID
* @param vid
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisBean.java-175:178
/*** getVisitID
* @return visitID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisBean.java-183:186
/*** setURL
* @param newURL
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisBean.java-191:194
/*** getURL
* @return URL
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisStatisticsBean.java-5:14
/*** A bean for storing data about diagnosis counts
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters
* to create these easily)
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisStatisticsBean.java-17:17
/** The local zip code analyzed */

iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisStatisticsBean.java-19:19
/** The diagnosis count for the zip code */

iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisStatisticsBean.java-21:21
/** The diagnosis count for the region */

iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisStatisticsBean.java-23:23
/** The beginning of the time period covered */

iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisStatisticsBean.java-25:25
/** The end of the time period covered */

iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisStatisticsBean.java-28:30
/*** Constructor for an empty bean
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisStatisticsBean.java-34:39
/*** Constructor for the bean. Accepts stats and zip code
* @param zipCode The zip code analyzed
* @param zipStats The count of diagnoses for the zip code
* @param regionStats The count of diagnoses for the region
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisStatisticsBean.java-47:54
/*** Constructor for the bean. Accepts stats and zip code
* @param zipCode The zip code analyzed
* @param zipStats The count of diagnoses for the zip code
* @param regionStats The count of diagnoses for the region
* @param startDate The beginning of the data's time period
* @param endDate The end of the data's time period
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisStatisticsBean.java-63:66
/*** Getter for Zip code
* @return The stored Zip code
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisStatisticsBean.java-71:74
/*** Setter for Zip code
* @param zipCode The zip code to be stored
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisStatisticsBean.java-79:82
/*** Getter for Zip code count
* @return The count of diagnoses for the zip code
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisStatisticsBean.java-87:90
/*** Setter for Zip code count
* @param zipStats The count of diagnoses to be stored
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisStatisticsBean.java-95:98
/*** Getter for Region count
* @return The count of diagnoses for the region
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisStatisticsBean.java-103:106
/*** Setter for Region count
* @param regionStats The count of regional diagnoses to be stored
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisStatisticsBean.java-111:114
/*** Getter for Start Date
* @return The start date for the data
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisStatisticsBean.java-119:122
/*** Setter for Start Date
* @param startDate The data's start date
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisStatisticsBean.java-127:130
/*** Getter for End Date
* @return The end date for the data
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DiagnosisStatisticsBean.java-135:138
/*** Setter for the End Date
* @param endDate
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DistanceComparator.java-18:18
// TODO Auto-generated catch block

iTrust_v21\src\edu\ncsu\csc\itrust\beans\DrugInteractionBean.java-3:10
/*** A bean for storing data about a message from one user to another.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters.
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DrugInteractionBean.java-15:17
/*** @return the firstDrug
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DrugInteractionBean.java-21:23
/*** @param firstDrug the firstDrug to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DrugInteractionBean.java-27:29
/*** @return the secondDrug
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DrugInteractionBean.java-33:35
/*** @param secondDrug the secondDrug to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DrugInteractionBean.java-39:41
/*** @return the description
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\DrugInteractionBean.java-45:47
/*** @param description the description to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\Email.java-7:14
/*** A bean for storing data about Fake Emails.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\EntryBean.java-3:5
/*** An abstract parent for Wellness Diary beans.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-11:14
/*** ExerciseEntryBean.java Version 1 4/2/2015 Copyright notice: none Contains all
* of the information for an entry into the Exercise Diary.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-17:19
/*** Unique Primary key so entries can be edited and deleted
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-22:24
/*** The Date this exercise was performed
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-28:30
/*** Was the exercise cardio or weights?
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-33:35
/*** The name of the exercise.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-38:40
/*** How many hours were spent exercising?
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-43:45
/*** How many calories were burned?
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-48:50
/*** If we're weight training, how many sets were performed?
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-53:55
/*** If we're weight training, how many reps were in each set?
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-58:60
/*** The MID of the user this exercise entry belongs to
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-63:65
/*** EntryID of the label belonging to this entry
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-68:72
/*** Returns the id of this entry so it can be edited/deleted.
*
* @return unique id of the exercise entry
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-77:82
/*** Sets the id of this entry
*
* @param id
*            the unique id of a exercise entry
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-87:92
/*** Returns a string representation of when the exercise was performed
*
* @return string representation of the date on which the exercise was
*         performed
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-97:101
/*** Parses the strDate to produce a date in the format MM/dd/yyyy
*
* @return the date on which the exercise was performed
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-111:116
/*** Sets the date as a string
*
* @param strDate
*            when the exercise was performed
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-121:125
/*** Which type of exercise was performed?
*
* @return the type of exercise
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-130:135
/*** Sets the exercise type
*
* @param exerciseType
*            what type of exercise was it
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-140:142
/*** @return the strName
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-147:150
/*** @param strName
*            the strName to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-155:157
/*** @return the hoursWorked
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-162:165
/*** @param hoursWorked
*            the hoursWorked to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-170:172
/*** @return the caloriesBurned
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-177:180
/*** @param caloriesBurned
*            the caloriesBurned to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-185:187
/*** @return the numSets
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-192:195
/*** @param numSets
*            the numSets to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-200:202
/*** @return the numReps
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-207:210
/*** @param numReps
*            the numReps to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-215:219
/*** The patient that performed this exercise
*
* @return patient ID that performed this exercise
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-224:229
/*** Patient that performed this exercise
*
* @param patientID
*            patient id of who performed this exercise
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-234:237
/*** Label of this meal
* @return label of this meal
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ExerciseEntryBean.java-242:245
/*** Label of this meal
* @param label of this meal
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FamilyMemberBean.java-3:10
/*** A bean for storing data about Family Members.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters.
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FlagsBean.java-5:7
/*** FlagsBean represents a flag.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FlagsBean.java-15:15
/** the max */

iTrust_v21\src\edu\ncsu\csc\itrust\beans\FlagsBean.java-17:17
/** the min */

iTrust_v21\src\edu\ncsu\csc\itrust\beans\FlagsBean.java-19:19
/** the max */

iTrust_v21\src\edu\ncsu\csc\itrust\beans\FlagsBean.java-21:21
/** the min */

iTrust_v21\src\edu\ncsu\csc\itrust\beans\FlagsBean.java-23:23
/** the weight bounds*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\FlagsBean.java-25:25
/** minimum */

iTrust_v21\src\edu\ncsu\csc\itrust\beans\FlagsBean.java-27:27
/** maximum */

iTrust_v21\src\edu\ncsu\csc\itrust\beans\FlagsBean.java-29:29
/** twins minimum */

iTrust_v21\src\edu\ncsu\csc\itrust\beans\FlagsBean.java-31:31
/** twins maximum */

iTrust_v21\src\edu\ncsu\csc\itrust\beans\FlagsBean.java-34:37
/*** Returns the FID
* @return the fid
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FlagsBean.java-42:45
/*** Sets the FID
* @param fid
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FlagsBean.java-50:53
/*** Returns the MID
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FlagsBean.java-58:61
/*** Sets the MID
* @param mid
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FlagsBean.java-66:69
/*** Returns the flag enum value
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FlagsBean.java-74:77
/*** Sets the flag enum value
* @param flagValue
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FlagsBean.java-82:85
/*** Returns true if the flag is set
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FlagsBean.java-90:93
/*** Sets the flag boolean value
* @param flagged
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FlagsBean.java-98:101
/*** Returns the pregnancy ID
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FlagsBean.java-106:109
/*** Sets the pregnancy ID
* @param pregId
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-9:15
/*** FoodEntryBean.java
* Version 1
* 2/21/2015
* Copyright notice: none
* Contains all of the information for an entry into the Food Diary.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-18:20
/*** Unique Primary key so entries can be edited and deleted
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-23:25
/*** The Date this food was eaten
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-29:31
/*** Which meal this was (Lunch, Dinner, Snack, Breakfast)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-34:36
/*** The name of the food.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-39:41
/*** How many servings
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-44:46
/*** How many calories per serving
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-49:51
/*** How many grams of fat
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-54:56
/*** How many milligrams of sodium
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-59:61
/*** How many grams of carbs
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-64:66
/*** How many grams of sugar
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-69:71
/*** How many grams of fiber
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-74:76
/*** How many grams of protein
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-79:81
/*** The MID of the user this Food Entry belongs to
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-84:86
/*** EntryID of the label belonging to this entry
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-89:92
/*** Returns the id of this entry so it can be edited/deleted.
* @return unique id of the food entry
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-97:100
/*** Sets the id of this entry
* @param id the unique id of a food entry
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-105:108
/*** Returns a string representation of when the food was eaten
* @return string representation of the date the food was eaten on
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-113:117
/*** Parses the dateEatenStr to produce a date in the format
* MM/dd/yyyy
* @return the date the food was eaten on
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-127:130
/*** Sets the dateEaten as a string
* @param dateEaten when the food was eaten
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-135:138
/*** Which type of meal (Breakfast, Lunch, Snack, Dinner) was eaten
* @return the type of meal
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-143:146
/*** Sets the meal type
* @param mealType what type of meal was it
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-151:154
/*** What was the name of the food
* @return the name of the food
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-159:162
/*** Set the name of the food
* @param food the name of the food that was eaten
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-167:170
/*** How many servings were eaten
* @return number of servings eaten
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-175:178
/*** Set the number of servings
* @param servings number of servings eaten
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-183:186
/*** How many calories per serving were eaten
* @return calories per serving
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-191:194
/*** How many calories were eaten
* @param calories calories per serving
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-199:202
/*** The number of grams of fat per serving
* @return grams of fat per serving
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-207:210
/*** How many grams of fat per serving
* @param fatGrams grams of fat per serving
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-215:218
/*** The  number of milligrams of sodium per serving
* @return number of milligrams of sodium per serving
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-223:226
/*** Number of milligrams of sodium per serving
* @param milligramsSodium number milligrams of sodium per serving
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-231:234
/*** Number of grams of carbs per serving
* @return grams of carbs per serving
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-239:242
/*** Number of grams of carbs per serving
* @param carbGrams grams of carbs per serving
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-247:250
/*** Number of grams of sugar per serving
* @return grams of sugar per serving
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-255:258
/*** Number of grams of sugar per serving
* @param sugarGrams grams of sugar per serving
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-263:266
/*** Number of grams of fiber per serving
* @return grams of fiber per serving
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-271:274
/*** Number of grams of fiber per serving
* @param fiberGrams grams of fiber per serving
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-279:282
/*** The number of grams of protein per serving
* @return grams of protein per serving
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-287:290
/*** Number of grams of protein per serving
* @param proteinGrams grams of protein per serving
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-295:298
/*** The patient that ate this meal
* @return patient ID that ate this meal
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-303:306
/*** Patient that ate this meal
* @param patientID patient id of who ate this meal
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-311:314
/*** Label of this meal
* @return label of this meal
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\FoodEntryBean.java-319:322
/*** Label of this meal
* @param label of this meal
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\forms\EditOfficeVisitForm.java-3:9
/*** A form to contain data coming from editing an office visit.
*
* A form is a bean, kinda. You could say that it's a form of a bean :)
* Think of a form as a real-life administrative form that you would fill out to get
* something done, not necessarily making sense by itself.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\forms\EditOfficeVisitForm.java-21:23
/*** @return the apptType
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\forms\EditOfficeVisitForm.java-28:30
/*** @param apptType the apptType to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\forms\EditOfficeVisitForm.java-35:39
/*** we need to use a string because there is a bean builder class that
* only uses strings as parameters.
* @param isBilled the isBilled to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\forms\EditPrescriptionsForm.java-3:9
/*** A form to contain data coming from editing a prescription for an office visit.
*
* A form is a bean, kinda. You could say that it's a "form" of a bean :)
* Think of a form as a real-life administrative form that you would fill out to get
* something done, not necessarily making sense by itself.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\forms\EditPrescriptionsForm.java-19:21
/*** @return the overrideCode
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\forms\EditPrescriptionsForm.java-29:31
/*** @param overrideCode the overrideCode to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\forms\EditPrescriptionsForm.java-39:41
/*** @return the overrideComment
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\forms\EditPrescriptionsForm.java-45:47
/*** @param overrideComment the overrideComment to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\forms\EditPrescriptionsForm.java-51:53
/*** @return the medID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\forms\EditPrescriptionsForm.java-57:59
/*** @param medID the medID to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\forms\EditPrescriptionsForm.java-63:65
/*** @return the startDate
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\forms\EditPrescriptionsForm.java-69:71
/*** @param startDate the startDate to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\forms\EditPrescriptionsForm.java-75:77
/*** @return the endDate
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\forms\EditPrescriptionsForm.java-81:83
/*** @param endDate the endDate to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\forms\EditPrescriptionsForm.java-87:89
/*** @return the dosage
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\forms\EditPrescriptionsForm.java-93:95
/*** @param dosage the dosage to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\forms\EditPrescriptionsForm.java-99:101
/*** @return the instructions
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\forms\EditPrescriptionsForm.java-105:107
/*** @param instructions the instructions to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\forms\HealthRecordForm.java-3:9
/*** A form to contain data coming from editing a health record.
*
* A form is a bean, kinda. You could say that it's a form of a bean :)
* Think of a form as a real-life administrative form that you would fill out to get
* something done, not necessarily making sense by itself.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\forms\VisitReminderReturnForm.java-8:14
/*** A form to contain data coming from reminding a user about an upcoming office visit.
*
* A form is a bean, kinda. You could say that it's a form of a bean :)
* Think of a form as a real-life administrative form that you would fill out to get
* something done, not necessarily making sense by itself.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\forms\VisitReminderReturnForm.java-74:74
//Keep similar flags next to each other

iTrust_v21\src\edu\ncsu\csc\itrust\beans\GroupReportBean.java-7:10
/***
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\GroupReportBean.java-15:19
/***
* @param patients
* @param filters
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\GroupReportBean.java-25:28
/***
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\GroupReportBean.java-33:36
/***
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\GroupReportBean.java-41:44
/***
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\GroupReportBean.java-53:56
/***
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\HCPDiagnosisBean.java-5:12
/*** A bean for storing data about the diagnosis given by an HCP.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters.
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\HCPLinkBean.java-3:10
/*** A mini-bean to pass data between viewPrescriptionRecords.jsp and reportAdverseEvent.jsp
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters.
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\HCPLinkBean.java-33:35
/*** @return the patient MID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\HCPLinkBean.java-40:43
/***
* @param mID the patients MID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\HCPLinkBean.java-48:51
/***
* @return the drug the event is being reported for
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\HCPLinkBean.java-56:59
/***
* @param drug sets the drug the event is being reported for
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\HCPVisitBean.java-3:10
/*** A bean for storing data about a visit with an HCP.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters.
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\HCPVisitBean.java-88:90
/* (non-Javadoc)* @see java.lang.Object#hashCode()
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\HCPVisitBean.java-104:106
/* (non-Javadoc)* @see java.lang.Object#equals(java.lang.Object)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\HealthRecord.java-9:16
/*** A bean for storing health record data.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\HealthRecord.java-135:139
/*** Note that this is a simplistic view. See the Wikipedia article on cholesterol.
*
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\HealthRecord.java-152:152
// Rounds the height off here because MySQL won't return the *exact* value you put in it

iTrust_v21\src\edu\ncsu\csc\itrust\beans\HealthRecord.java-244:247
/*** Returns the BMI of the health record.
* @return BMI
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\HealthRecord.java-253:258
/*** Computes the BMI for a height/weight pair
* @param height The patient height
* @param weight The patient weight
* @return The patient's BMI or -1 on error
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\HealthRecord.java-269:271
/*** Calculates the BMI based on current values for height and weight.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\HospitalBean.java-3:10
/*** A bean for storing data about a hospital.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters.
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabelBean.java-4:6
/*** Unique Primary key so entries can be edited and deleted
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabelBean.java-9:11
/*** The MID of the user this Food Entry belongs to
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabelBean.java-17:20
/*** Returns the id of this entry so it can be edited/deleted.
* @return unique id of the food entry
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabelBean.java-25:28
/*** Sets the id of this entry
* @param id the unique id of a food entry
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabelBean.java-33:36
/*** The patient that ate this meal
* @return patient ID that ate this meal
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabelBean.java-41:44
/*** Patient that ate this meal
* @param patientID patient id of who ate this meal
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-7:14
/*** A bean for storing data about a lab procedure.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-28:30
/*** Unique 10-digit number that does not start with 9
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-33:35
/*** Unique identifier for a laboratory procedure of a patient
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-38:40
/*** Digits of the format nnnnn-n
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-43:45
/*** One of (NOT YET RECEIVED, PENDING, COMPLETED)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-48:50
/*** Up to 500 alphanumeric characters
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-53:55
/*** Up to 500 alphanumeric characters
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-58:61
/*** Office VisitID	Identifier that specifies the office visit in
* which the laboratory procedure was ordered
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-64:66
/*** Date/Time of last status update 	Timestamp
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-69:72
/*** permission granted by lhcp who ordered test:
* "ALLOWED", "RESTRICTED"
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-75:77
/*** The assigned Lab Tech ID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-80:82
/*** This is the priority of the Lab Procedure (from 1-3)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-85:87
/*** Whether or not a patient has viewed the lab procedure
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-90:96
/*** The result as a numerical value.  Stored as a string to ensure accuracy.
* The number may have an optional sign and units, then one of the following formats:
* 		DIGIT+ (unit)				(one or more digits)
*      DIGIT+ . DIGIT* (unit)		(one or more digits, a decimal point, and zero or more digits)
*      . DIGIT+ (unit)			(a decimal point and one or more digits)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-99:102
/*** The units for the results
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-105:107
/*** The upper bound of the confidence interval.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-110:112
/*** The lower bound of the confidence interval.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-119:121
/*** Unique 10-digit number that does not start with 9
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-127:129
/*** Unique 10-digit number that does not start with 9
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-135:137
/*** Unique identifier for a laboratory procedure of a patient
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-143:145
/*** Unique identifier for a laboratory procedure of a patient
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-151:153
/*** Digits of the format nnnnn-n
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-159:161
/*** Digits of the format nnnnn-n
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-167:169
/*** One of (NOT YET RECEIVED, PENDING, COMPLETED)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-175:177
/*** One of (NOT YET RECEIVED, PENDING, COMPLETED)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-183:185
/*** Up to 500 alphanumeric characters
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-191:193
/*** Up to 500 alphanumeric characters
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-199:201
/*** Up to 500 alphanumeric characters
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-207:209
/*** Up to 500 alphanumeric characters
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-215:217
/*** @return the numericalResult
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-222:226
/*** Get the numerical result as a double.  If the result is blank or null,
* NaN is returned.
* @return The numerical result as a double.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-235:237
/*** @param numericalResult the numericalResult to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-250:252
/*** @return the upperBound
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-257:261
/*** Get the upper bound as a double.  If the result is blank or null,
* NaN is returned.
* @return The upper bound as a double.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-270:272
/*** @param upperBound the upperBound to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-277:279
/*** @return the lowerBound
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-284:288
/*** Get the lower bound as a double.  If the result is blank or null,
* NaN is returned.
* @return The lower bound as a double.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-297:299
/*** @param lowerBound the lowerBound to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-304:307
/*** Office VisitID	Identifier that specifies the office visit in
* which the laboratory procedure was ordered
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-313:316
/*** Office VisitID	Identifier that specifies the office visit in
* which the laboratory procedure was ordered
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-331:334
/*** permission granted by lhcp who ordered test:
* "ALLOWED", "RESTRICTED"
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-339:342
/*** permission granted by lhcp who ordered test:
* "ALLOWED", "RESTRICTED"
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-364:366
/*** sets the status to "In transit"
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-371:373
/*** sets the status to "Received"
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-378:380
/*** sets the status to "Testing"
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-385:388
/*** This method sets the lab technicians ID
* @param lTID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-394:397
/*** Gets the lab techs ID
* @return The id of the assigned lab tech
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-403:406
/*** Sets the priority of the lab procedure
* @param priorityCode
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-412:415
/*** Gets the priority of the lab procedure
* @return the priority code
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-420:423
/*** Returns whether or not the patient has viewed the lab procedure
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LabProcedureBean.java-428:431
/*** Sets whether or not a patient has viewed the lab procedure. Cannot be true until status is Completed
* @param viewedByPatient
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\AdverseEventBeanLoader.java-10:15
/*** A loader for AdverseEventBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\AllergyBeanLoader.java-10:15
/*** A loader for AllergyBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\ApptRequestBeanLoader.java-11:14
/***
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\ApptRequestBeanLoader.java-19:21
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\ApptRequestBeanLoader.java-30:32
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\ApptRequestBeanLoader.java-42:44
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\BeanLoader.java-8:15
/*** This interface helps enforce the paradigm of what should be contained in a loader.
*
* The generic type <T> specifies the type of bean that the loader is responsible for extacting from
* a result set.
*
* @param <T> A type for the bean that will be loaded with this class.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\BeanLoader.java-17:23
/*** Loads a list of the bean of type T from a result set.  Typically makes iterated calls
* to loadSingle.
* @param rs The java.sql.ResultSet we are extracting.
* @return A java.util.List<T> where T is the type for this loader.
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\BeanLoader.java-26:32
/*** Contains the instructions for mapping the rows in this java.sql.ResultSet into
* beans of type <T>.
* @param rs The java.sql.ResultSet to be loaded.
* @return A Bean of type T containing the loaded information, typically of the first (or next) item in the result set.
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\BeanLoader.java-35:42
/*** Used for an insert or update, this method contains the instructions for mapping the fields within
* a bean of type T into a prepared statement which modifies the appropriate table.
* @param ps The prepared statement to be loaded.
* @param bean The bean containing the data to be placed.
* @return A prepared statement with the appropriately loaded parameters.
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\BillingBeanLoader.java-14:19
/*** loadList simply takes a ResultSet from a query to the Billing table, and
* then it creates a list of BillingBeans from it.
* @param rs The ResultSet that is being converted into a list.
* @return The list that contains all the BillingBeans in the ResultSet.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\BillingBeanLoader.java-30:36
/*** loadSingle does the heavy lifting for the loadList method. I am not really sure
* why this method is public.
* Preconditions: The ResultSet must already be on an actual entry in the set.
* @param rs The result set that the BillingBean is being loaded from.
* @return The BillingBean that represents the entry that is currently in the set.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\BillingBeanLoader.java-41:41
//Just go through all the billing bean stuff and initialize the

iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\BillingBeanLoader.java-42:42
//bean that was just created.

iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\BillingBeanLoader.java-71:78
/*** loadParameters is used to insert the values of a bean into a pepared statement.
* This version of loadParameters assumes that the values in the prepared statement are in
* the same order as in the createTables.sql file for billing.
* @param ps The prepared statement that the bean will be loaded into.
* @param bean The BillingBean that will be loaded into the prepared statement.
* @return The PreparedStatement that was passed in.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\BillingBeanLoader.java-82:82
//Just run through everything in the bean, and set it to the

iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\BillingBeanLoader.java-83:83
//pepared statement

iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\DiagnosisBeanLoader.java-10:15
/*** A loader for DiagnosisBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\DrugInteractionBeanLoader.java-10:15
/*** A loader for MedicationBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\DrugReactionOverrideBeanLoader.java-10:15
/*** A loader for OverrideReasonBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\EmailBeanLoader.java-11:16
/*** A loader for Fake Emails.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\ExerciseEntryLoader.java-12:20
/*** ExerciseEntryLoader.java
* Version 1
* 2/21/2015
* Copyright notice: none
* A loader for entries into the Exercise Diary (ExerciseEntry's).
*
* Loads information to/from beans using PreparedStatements and ResultSets.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\ExerciseEntryLoader.java-23:27
/*** Returns the list of Exercise entries for a patient
* @param rs the result set to load into beans
* @return the list of exercise entries for a patient
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\ExerciseEntryLoader.java-36:40
/*** Loads a single exercise entry from a result set
* @param rs the result of a query
* @return a exercise entry bean that has the values from the db
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\ExerciseEntryLoader.java-60:65
/*** Loads the values of the exercise entry into the prepared statement
* @param ps the sql statement to load into
* @param bean the exercise entry we want to store in the db
* @return a prepared statement for loading a exercise entry into the db
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\FamilyBeanLoader.java-10:15
/*** A loader for FamilyMemberBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\FlagsLoader.java-12:17
/*** A loader for ObstetricsRecordBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\FlagsLoader.java-19:23
/*** loadList
* @param rs rs
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\FlagsLoader.java-32:37
/*** Loads the FID, MID, and flag value from the result set into the bean.
* @param rs
* @param p
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\FlagsLoader.java-45:50
/*** loadSingle
* @param rs rs
* @return p
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\FlagsLoader.java-57:63
/*** loadParameters
* Sets MID, FID (which is auto-incremented later by the table), and FlagValue.
* Since the only time this will be called is for putting things into the table,
* it is reasonable to assume that we want the flagged value to be true.
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\FoodEntryLoader.java-12:20
/*** FoodEntryLoader.java
* Version 1
* 2/21/2015
* Copyright notice: none
* A loader for entries into the Food Diary (FoodEntry's).
*
* Loads information to/from beans using PreparedStatements and ResultSets.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\FoodEntryLoader.java-23:27
/*** Returns the list of Food entries for a patient
* @param rs the result set to load into beans
* @return the list of food entries for a patient
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\FoodEntryLoader.java-36:40
/*** Loads a single food entry from a result set
* @param rs the result of a query
* @return a food entry bean that has the values from the db
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\FoodEntryLoader.java-63:68
/*** Loads the values of the food entry into the prepared statement
* @param ps the sql statement to load into
* @param bean the food entry we want to store in the db
* @return a prepared statement for loading a food entry into the db
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\HealthRecordsBeanLoader.java-12:17
/*** A loader for HealthRecords.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\HospitalBeanLoader.java-10:15
/*** A loader for HospitalBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\LabelLoader.java-13:17
/*** Returns the list of labels for a patient
* @param rs the result set to load into beans
* @return the list of labels for a patient
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\LabelLoader.java-26:30
/*** Loads a single food entry from a result set
* @param rs the result of a query
* @return a food entry bean that has the values from the db
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\LabelLoader.java-41:46
/*** Loads the values of the food entry into the prepared statement
* @param ps the sql statement to load into
* @param bean the food entry we want to store in the db
* @return a prepared statement for loading a food entry into the db
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\LabProcedureBeanLoader.java-10:15
/*** A loader for LabProcedureBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\LOINCBeanLoader.java-10:15
/*** A loader for LOINCBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\MacronutrientsLoader.java-11:19
/*** MacronutrientsLoader.java
* Version 1
* 03/31/2015
* Copyright notice: none
* A loader for entries into Macronutrients (personalhealthinformation, patients).
*
* Loads information to/from beans using PreparedStatements and ResultSets.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\MacronutrientsLoader.java-22:26
/*** Returns the list of Food entries for a patient
* @param rs the result set to load into beans
* @return the list of food entries for a patient
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\MacronutrientsLoader.java-35:39
/*** Loads a single food entry from a result set
* @param rs the result of a query
* @return a food entry bean that has the values from the db
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\MacronutrientsLoader.java-43:43
// Some sort of database issue getting the results of the query

iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\MedicationBeanLoader.java-10:15
/*** A loader for MedicationBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\MessageBeanLoader.java-10:15
/*** A loader for MessageBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\ObstetricsRecordLoader.java-15:20
/*** A loader for ObstetricsRecordBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\ObstetricsRecordLoader.java-22:26
/*** loadList
* @param rs rs
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\ObstetricsRecordLoader.java-42:42
//totally fine. It just means it wasn't set in the record we grabbed, so don't worry.

iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\ObstetricsRecordLoader.java-47:47
//totally fine. It just means it wasn't set in the record we grabbed, so don't worry.

iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\ObstetricsRecordLoader.java-50:50
//this one, however, unlike the others above, should throw an NPE if it gets through because EVERY record has this one set

iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\ObstetricsRecordLoader.java-63:68
/*** loadSingle
* @param rs rs
* @return p
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\ObstetricsRecordLoader.java-75:78
/*** loadParameters
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\OfficeVisitLoader.java-12:17
/*** A loader for OfficeVisitBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\OperationalProfileLoader.java-10:15
/*** A loader for the operational profile.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\OphthalmologyDiagnosisBeanLoader.java-10:15
/*** A loader for OphthalmologyDiagnosisBean.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\OphthalmologyOVRecordLoader.java-14:19
/*** A loader for OphthalmologyOVRecordBean.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\OphthalmologyOVRecordLoader.java-22:27
/*** Returns a list of beans with data from a ResultSet.
* @param rs ResultSet containing data from the database
* @return A list of OphthalmologyOVRecordBean created from the ResultSet parameter.
* @throws SQLException thrown when there is a error resulting from accessing a field of the ResultSet.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\OphthalmologyOVRecordLoader.java-36:41
/*** Internal method used to load results into beans from ResultSets.
* @param rs ResultSet that data is coming out of.
* @param p bean that data is going into.
* @throws SQLException thrown when there is a error resulting from accessing a field of the ResultSet.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\OphthalmologyOVRecordLoader.java-110:115
/*** Takes the first result out of a ResultSet and returns a bean with that data in it.
* @param rs ResultSet containing data from the database.
* @return p bean containing the data.
* @throws SQLException thrown when there is a error resulting from accessing a field of the ResultSet.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\OphthalmologyOVRecordLoader.java-122:128
/*** Loads values into the parameters of a preparedStatement from the given OphthalmologyOVRecordBean.
* @param ps The PreparedStatement that will have it's parameters filled in.
* @param p The OphthalmologyOVRecordBean used to fill in the parameters of the preparedStatement.
* @return The preparedStatement with the parameters filled in.
* @throws SQLException thrown when there is a error resulting from accessing a field of the ResultSet.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\OphthalmologyScheduleOVRecordLoader.java-11:16
/*** A loader for OphthalmologyScheduleOVRecordBean.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\OphthalmologyScheduleOVRecordLoader.java-19:24
/*** Returns a list of beans with data from a ResultSet.
* @param rs ResultSet containing data from the database
* @return A list of OphthalmologyScheduleOVRecordBean created from the ResultSet parameter.
* @throws SQLException thrown when there is a error resulting from accessing a field of the ResultSet.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\OphthalmologyScheduleOVRecordLoader.java-33:38
/*** Internal method used to load results into beans from ResultSets.
* @param rs ResultSet that data is coming out of.
* @param p bean that data is going into.
* @throws SQLException thrown when there is a error resulting from accessing a field of the ResultSet.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\OphthalmologyScheduleOVRecordLoader.java-51:56
/*** Takes the first result out of a ResultSet and returns a bean with that data in it.
* @param rs ResultSet containing data from the database.
* @return p bean containing the data.
* @throws SQLException thrown when there is a error resulting from accessing a field of the ResultSet.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\OphthalmologyScheduleOVRecordLoader.java-63:69
/*** Loads values into the parameters of a preparedStatement from the given OphthalmologyOVRecordBean.
* @param ps The PreparedStatement that will have it's parameters filled in.
* @param p The OphthalmologyOVRecordBean used to fill in the parameters of the preparedStatement.
* @return The preparedStatement with the parameters filled in.
* @throws SQLException thrown when there is a error resulting from accessing a field of the ResultSet.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\OphthalmologySurgeryRecordLoader.java-14:19
/*** A loader for OphthalmologySurgeryRecordBean.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\OphthalmologySurgeryRecordLoader.java-22:27
/*** Returns a list of beans with data from a ResultSet.
* @param rs ResultSet containing data from the database
* @return A list of OphthalmologySurgeryRecordBean created from the ResultSet parameter.
* @throws SQLException thrown when there is a error resulting from accessing a field of the ResultSet.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\OphthalmologySurgeryRecordLoader.java-36:41
/*** Internal method used to load results into beans from ResultSets.
* @param rs ResultSet that data is coming out of.
* @param p bean that data is going into.
* @throws SQLException thrown when there is a error resulting from accessing a field of the ResultSet.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\OphthalmologySurgeryRecordLoader.java-120:125
/*** Takes the first result out of a ResultSet and returns a bean with that data in it.
* @param rs ResultSet containing data from the database.
* @return p bean containing the data.
* @throws SQLException thrown when there is a error resulting from accessing a field of the ResultSet.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\OphthalmologySurgeryRecordLoader.java-132:138
/*** Loads values into the parameters of a preparedStatement from the given OphthalmologySurgeryRecordBean.
* @param ps The PreparedStatement that will have it's parameters filled in.
* @param p The OphthalmologySurgeryRecordBean used to fill in the parameters of the preparedStatement.
* @return The preparedStatement with the parameters filled in.
* @throws SQLException thrown when there is a error resulting from accessing a field of the ResultSet.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\OverrideReasonBeanLoader.java-10:15
/*** A loader for MedicationBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\PatientInstructionsBeanLoader.java-1:3
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\PatientInstructionsBeanLoader.java-13:18
/*** A loader for PatientInstructionsBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\PatientInstructionsBeanLoader.java-20:22
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\PatientInstructionsBeanLoader.java-25:27
/* (non-Javadoc)* @see edu.ncsu.csc.itrust.beans.loaders.BeanLoader#loadList(java.sql.ResultSet)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\PatientInstructionsBeanLoader.java-36:38
/* (non-Javadoc)* @see edu.ncsu.csc.itrust.beans.loaders.BeanLoader#loadSingle(java.sql.ResultSet)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\PatientInstructionsBeanLoader.java-51:53
/* (non-Javadoc)* @see edu.ncsu.csc.itrust.beans.loaders.BeanLoader#loadParameters(java.sql.PreparedStatement, java.lang.Object)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\PatientLoader.java-14:19
/*** A loader for PatientBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\PatientLoader.java-23:27
/*** loadList
* @param rs rs
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\PatientLoader.java-85:90
/*** loadSingle
* @param rs rs
* @return p
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\PatientLoader.java-97:102
/*** loadSingleHistory
* @param rs rs
* @return p
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\PatientLoader.java-114:117
/*** loadParameters
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\PatientLoader.java-144:144
//TODO

iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\PersonnelLoader.java-10:15
/*** A loader for PersonnelBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\PrescriptionBeanLoader.java-11:16
/*** A loader for PrescriptionBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\PrescriptionReportBeanLoader.java-10:15
/*** A loader for PrescriptionReportBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\ProcedureBeanLoader.java-10:15
/*** A loader for ProcedureBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\ReferralBeanLoader.java-11:16
/*** A loader for ReferralBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\ReferralBeanLoader.java-34:34
// ERIC: fixed to correct for the mysql database bug plaguing java 1.5

iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\RemoteMonitoringDataBeanLoader.java-10:15
/*** A loader for RemoteMonitoringDataBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\RemoteMonitoringListsBeanLoader.java-10:15
/*** A loader for RemoteMonitoringDataBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\ReportRequestBeanLoader.java-11:16
/*** A loader for ReportRequestBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\RequiredProceduresBeanLoader.java-11:13
/*** Loads a ResultSet into a number of RequiredProceduresBean objects automatically.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\RequiredProceduresBeanLoader.java-16:18
/*** Create a new bean loader object.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\RequiredProceduresBeanLoader.java-22:27
/*** Loads a list of RequiredProceduresBean objects from a specified ResultSet.
* @param rs ResultSet to be loaded
* @return resulting list of RequiredProceduresBean objects
* @throws SQLException if the ResultSet is not valid
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\RequiredProceduresBeanLoader.java-36:41
/*** Loads a single RequiredProceduresBean object from the specified ResultSet.
* @param rs ResultSet to be loaded from
* @return the next RequiredProceduresBean object to be loaded from rs
* @throws SQLException if the ResultSet is not valid
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\RequiredProceduresBeanLoader.java-52:58
/*** Loads the parameters for a specified RequiredProceduresBean into a specified PreparedStatement.
* @param ps PreparedStatement object into which parameters are to be loaded
* @param bean RequiredProceduresBean object whose parameters are to be loaded
* @return loaded PreparedStatement object
* @throws SQLException if the RequiredProceduresBean object is not valid
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\ReviewsBeanLoader.java-1:3
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\ReviewsBeanLoader.java-14:16
/*** To load information to/from the reviews table into/from ReviewsBeans.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\ReviewsBeanLoader.java-19:23
/*** From a ResultSet input param, return a list of loaded ReviewsBeans.
* @param ResultSet including the Bean info
* @return Java.util Array List ReviewsBeans
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\ReviewsBeanLoader.java-33:38
/*** ReviewsBeans are built and returned, when possible from info
* in ResultSet.
* @param ResultSet from query, holds DB info for ReviewsBean
* @return the loaded ReviewsBean
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\ReviewsBeanLoader.java-52:54
/*** We may decide to implement this later but for now, every call to here returns null.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\SleepEntryLoader.java-12:20
/*** SleepEntryLoader.java
* Version 1
* 4/6/2015
* Copyright notice: none
* A loader for entries into the Sleep Diary (SleepEntry's).
*
* Loads information to/from beans using PreparedStatements and ResultSets.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\SleepEntryLoader.java-23:27
/*** Returns the list of Sleep entries for a patient
* @param rs the result set to load into beans
* @return the list of sleep entries for a patient
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\SleepEntryLoader.java-36:40
/*** Loads a single sleep entry from a result set
* @param rs the result of a query
* @return a sleep entry bean that has the values from the db
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\SleepEntryLoader.java-56:61
/*** Loads the values of the sleep entry into the prepared statement
* @param ps the sql statement to load into
* @param bean the sleep entry we want to store in the db
* @return a prepared statement for loading a sleep entry into the db
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\SurveyLoader.java-10:15
/*** A loader for SurveyBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\SurveyResultBeanLoader.java-9:14
/*** A loader for SurveyResultBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\TransactionBeanLoader.java-11:16
/*** A loader for TransactionBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\VerboseReferralBeanLoader.java-11:16
/*** A loader for ReferralBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\VerboseReferralBeanLoader.java-34:34
// ERIC: fixed to correct for the mysql database bug plaguing java 1.5

iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\VisitReminderReturnFormLoader.java-10:15
/*** A loader for VisitReminderReturnForms.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\VisitReminderReturnFormLoader.java-18:20
/*** loadList
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\VisitReminderReturnFormLoader.java-29:31
/*** loadSingle
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\VisitReminderReturnFormLoader.java-41:43
/*** loadParameters
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\WardBeanLoader.java-10:15
/*** A loader for WardBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\ZipCodeLoader.java-12:17
/*** A loader for ZipCodeBeans.
*
* Loads in information to/from beans using ResultSets and PreparedStatements. Use the superclass to enforce consistency.
* For details on the paradigm for a loader (and what its methods do), see {@link BeanLoader}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\ZipCodeLoader.java-20:22
/*** Loads a list of ZipCodeBeans
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\ZipCodeLoader.java-30:32
/*** Loads a single result set into a zip code bean.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\loaders\ZipCodeLoader.java-46:48
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\LOINCbean.java-3:10
/*** A bean for storing data about Lab Procedure Codes.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters.
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\MacronutrientsBean.java-6:12
/*** MacronutrientsBean.java
* Version 1
* 03/31/2015
* Copyright notice: none
* Contains all of the information for an entry into the Food Diary.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\MacronutrientsBean.java-22:24
/*** height
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\MacronutrientsBean.java-27:29
/*** weight
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\MacronutrientsBean.java-32:34
/*** age
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\MacronutrientsBean.java-37:39
/*** Mifflin-st Jeor
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\MacronutrientsBean.java-42:44
/*** The MID of the user this Food Entry belongs to
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\MacronutrientsBean.java-64:67
/*** Get height of the patient
* @return height of the patient
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\MacronutrientsBean.java-72:75
/*** Set patient height
* @param height height of patient
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\MacronutrientsBean.java-80:83
/*** Mifflin-St Jeor Value
* @return Mifflin-St Jeor Value
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\MacronutrientsBean.java-88:91
/*** Calculate Mifflin-St. Jeor
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\MedicationBean.java-3:8
/*** A medication is the same thing as an ND code - it's like "Aspirin". A medication is not associated with an
* office visit; that's a "prescription". See {@link PrescriptionBean}
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\MedicationBean.java-25:29
/*** Gets the ND Code for this procedure
*
* @return The ND Code for this procedure
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\MedicationBean.java-38:42
/*** Gets the ND Description for this procedure
*
* @return The ND Description for this procedure
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\MessageBean.java-5:12
/*** A bean for storing data about a message from one user to another.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\MessageBean.java-24:27
/*** Gets the MIDs of the recipients for this Message
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\MessageBean.java-32:35
/*** Sets the MIDs of the recipients for this Message
* @param to
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\MessageBean.java-58:61
/*** Gets the MID of the sender for this message
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\MessageBean.java-66:69
/*** Sets the MID of the sender for this message
* @param from
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\MessageBean.java-74:77
/*** Gets the subject of this message
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\MessageBean.java-82:85
/*** Sets the subject of this message
* @param subject
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\MessageBean.java-90:93
/*** Gets the body of this message
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\MessageBean.java-98:101
/*** Sets the body of this message
* @param body
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\MessageBean.java-106:109
/*** Gets the time for this message
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\MessageBean.java-114:117
/*** Sets the time for this message
* @param timestamp
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\MessageBean.java-122:125
/*** Gets read for this message
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\MessageBean.java-130:133
/*** Sets read for this message
* @param read
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\NormalBean.java-3:10
/*** A bean for storing normal values.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\NormalBean.java-25:27
/*** Constructs a NormalBean object with null fields
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\NormalBean.java-31:34
/*** Gets the z value
* @return the z value
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\NormalBean.java-39:42
/*** Sets the z value
* @param z double value representing a z value in the normal distribution table
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\NormalBean.java-47:50
/*** Gets the .00 value
* @return the .00 value
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\NormalBean.java-55:58
/*** Sets the .00 value
* @param _00 the .00 value as a double
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\NormalBean.java-63:66
/*** Gets the .01 value
* @return the .01 value
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\NormalBean.java-71:74
/*** Sets the .01 value
* @param _01 the .01 value as a double
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\NormalBean.java-79:82
/*** Gets the .02 value
* @return the .02 value
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\NormalBean.java-87:90
/*** Sets the .02 value
* @param _02 the .02 value as a double
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\NormalBean.java-95:98
/*** Gets the .03 value
* @return the .03 value
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\NormalBean.java-103:106
/*** Sets the .03 value
* @param _03 the .03 value as a double
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\NormalBean.java-111:114
/*** Gets the .04 value
* @return the .04 value
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\NormalBean.java-119:122
/*** Sets the .04 value
* @param _04 the .04 value as a double
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\NormalBean.java-127:130
/*** Gets the .05 value
* @return the .05 value
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\NormalBean.java-135:138
/*** Sets the .05 value
* @param _05 the .05 value as a double
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\NormalBean.java-143:146
/*** Gets the .06 value
* @return the .06 value
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\NormalBean.java-151:154
/*** Sets the .06 value
* @param _06 the .06 value as a double
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\NormalBean.java-159:162
/*** Gets the .07 value
* @return the .07 value
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\NormalBean.java-167:170
/*** Sets the .07 value
* @param _07 the .07 value as a double
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\NormalBean.java-175:178
/*** Gets the .08 value
* @return the .08 value
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\NormalBean.java-183:186
/*** Sets the .08 value
* @param _08 the .08 value as a double
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\NormalBean.java-191:194
/*** Gets the .09 value
* @return the .09 value
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\NormalBean.java-199:202
/*** Sets the .09 value
* @param _09 the .09 value as a double
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OfficeVisitBean.java-7:14
/*** A bean for storing data about an office visit at the hospital.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OfficeVisitBean.java-26:28
/*** @return the appointmentType
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OfficeVisitBean.java-33:35
/*** @param appointmentType the appointmentType to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OfficeVisitBean.java-40:42
/*** @return the isBilled
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OfficeVisitBean.java-47:49
/*** @param isBilled the isBilled to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OfficeVisitBean.java-57:61
/*** For use ONLY by DAOs
* setters and getters method
* @param visitID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OperationalProfile.java-6:13
/*** A bean for storing operational profile data.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters.
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyDiagnosisBean.java-3:10
/*** A bean for storing data about Diagnosis.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters�
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyDiagnosisBean.java-19:21
/*** diagnosisBean
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyDiagnosisBean.java-26:32
/*** OphthalmologyDiagnosisBean
* @param code code
* @param description description
* @param classification classification
* @param URL URL
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyDiagnosisBean.java-47:51
/*** Gets the ICD Code for this procedure
*
* @return The ICD Code for this procedure
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyDiagnosisBean.java-56:59
/*** setICDCode
* @param code code
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyDiagnosisBean.java-64:67
/*** getClassification
* @return classification
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyDiagnosisBean.java-72:76
/*** Gets the ICD Description for this procedure
*
* @return The ICD Description for this procedure
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyDiagnosisBean.java-81:84
/*** setDescription
* @param description
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyDiagnosisBean.java-89:92
/*** getFormattedDescription
* @return description
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyDiagnosisBean.java-97:101
/*** Optional - for use with editing an office visit
*
* @return opDiagnosisID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyDiagnosisBean.java-106:109
/*** setOpDiagnosisID
* @param opDiagnosisID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyDiagnosisBean.java-114:117
/*** setVisitID
* @param vid
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyDiagnosisBean.java-122:125
/*** getVisitID
* @return visitID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyDiagnosisBean.java-130:133
/*** setURL
* @param newURL
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyDiagnosisBean.java-138:141
/*** getURL
* @return URL
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-7:10
/*** Bean for Ophthalmology Office Visits.
* Holds all of the data needed for an Ophthalmology Office Visit.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-13:13
/**The mid of the user.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-15:15
/**The Ophthalmology office visit id.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-17:17
/**The date of the Ophthalmology office visit.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-19:19
/**The last name of the optometrist.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-21:21
/**The first name of the optometrist.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-23:23
/**The visual acuity numerator for the OD.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-25:25
/**The visual acuity denumerator for the OS.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-27:27
/**The visual acuity numerator for the OD.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-29:29
/**The visual acuity denumerator for the OS.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-31:31
/**The sphere value for the OD.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-33:33
/**The sphere value for the OS.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-35:35
/**The cylinder value for the OD.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-37:37
/**The cylinder value for the OS.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-39:39
/**The axis value for the OD.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-41:41
/**The axis value for the OS.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-43:43
/**The add value for the OD.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-45:45
/**The add value for the OS.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-48:51
/*** Getter for the mid value.
* @return the mid.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-56:59
/*** Set the mid value.
* @param mid the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-64:67
/*** Getter for the oid value.
* @return the oid.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-72:75
/*** Set the oid value.
* @param oid the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-80:83
/*** Getter for the visitDate as a Date object.
* @return the visit date.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-91:91
//If it can't be parsed, return null.

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-97:100
/*** Getter for the visitDate as a string.
* @return the visitDate.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-105:108
/*** Set the visitDate value
* @param visitDate the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-113:116
/*** Getter for the last name of the optometrist.
* @return the optometrist last name.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-121:124
/*** Set the last name of the optometrist.
* @param docLastName the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-129:132
/*** Getter for the first name of the optometrist.
* @return the doctors first name.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-137:140
/*** Set the first name of the optometrist.
* @param docFirstName the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-145:148
/*** Getter for the visual acuity numerator value for the OD.
* @return the vaNum.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-153:156
/*** Set the visual acuity numerator value for the OD.
* @param vaNum the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-161:164
/*** Getter for the visual acuity denumerator value for the OD.
* @return the vaDen.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-169:172
/*** Set the visual acuity denumerator value for the OD.
* @param vaDen the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-177:180
/*** Getter for the visual acuity numerator value for the OS.
* @return the vaNum.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-185:188
/*** Set the visual acuity numerator value for the OS.
* @param vaNum the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-193:196
/*** Getter for the visual acuity denumerator value for the OS.
* @return the vaDen.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-201:204
/*** Set the visual acuity denumerator value for the OS.
* @param vaDen the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-209:212
/*** Getter for the sphere OD value.
* @return the sphereOD.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-217:220
/*** Set the sphere OD value.
* @param sphereOD the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-225:228
/*** Getter for the sphere OS value.
* @return the sphereOS.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-233:236
/*** Set the sphere OS value.
* @param sphereOS the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-241:244
/*** Getter for the cylinder OD value.
* @return the cylinderOD.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-249:252
/*** Set the cylinder OD value.
* @param cylinderOD the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-257:260
/*** Getter for the cylinder OS value.
* @return the cylinderOS.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-265:268
/*** Set the cylinder OS value.
* @param cylinderOS the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-273:276
/*** Getter for the axis OD value.
* @return the axisOD.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-281:284
/*** Set the axis OD value.
* @param axisOD the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-289:292
/*** Getter for the axis OS value.
* @return the axisOS.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-297:300
/*** Set the axis OS value.
* @param axisOS the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-305:308
/*** Getter for the add OD value.
* @return the addOD.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-313:316
/*** Set the add OD value.
* @param addOD the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-321:324
/*** Getter for the add OS value.
* @return the addOS.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-329:332
/*** Set the add OS value.
* @param addOS the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-337:340
/*** Method used to compute the hashcode for a OphthalmologyOVRecordBean.
* @return true if the OphthalmologyOVRecordBeans are equal, false otherwise.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-372:375
/*** Method used to determine if OphthalmologyOVRecordBeans are equal.
* @return true if the OphthalmologyOVRecordBeans are equal, false otherwise.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyOVRecordBean.java-467:470
/*** Creates a string representation of this object.
* @return The string representation.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-5:8
/*** Bean for Scheduled Ophthalmology Office Visits.
* Holds all of the data needed for a scheduled Ophthalmology Office Visit.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-11:11
/**The mid of the patient.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-13:13
/**The mid of the doctor.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-15:15
/**The scheduled Ophthalmology office visit id.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-17:17
/**The time of the scheduled Ophthalmology office visit.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-19:19
/**The last name of the optometrist.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-21:21
/**The first name of the optometrist.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-23:23
/**The comment attached to the office visit request.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-25:25
/**The status of the requested ophthalmology office visit.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-28:31
/*** Getter for the patientmid value.
* @return the patientmid.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-36:39
/*** Set the patientmid value.
* @param patientmid the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-44:47
/*** Getter for the doctormid value.
* @return the doctormid.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-52:55
/*** Set the doctormid value.
* @param doctormid the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-60:63
/*** Getter for the oid value.
* @return the oid.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-68:71
/*** Set the oid value.
* @param oid the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-76:79
/*** Get the time of the scheduled appointment.
* @return the date.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-84:87
/*** Set the time of the scheduled appointment.
* @param date the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-92:95
/*** Getter for the last name of the optometrist.
* @return the optometrist last name.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-100:103
/*** Set the last name of the optometrist.
* @param docLastName the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-108:111
/*** Getter for the first name of the optometrist.
* @return the doctors first name.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-116:119
/*** Set the first name of the optometrist.
* @param docFirstName the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-124:127
/*** Getter for the comment.
* @return the comment.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-132:135
/*** Set the comment.
* @param comment the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-140:143
/*** Check whether the scheduled appointment is pending.
* @return status
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-148:151
/*** Set if the scheduled appointment is pending.
* @param pending the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-160:163
/*** Check whether the scheduled appointment is pending.
* @return status
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-168:172
/*** Set if the scheduled appointment is accepted.
* If setPending(false) has not been called before using this method, this method will have no effect.
* @param accepted accepted
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-179:182
/*** Method used to compute the hashcode for a OphthalmologyOVRecordBean.
* @return true if the OphthalmologyOVRecordBeans are equal, false otherwise.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-200:203
/*** Method used to determine if OphthalmologyOVRecordBeans are equal.
* @return true if the OphthalmologyOVRecordBeans are equal, false otherwise.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologyScheduleOVRecordBean.java-247:250
/*** Creates a string representation of this object.
* @return The string representation.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-7:10
/*** Bean for Ophthalmology Office Visits.
* Holds all of the data needed for an Ophthalmology Office Visit.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-13:13
/**The mid of the user.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-15:15
/**The Ophthalmology office visit id.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-17:17
/**The date of the Ophthalmology office visit.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-19:19
/**The last name of the optometrist.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-21:21
/**The first name of the optometrist.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-23:23
/**The visual acuity numerator for the OD.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-25:25
/**The visual acuity denumerator for the OS.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-27:27
/**The visual acuity numerator for the OD.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-29:29
/**The visual acuity denumerator for the OS.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-31:31
/**The sphere value for the OD.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-33:33
/**The sphere value for the OS.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-35:35
/**The cylinder value for the OD.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-37:37
/**The cylinder value for the OS.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-39:39
/**The axis value for the OD.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-41:41
/**The axis value for the OS.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-43:43
/**The add value for the OD.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-45:45
/**The add value for the OS.*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-47:47
/**Surgery*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-49:49
/**Surgery notes*/

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-52:55
/*** Getter for the mid value.
* @return the mid.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-60:63
/*** Set the mid value.
* @param mid the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-68:71
/*** Getter for the oid value.
* @return the oid.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-76:79
/*** Set the oid value.
* @param oid the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-84:87
/*** Getter for the visitDate as a Date object.
* @return the visit date.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-95:95
//If it can't be parsed, return null.

iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-101:104
/*** Getter for the visitDate as a string.
* @return the visitDate.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-109:112
/*** Set the visitDate value
* @param visitDate the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-117:120
/*** Getter for the last name of the optometrist.
* @return the optometrist last name.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-125:128
/*** Set the last name of the optometrist.
* @param docLastName the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-133:136
/*** Getter for the first name of the optometrist.
* @return the doctors first name.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-141:144
/*** Set the first name of the optometrist.
* @param docFirstName the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-149:152
/*** Getter for the visual acuity numerator value for the OD.
* @return the vaNum.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-157:160
/*** Set the visual acuity numerator value for the OD.
* @param vaNum the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-165:168
/*** Getter for the visual acuity denumerator value for the OD.
* @return the vaDen.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-173:176
/*** Set the visual acuity denumerator value for the OD.
* @param vaDen the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-181:184
/*** Getter for the visual acuity numerator value for the OS.
* @return the vaNum.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-189:192
/*** Set the visual acuity numerator value for the OS.
* @param vaNum the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-197:200
/*** Getter for the visual acuity denumerator value for the OS.
* @return the vaDen.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-205:208
/*** Set the visual acuity denumerator value for the OS.
* @param vaDen the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-213:216
/*** Getter for the sphere OD value.
* @return the sphereOD.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-221:224
/*** Set the sphere OD value.
* @param sphereOD the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-229:232
/*** Getter for the sphere OS value.
* @return the sphereOS.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-237:240
/*** Set the sphere OS value.
* @param sphereOS the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-245:248
/*** Getter for the cylinder OD value.
* @return the cylinderOD.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-253:256
/*** Set the cylinder OD value.
* @param cylinderOD the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-261:264
/*** Getter for the cylinder OS value.
* @return the cylinderOS.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-269:272
/*** Set the cylinder OS value.
* @param cylinderOS the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-277:280
/*** Getter for the axis OD value.
* @return the axisOD.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-285:288
/*** Set the axis OD value.
* @param axisOD the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-293:296
/*** Getter for the axis OS value.
* @return the axisOS.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-301:304
/*** Set the axis OS value.
* @param axisOS the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-309:312
/*** Getter for the add OD value.
* @return the addOD.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-317:320
/*** Set the add OD value.
* @param addOD the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-325:328
/*** Getter for the add OS value.
* @return the addOS.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-333:336
/*** Set the add OS value.
* @param addOS the new value.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-341:343
/*** @return the surgery
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-348:350
/*** @param surgery the surgery to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-355:357
/*** @return the surgeryNotes
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-362:364
/*** @param surgeryNotes the surgeryNotes to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-369:372
/*** Method used to compute the hashcode for a OphthalmologySurgeryRecordBean.
* @return true if the OphthalmologySurgeryRecordBeans are equal, false otherwise.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-408:411
/*** Method used to determine if OphthalmologySurgeryRecordBeans are equal.
* @return true if the OphthalmologySurgeryRecordBeans are equal, false otherwise.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OphthalmologySurgeryRecordBean.java-513:516
/*** Creates a string representation of this object.
* @return The string representation.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OverrideReasonBean.java-3:7
/*** A reason code is like "Aspirin". A reason code is not associated with an
* office visit; that's a reason associated with a "prescription". See {@link PrescriptionBean}
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OverrideReasonBean.java-43:47
/*** Gets the reason Code for this procedure
*
* @return The reason Code for this procedure
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\OverrideReasonBean.java-56:60
/*** Gets the reason Description for this procedure
*
* @return The reason Description for this procedure
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\PatientBean.java-11:18
/*** A bean for storing data about a patient.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\PatientBean.java-48:48
// Topical Health Information

iTrust_v21\src\edu\ncsu\csc\itrust\beans\PatientBean.java-254:254
// Composition of city, state, and zip

iTrust_v21\src\edu\ncsu\csc\itrust\beans\PatientBean.java-387:387
// Composition of the city, state, zip

iTrust_v21\src\edu\ncsu\csc\itrust\beans\PatientHistoryBean.java-8:15
/*** A bean for storing historical data about a patient.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters.
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\PatientInstructionsBean.java-1:3
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\PatientInstructionsBean.java-9:17
/*** A bean for storing data about patient-specific instructions given during an
* office visit.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\PatientInstructionsBean.java-20:22
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\PatientInstructionsBean.java-32:34
/*** @return the id
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\PatientInstructionsBean.java-38:40
/*** @param id the id to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\PatientInstructionsBean.java-45:47
/*** @return the visitID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\PatientInstructionsBean.java-51:53
/*** @param visitID the visitID to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\PatientInstructionsBean.java-57:59
/*** @return the name
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\PatientInstructionsBean.java-63:65
/*** @param name the name to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\PatientInstructionsBean.java-69:71
/*** @return the url
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\PatientInstructionsBean.java-75:77
/*** @param url the url to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\PatientInstructionsBean.java-81:83
/*** @return the comment
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\PatientInstructionsBean.java-87:89
/*** @param comment the comment to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\PatientInstructionsBean.java-93:95
/*** @return the modified
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\PatientInstructionsBean.java-99:101
/*** @param modified the modified to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\PatientVisitBean.java-3:10
/*** A bean for storing data about a patient's visit.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters.
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\PersonnelBean.java-7:14
/*** A bean for storing data about a hospital employee.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\PrescriptionBean.java-9:16
/*** A bean for storing data about a prescription.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters.
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\PrescriptionBean.java-36:39
/*** @param other
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\PrescriptionBean.java-53:56
/*** getters and setters for dosage,
* reason, override reason
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\PrescriptionReportBean.java-3:12
/*** This is the container bean for the Prescription Report requirement. It contains a PrescriptionBean (which
* in turn contains a Medication Bean), and an office visit bean. <br />
* <br />
* This was made so that the prescription report could be done all in one clean query.<br />
* <br />
* See {@link PrescriptionBean} See {@link OfficeVisitBean}
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ProcedureBean.java-5:12
/*** A bean for storing data about a procedure.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ProcedureBean.java-56:60
/*** Gets the CPT Code for this procedure
*
* @return The CPT Code for this procedure
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ProcedureBean.java-76:80
/*** Gets the CPT Description for this procedure
*
* @return The CPT Description for this procedure
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ProcedureBean.java-85:88
/*** setDescription
* @param description description
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ProcedureBean.java-93:96
/*** Gets the HCP ID of the HCP administering the immunization
* @return String
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ProcedureBean.java-101:104
/*** setHcpid
* @param hcpid hcpid
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ProcedureBean.java-109:112
/*** Gets the CPT attribute, used to determine if this is an immunization
* @return String
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ProcedureBean.java-117:120
/*** Sets the CPT attribute, used to determine if this is an immunization
* @param attrib attrib
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ProcedureBean.java-125:128
/*** getOvProcedureID
* @return ovProcedureID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ProcedureBean.java-133:136
/*** setOvProcedureID
* @param ovProcedureID ovProcedureID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ProcedureBean.java-141:144
/*** getDate
* @return date
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ProcedureBean.java-149:152
/*** setDate
* @param d date
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RatingComparator.java-19:19
// TODO Auto-generated catch block

iTrust_v21\src\edu\ncsu\csc\itrust\beans\RecordsReleaseBean.java-7:14
/*** A bean for storing information about releasing medical records.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RecordsReleaseBean.java-30:32
/*** Constructor for RecordsRelease bean. Creates a RecordsReleaseBean with null fields
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RecordsReleaseBean.java-36:39
/*** Sets the releaseID of the release request
* @param releaseID the id of the release request as a long
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RecordsReleaseBean.java-44:47
/*** Gets the release request id as a long
* @return the release request id
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RecordsReleaseBean.java-52:55
/*** Sets the patient mid
* @param pid the patient's mid as a long
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RecordsReleaseBean.java-60:63
/*** Gets the patient's mid
* @return the patient's mid
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RecordsReleaseBean.java-68:71
/*** Sets the name of the release hospital for the records release
* @param hospital the hospital's name as a string
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RecordsReleaseBean.java-76:79
/*** Gets the id of the hospital for which to release the patient's medical records
* @return the name of the hospital
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RecordsReleaseBean.java-84:87
/*** Set the receiving hospital's name
* @param name the receiving hospital's name as a string
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RecordsReleaseBean.java-92:95
/*** Get the receiving hospital's name
* @return the receiving hospital's name
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RecordsReleaseBean.java-100:103
/*** Set the receiving hospital's address.
* @param address the receiving hospital's address
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RecordsReleaseBean.java-108:111
/*** Get the receiving hospital's address
* @return the receiving hospital's address
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RecordsReleaseBean.java-116:119
/*** Set the first name of the receiving doctor
* @param firstName the first name of the receiving doctor as a string
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RecordsReleaseBean.java-124:127
/*** Gets the first name of the receiving doctor
* @return the receiving doctor's first name
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RecordsReleaseBean.java-132:135
/*** Set the last name of the receiving doctor
* @param lastName the first name of the receiving doctor as a string
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RecordsReleaseBean.java-140:143
/*** Get the receiving doctor's last name
* @return the doctor's last name
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RecordsReleaseBean.java-148:151
/*** Set the receiving doctor's phone number
* @param phoneNumber the doctor's phone number as a string
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RecordsReleaseBean.java-156:159
/*** Get the receiving doctor's phone number
* @return the receiving doctor's phone number
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RecordsReleaseBean.java-164:167
/*** Set the receiving doctor's email address
* @param email the receiving doctor's email address as a string
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RecordsReleaseBean.java-172:175
/*** Get the receiving doctor's email address
* @return the receiving doctor's email address
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RecordsReleaseBean.java-180:183
/*** Set the justification for the medical records release
* @param justification the justification as a string
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RecordsReleaseBean.java-188:191
/*** Get the justification for the medical records release
* @return the justification for the medical records release
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RecordsReleaseBean.java-196:200
/*** Sets the status of the medical records release request.
* 0 for pending. 1 for approved. 2 for denied.
* @param status the status as an integer. 0 for pending. 1 for approved. 2 for denied.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RecordsReleaseBean.java-205:209
/*** Gets the status of the medical records release request.
* 0 for pending. 1 for approved. 2 for denied.
* @return the status of the release request. 0 for pending. 1 for approved. 2 for denied.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RecordsReleaseBean.java-214:217
/*** Gets the status description of the release request.
* @return the status description of the release request
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RecordsReleaseBean.java-231:234
/*** Sets the date that the medical records release is requested
* @param requestDate the date of the medical records release as a Date object
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RecordsReleaseBean.java-239:242
/*** Gets the date that the medical records release was requested
* @return the date that the medical records release was requested
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RecordsReleaseBean.java-247:250
/*** Gets the date of the request as a string in mm/dd/yyyy format
* @return the date of the request as a string
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ReferralBean.java-3:10
/*** A bean for storing data about a medical referral.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters.
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RemoteMonitoringDataBean.java-5:12
/*** A bean for storing remote monitoring data for patients.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RemoteMonitoringDataBean.java-25:27
/*** Constructor with no parameters
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RemoteMonitoringDataBean.java-32:34
/*** Constructor with loggedInMID parameter
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ReportRequestBean.java-8:15
/*** A bean for storing data about a report request.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters.
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RequiredProceduresBean.java-3:7
/*** Bean for required procedures.
* Holds data for all immunizations and procedures that are required
* in order for patients to enter into public schools, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RequiredProceduresBean.java-10:10
/** Code for the procedure */

iTrust_v21\src\edu\ncsu\csc\itrust\beans\RequiredProceduresBean.java-12:12
/** Description of the procedure */

iTrust_v21\src\edu\ncsu\csc\itrust\beans\RequiredProceduresBean.java-14:14
/** Age group that the procedure affects (kindergarten, sixth grade, or college age) */

iTrust_v21\src\edu\ncsu\csc\itrust\beans\RequiredProceduresBean.java-16:16
/** Type of procedure (ie: immunization) */

iTrust_v21\src\edu\ncsu\csc\itrust\beans\RequiredProceduresBean.java-18:18
/** Max age that the patient can be before the procedure is no longer required */

iTrust_v21\src\edu\ncsu\csc\itrust\beans\RequiredProceduresBean.java-21:23
/*** Construct a new, empty bean.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RequiredProceduresBean.java-28:31
/*** Get the CPT code for the bean.
* @return CPT code
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RequiredProceduresBean.java-36:39
/*** Set the CPT code for the bean.
* @param cptCode CPT code for the procedure
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RequiredProceduresBean.java-44:47
/*** Get the description of the procedure for the bean.
* @return description of the procedure
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RequiredProceduresBean.java-52:55
/*** Set the description of the procedure for the bean.
* @param description description of the procedure
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RequiredProceduresBean.java-60:63
/*** Get the age group for the bean.
* @return age group (kindergarten, sixth grade, or college age)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RequiredProceduresBean.java-68:71
/*** Set the age group for the bean.
* @param ageGroup 0 if kindergarten, 1 if sixth grade, or 2 if college age)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RequiredProceduresBean.java-76:79
/*** Get the attribute for the bean.
* @return type of procedure
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RequiredProceduresBean.java-84:87
/*** Set the attribute for the bean.
* @param attribute type of procedure
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RequiredProceduresBean.java-92:95
/*** Get the max age for the bean.
* @return max age before procedure no longer required
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\RequiredProceduresBean.java-100:103
/*** Set the max age for the bean.
* @param age max age before procedure no longer required
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ReviewsBean.java-5:12
/*** A bean for storing data about a review of a physician.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ReviewsBean.java-22:25
/*** Gets the MID of the reviewer.
* @return MID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ReviewsBean.java-31:34
/*** Gets the title of the review.
* @return title
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ReviewsBean.java-40:43
/*** Sets the title of the review.
* @param title
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ReviewsBean.java-49:52
/*** Set the MID of the reviewer
* @param MID The MID of the reviwer.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ReviewsBean.java-58:61
/*** Gets the date that the review was made.
* @return Date
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ReviewsBean.java-67:70
/*** Sets the date that the review was made.
* @param dateOfReview The date of the review.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ReviewsBean.java-76:79
/*** Gets the ID of the physician who is being reviewed.
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ReviewsBean.java-85:88
/*** Sets the ID of the physician who is being reviewed.
* @param PID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ReviewsBean.java-94:97
/*** Gets the number of stars that were given to the phyician.
* @return Rating
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ReviewsBean.java-103:106
/*** Sets the rating associated with a review.
* @param rating String value 1-5.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ReviewsBean.java-112:115
/*** Gets the descriptive review of the Physician.
* @return Descriptive Review
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ReviewsBean.java-121:124
/*** Sets the descriptive review attribute.
* @param descriptiveReview
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\SecurityQA.java-3:10
/*** A bean for storing data about a security question and answer.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters.
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\SleepEntryBean.java-9:13
/*** SleepEntryBean.java Version 1 4/6/2015 Copyright notice: none Contains all
* of the information for an entry into the Sleep Diary.
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\SleepEntryBean.java-16:18
/*** Unique Primary key so entries can be edited and deleted
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\SleepEntryBean.java-21:23
/*** The Date this sleep was performed
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\SleepEntryBean.java-27:29
/*** Was the sleep nightly or a nap?
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\SleepEntryBean.java-32:34
/*** How many hours were spent exercising?
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\SleepEntryBean.java-37:39
/*** The MID of the user this sleep entry belongs to
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\SleepEntryBean.java-42:44
/*** EntryID of the label belonging to this entry
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\SleepEntryBean.java-47:51
/*** Returns the id of this entry so it can be edited/deleted.
*
* @return unique id of the sleep entry
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\SleepEntryBean.java-56:61
/*** Sets the id of this entry
*
* @param id
*            the unique id of a sleep entry
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\SleepEntryBean.java-66:71
/*** Returns a string representation of when the sleep was performed
*
* @return string representation of the date on which the sleep was
*         performed
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\SleepEntryBean.java-76:80
/*** Parses the strDate to produce a date in the format MM/dd/yyyy
*
* @return the date on which the sleep was performed
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\SleepEntryBean.java-90:95
/*** Sets the date as a string
*
* @param strDate
*            when the sleep was performed
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\SleepEntryBean.java-100:104
/*** Which type of sleep was performed?
*
* @return the type of sleep
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\SleepEntryBean.java-109:114
/*** Sets the sleep type
*
* @param sleepType
*            what type of sleep was it
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\SleepEntryBean.java-119:121
/*** @return the hoursSlept
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\SleepEntryBean.java-126:129
/*** @param hoursSlept
*            the hoursSlept to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\SleepEntryBean.java-134:138
/*** The patient that performed this sleep
*
* @return patient ID that performed this sleep
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\SleepEntryBean.java-143:148
/*** Patient that performed this sleep
*
* @param patientID
*            patient id of who performed this sleep
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\SleepEntryBean.java-153:156
/*** Label of this meal
* @return label of this meal
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\SleepEntryBean.java-161:164
/*** Label of this meal
* @param label of this meal
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\SurveyBean.java-7:14
/*** A bean for storing survey data associated with an office visit.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters.
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\SurveyResultBean.java-3:8
/*** Bean to be used for survey results (search).  Stores address information about a HCP
* in addition to their specialty, hospital, and averages from survey (results range from 1-5).  This
* beans also contains a variable that stores the percent of office visits that satisfaction results are
* available.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\SurveyResultBean.java-27:27
//list of specialties

iTrust_v21\src\edu\ncsu\csc\itrust\beans\TransactionBean.java-6:13
/*** A bean for storing data about a transaction that occurred within iTrust.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\VerboseReferralBean.java-3:10
/*** A bean for storing data about a medical referral.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters.
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\VerboseReferralBean.java-148:150
/*** @return the patientName
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\VerboseReferralBean.java-155:157
/*** @param patientName the patientName to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\VerboseReferralBean.java-162:164
/*** @return the senderName
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\VerboseReferralBean.java-169:171
/*** @param senderName the senderName to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\VerboseReferralBean.java-176:178
/*** @return the receiverName
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\VerboseReferralBean.java-183:185
/*** @param receiverName the receiverName to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\VerboseReferralBean.java-190:192
/*** @return the ovDate
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\VerboseReferralBean.java-197:199
/*** @param ovDate the ovDate to set
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\VisitFlag.java-3:10
/*** A bean for storing data to flag an office visit.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters.
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\WardBean.java-3:10
/*** A bean for storing data about a Ward.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters.
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\WardRoomBean.java-3:10
/*** A bean for storing data about a WardRoom.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters.
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ZipCodeBean.java-5:12
/*** A bean for storing zip code information.
*
* A bean's purpose is to store data. Period. Little or no functionality is to be added to a bean
* (with the exception of minor formatting such as concatenating phone numbers together).
* A bean must only have Getters and Setters (Eclipse Hint: Use Source > Generate Getters and Setters.
* to create these easily)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ZipCodeBean.java-22:25
/*** Returns the zip code.
* @return zip code
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ZipCodeBean.java-31:34
/*** Sets the zip code
* @param zip code
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ZipCodeBean.java-40:43
/*** Gets the state
* @return State
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ZipCodeBean.java-49:52
/*** Sets the state
* @param state
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ZipCodeBean.java-58:61
/*** Gets the latitude
* @return returns the latitude
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ZipCodeBean.java-67:70
/*** Sets the latitude
* @param latitude
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ZipCodeBean.java-76:79
/*** Gets the longitude
* @return longitude
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ZipCodeBean.java-85:88
/*** Sets the longitude
* @param longitude
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ZipCodeBean.java-94:97
/*** Returns the city
* @return city
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ZipCodeBean.java-103:106
/*** Sets the city
* @param city
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ZipCodeBean.java-112:115
/*** Gets the full state name.
* @return State name
*/


iTrust_v21\src\edu\ncsu\csc\itrust\beans\ZipCodeBean.java-121:124
/*** Sets the full string value of state
* @param fullState State string
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\AdverseEventsData.java-25:28
/*** This class handles the data for charting in CeWolf/JFreeChart. This class implements DatasetProducer,
* CategoryToolTipGenerator, CategoryItemLinkGenerator, and Serializable.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\AdverseEventsData.java-31:33
/*** The generated serializable ID.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\AdverseEventsData.java-36:36
// Hardcoded months array to make implementation simpler for Adverse Event charts

iTrust_v21\src\edu\ncsu\csc\itrust\charts\AdverseEventsData.java-39:39
// Initialize the values for each month to 0

iTrust_v21\src\edu\ncsu\csc\itrust\charts\AdverseEventsData.java-42:42
// This will be the list of adverse events

iTrust_v21\src\edu\ncsu\csc\itrust\charts\AdverseEventsData.java-45:45
// This will be the name of the prescription or immunization under analysis

iTrust_v21\src\edu\ncsu\csc\itrust\charts\AdverseEventsData.java-48:54
/*** Called from the JSP page to initialize the list of Adverse Events needed to
* produce the desired chart.
*
* @param adEvents adEvents
* @param name name
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\AdverseEventsData.java-61:66
/*** This method parses the list of Adverse Event Beans to initialize the chart dataset.
* @param params params
* @return dataset
* @throws DatasetProduceException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\AdverseEventsData.java-68:68
// The DefaultCategoryDataset is used for bar charts.

iTrust_v21\src\edu\ncsu\csc\itrust\charts\AdverseEventsData.java-69:69
// This dataset class may change based on the type of chart you wish to produce.

iTrust_v21\src\edu\ncsu\csc\itrust\charts\AdverseEventsData.java-71:73
/*** The generated serializable ID.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\AdverseEventsData.java-80:80
// For each Adverse Event in the list,

iTrust_v21\src\edu\ncsu\csc\itrust\charts\AdverseEventsData.java-81:81
// parse the string repreentation of the report date

iTrust_v21\src\edu\ncsu\csc\itrust\charts\AdverseEventsData.java-82:82
// to a Java Date object. Then, get the month of the

iTrust_v21\src\edu\ncsu\csc\itrust\charts\AdverseEventsData.java-83:83
// Date object and increment the value count for that month.

iTrust_v21\src\edu\ncsu\csc\itrust\charts\AdverseEventsData.java-97:97
// For each month, add the monthly values to the dataset for

iTrust_v21\src\edu\ncsu\csc\itrust\charts\AdverseEventsData.java-98:98
// producing the chart.

iTrust_v21\src\edu\ncsu\csc\itrust\charts\AdverseEventsData.java-101:101
// values[i] represents the number of adverse events for month i

iTrust_v21\src\edu\ncsu\csc\itrust\charts\AdverseEventsData.java-102:102
// codeName represents the given prescription/immunization being analyzed

iTrust_v21\src\edu\ncsu\csc\itrust\charts\AdverseEventsData.java-103:103
// month[i] is the static array of month names, to be used as labels on the chart

iTrust_v21\src\edu\ncsu\csc\itrust\charts\AdverseEventsData.java-110:116
/*** This producer's data is invalidated after 5 seconds. By this method the
* producer can influence Cewolf's caching behaviour the way it wants to.
* @param params params
* @param since date since
* @return time
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\AdverseEventsData.java-122:125
/*** Returns a unique ID for this DatasetProducer
* @return message
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\AdverseEventsData.java-130:133
/*** Returns a link target for a special data item.
* @return months
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\AdverseEventsData.java-139:145
/*** generateToolTip
* @param arg0 arg0
* @param series series
* @param arg2 arg2
* @see org.jfree.chart.tooltips.CategoryToolTipGenerator#generateToolTip(CategoryDataset, int, int)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\AdverseEventsData.java-150:155
/*** readExternal
* @param arg0 arg0
* @throws IOException
* @throws ClassNotFoundException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\AdverseEventsData.java-157:157
// TODO Auto-generated method stub

iTrust_v21\src\edu\ncsu\csc\itrust\charts\AdverseEventsData.java-161:165
/*** writeExternal
* @param arg0 arg0
* @throws IOException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\AdverseEventsData.java-167:167
// TODO Auto-generated method stub

iTrust_v21\src\edu\ncsu\csc\itrust\charts\DiagnosisTrendData.java-20:22
/*** DiagnosisTrendData
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\DiagnosisTrendData.java-25:25
/**serialVersionUID*/

iTrust_v21\src\edu\ncsu\csc\itrust\charts\DiagnosisTrendData.java-30:30
// Initialize the values for each week to 0

iTrust_v21\src\edu\ncsu\csc\itrust\charts\DiagnosisTrendData.java-33:33
// List of the beans for the diagnosis statistics

iTrust_v21\src\edu\ncsu\csc\itrust\charts\DiagnosisTrendData.java-39:39
// Name of the diagnosis being searched for

iTrust_v21\src\edu\ncsu\csc\itrust\charts\DiagnosisTrendData.java-44:47
/*** hasData
* @return has date
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\DiagnosisTrendData.java-60:66
/*** Called from the JSP to initialize the list of HealthRecords needed
* to produce the desired chart.
*
* @param DiagnosisBean DiagnosisBean
* @param name Type of data that is being graphed (originally Height, Weight, and BMI).
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\DiagnosisTrendData.java-78:83
/*** initializeAvgDiagnosisStatistics
* @param avgBean agvBean
* @param dsBean dsBean
* @param name name
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\DiagnosisTrendData.java-99:105
/*** This method parses the list of DiagnosisStatistics Beans to initialize the
* chart data set.
* @param params params
* @return A data set containing information to be graphed
* @throws DatasetProduceException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\DiagnosisTrendData.java-107:107
// The DefaultCategoryDataset is used for bar charts.

iTrust_v21\src\edu\ncsu\csc\itrust\charts\DiagnosisTrendData.java-108:108
// This data set class may change based on the type of chart you wish to produce.

iTrust_v21\src\edu\ncsu\csc\itrust\charts\DiagnosisTrendData.java-110:112
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\DiagnosisTrendData.java-147:153
/*** This producer's data is invalidated after 5 seconds. By this method the
* producer can influence Cewolf's caching behavior the way it wants to.
* @param params params
* @param since date since
* @return time
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\DiagnosisTrendData.java-159:162
/*** getProducerId
* @return A unique ID for this DatasetProducer
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\DiagnosisTrendData.java-167:173
/*** generateLink
* @param data data
* @param series series
* @param category category
* @return A link target for a special data item.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\DiagnosisTrendData.java-180:187
/*** generateToolTip
* @param arg0 arg0
* @param series series
* @param arg2 arg2
* @return series name
* @see org.jfree.chart.tooltips.CategoryToolTipGenerator#generateToolTip(CategoryDataset, int, int)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\DiagnosisTrendData.java-192:197
/*** readExternal
* @param in in
* @throws IOException
* @throws ClassNotFoundException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\DiagnosisTrendData.java-199:199
// TODO Auto-generated method stub

iTrust_v21\src\edu\ncsu\csc\itrust\charts\DiagnosisTrendData.java-203:207
/*** writeExternal
* @param out out
* @throws IOException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\DiagnosisTrendData.java-209:209
// TODO Auto-generated method stub

iTrust_v21\src\edu\ncsu\csc\itrust\charts\HealthData.java-27:31
/*** This class handles the data for charting height and weight information in
* CeWolf/JFreeChart. This class implements DatasetProducer,
* CategoryToolTipGenerator, CategoryItemLinkGenerator, and Serializable.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\HealthData.java-33:33
// Hardcoded months array to make implementation simpler for Adverse Event charts

iTrust_v21\src\edu\ncsu\csc\itrust\charts\HealthData.java-35:35
/**serialVersionUID*/

iTrust_v21\src\edu\ncsu\csc\itrust\charts\HealthData.java-38:38
// Number of quarters to chart. Set to 12 quarters for 3 years.

iTrust_v21\src\edu\ncsu\csc\itrust\charts\HealthData.java-43:43
// Initialize the values for each month to 0

iTrust_v21\src\edu\ncsu\csc\itrust\charts\HealthData.java-46:46
// Number of entries per quarter, used to calculate average.

iTrust_v21\src\edu\ncsu\csc\itrust\charts\HealthData.java-49:49
// This will be the list of health records

iTrust_v21\src\edu\ncsu\csc\itrust\charts\HealthData.java-52:52
// This will be the name of the prescription or immunization under analysis

iTrust_v21\src\edu\ncsu\csc\itrust\charts\HealthData.java-55:59
/*** Lets the JSP know if there is any data to be displayed.
*
* @return False if there is no data to be displayed.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\HealthData.java-88:94
/*** Called from the JSP to initialize the list of HealthRecords needed
* to produce the desired chart.
*
* @param hRecs Health records for the patient being viewed.
* @param name Type of data that is being graphed (originally Height, Weight, and BMI).
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\HealthData.java-119:125
/*** This method parses the list of Adverse Event Beans to initialize the
* chart dataset.
* @param params params
* @return A dataset containing information to be graphed
* @throws DatasetProduceException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\HealthData.java-127:127
// The DefaultCategoryDataset is used for bar charts.

iTrust_v21\src\edu\ncsu\csc\itrust\charts\HealthData.java-128:128
// This dataset class may change based on the type of chart you wish to produce.

iTrust_v21\src\edu\ncsu\csc\itrust\charts\HealthData.java-130:132
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\HealthData.java-148:148
// Skip entry if it is out of the history range.

iTrust_v21\src\edu\ncsu\csc\itrust\charts\HealthData.java-152:152
// Calculate the average for the quarter.

iTrust_v21\src\edu\ncsu\csc\itrust\charts\HealthData.java-165:165
// For each month, add the monthly values to the dataset for

iTrust_v21\src\edu\ncsu\csc\itrust\charts\HealthData.java-166:166
// producing the chart.

iTrust_v21\src\edu\ncsu\csc\itrust\charts\HealthData.java-179:185
/*** This producer's data is invalidated after 5 seconds. By this method the
* producer can influence Cewolf's caching behavior the way it wants to.
* @param params params
* @param since date since
* @return time
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\HealthData.java-191:194
/*** getProcedureID
* @return A unique ID for this DatasetProducer
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\HealthData.java-199:205
/*** generateLink
* @param data data
* @param series series
* @param category category
* @return A link target for a special data item.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\HealthData.java-212:218
/*** generateToolTip
* @param arg0 arg0
* @param series series
* @param arg2 arg2
* @see org.jfree.chart.tooltips.CategoryToolTipGenerator#generateToolTip(CategoryDataset, int, int)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\HealthData.java-223:228
/*** readExternal
* @param in in
* @throws IOException
* @throws ClassNotFoundException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\HealthData.java-230:230
// TODO Auto-generated method stub

iTrust_v21\src\edu\ncsu\csc\itrust\charts\HealthData.java-234:238
/*** writeExternal
* @param out out
* @throws IOException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\HealthData.java-240:240
// TODO Auto-generated method stub

iTrust_v21\src\edu\ncsu\csc\itrust\charts\PatientLabResults.java-27:31
/*** This class handles the data for charting height and weight information in
* CeWolf/JFreeChart. This class implements DatasetProducer,
* CategoryToolTipGenerator, CategoryItemLinkGenerator, and Serializable.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\PatientLabResults.java-36:36
// Number of quarters to chart. Set to 12 quarters for 3 years.

iTrust_v21\src\edu\ncsu\csc\itrust\charts\PatientLabResults.java-41:41
// Initialize the values for each month to 0

iTrust_v21\src\edu\ncsu\csc\itrust\charts\PatientLabResults.java-44:44
// Number of entries per quarter, used to calculate average.

iTrust_v21\src\edu\ncsu\csc\itrust\charts\PatientLabResults.java-47:47
// This will be the list of health records

iTrust_v21\src\edu\ncsu\csc\itrust\charts\PatientLabResults.java-50:50
// This will be the name of the prescription or immunization under analysis

iTrust_v21\src\edu\ncsu\csc\itrust\charts\PatientLabResults.java-53:57
/*** Lets the JSP know if there is any data to be displayed.
*
* @return False if there is no data to be displayed.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\PatientLabResults.java-86:92
/*** Called from the JSP to initialize the list of Lab Procedure beans needed
* to produce the desired chart.
*
* @param lpbs lpbs
* @param name Name of the lab procedure
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\PatientLabResults.java-117:123
/*** This method parses the list of Adverse Event Beans to initialize the
* chart dataset.
* @param params params
* @return A dataset containing information to be graphed
* @throws DatasetProduceException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\PatientLabResults.java-125:125
// The DefaultCategoryDataset is used for bar charts.

iTrust_v21\src\edu\ncsu\csc\itrust\charts\PatientLabResults.java-126:126
// This dataset class may change based on the type of chart you wish to produce.

iTrust_v21\src\edu\ncsu\csc\itrust\charts\PatientLabResults.java-128:130
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\PatientLabResults.java-146:146
// Skip entry if it is out of the history range.

iTrust_v21\src\edu\ncsu\csc\itrust\charts\PatientLabResults.java-150:150
// Calculate the average for the quarter.

iTrust_v21\src\edu\ncsu\csc\itrust\charts\PatientLabResults.java-159:159
// For each month, add the monthly values to the dataset for

iTrust_v21\src\edu\ncsu\csc\itrust\charts\PatientLabResults.java-160:160
// producing the chart.

iTrust_v21\src\edu\ncsu\csc\itrust\charts\PatientLabResults.java-173:179
/*** This producer's data is invalidated after 5 seconds. By this method the
* producer can influence Cewolf's caching behavior the way it wants to.
* @param params params
* @param since since
* @return expire time
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\PatientLabResults.java-185:188
/*** getProcedureId
* @return A unique ID for this DatasetProducer
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\PatientLabResults.java-193:199
/*** generateLink
* @param data data
* @param series series
* @param category category
* @return A link target for a special data item.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\PatientLabResults.java-206:213
/*** generateTolTip
* @param arg0 arg0
* @param series series
* @param arg2 arg2
* @return quarters
* @see org.jfree.chart.tooltips.CategoryToolTipGenerator#generateToolTip(CategoryDataset, int, int)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\PatientLabResults.java-219:224
/*** readExternal
* @param in in
* @throws IOException
* @throws ClassNotFoundException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\PatientLabResults.java-226:226
// Not supported for lab results.

iTrust_v21\src\edu\ncsu\csc\itrust\charts\PatientLabResults.java-229:233
/*** writeExternal
* @param out out
* @throws IOException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\charts\PatientLabResults.java-235:235
// Not supported for lab results.

iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-14:17
/*** Provides a generic CSV parsing framework.
* Implemented for patient file importing.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-20:22
/*** Holds the header fields from the top of the CSV file
*/


iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-24:26
/*** Holds the fields and records from the CSV file
*/


iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-28:30
/*** Holds a list of errors accumulated while parsing the CSV file.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-33:38
/*** Constructor taking an InputStream
*
* @param csvstream csvstream
* @throws CSVFormatException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-42:42
//First try at UTF-8

iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-46:46
//Try the default

iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-55:61
/*** Constructor taking an already-prepared Scanner
* (For testing purposes)
*
* @param CSVScanner CSVScanner
* @throws CSVFormatException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-66:70
/*** Returns the ArrayList of Strings containing the CSV header fields
*
* @return ArrayList of Strings containing CSV header fields
*/


iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-75:79
/*** Returns the ArrayList of ArrayLists of Strings containing the CSV data fields
*
* @return ArrayList of ArrayLists Strings containing CSV data fields
*/


iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-84:88
/*** Returns the ErrorList of errors accumulated while parsing CSV
*
* @return ErrorList of errors accumulated while parsing CSV
*/


iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-93:98
/*** Parses the CSV file line-by-line.
*
* @param CSVScanner A scanner to a CSV stream.
* @throws CSVFormatException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-102:102
//The number of fields (columns) in the CSV file as determined by the number of headers

iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-104:104
//The current line number being processed (Used to report the line number of errors)

iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-107:107
//Attempt to read the first line (the header) from the file

iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-112:112
//If it does not exist (or if the file isn't a text file at all), the entire process fails

iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-117:117
//Read the file line-by-line and call the line parser for each line

iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-123:123
//If the line doesn't have the right number of fields, it is ignored

iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-129:129
//If the line is otherwise invalid, it is also ignored

iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-136:142
/*** Parses the passed line character-by-character
*
* @param line Line from the CSV file to parse
* @return ArrayList of Strings, each containing the data from one field
* @throws CSVFormatException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-144:144
//Contains the fields from each line parsed

iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-146:146
//Contains the data from the current field being read

iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-148:148
//Contains the status of whether or not the parser is inside a quoted area

iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-149:149
//Used to handle commas and other special characters within the field.

iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-152:152
//Read the line character-by-character

iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-154:154
//Comma denotes the end of the current field unless it is quoted

iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-158:158
//If the field is not ending

iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-160:160
//If the character is a ", ignore it and flip the quote status

iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-163:163
//Otherwise, add the character to the string

iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-169:169
//If the line parser ends while still inside a quoted section, the input line was invalid

iTrust_v21\src\edu\ncsu\csc\itrust\CSVParser.java-173:173
//Grab text from last field too, since the last field does not end with a comma

iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-8:19
/*** The central mediator for all Database Access Objects. The production instance uses the database connection
* pool provided by Tomcat (so use the production instance when doing stuff from JSPs in the "real code").
* Both the production and the test instance parses the context.xml file to get the JDBC connection.
*
* Also, @see {@link EvilDAOFactory} and @see {@link TestDAOFactory}.
*
* Any DAO that is added to the system should be added in this class, in the same way that all other DAOs are.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-24:27
/***
* @return A production instance of the DAOFactory, to be used in deployment (by Tomcat).
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-33:35
/*** Protected constructor. Call getProductionInstance to get an instance of the DAOFactory
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-40:44
/***
* @return this DAOFactory's Connection
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-49:52
/***
* @return this DAOFactory's AccessDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-57:60
/***
* @return this DAOFactory's ZipCodeDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-66:69
/***
* @return this DAOFactory's AllergyDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-74:77
/***
* @return this DAOFactory's ApptDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-82:85
/***
* @return this DAOFactory's ApptRequestDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-90:93
/***
* @return this DAOFactory's ApptTypeDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-98:101
/***
* @return this DAOFactory's AuthDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-106:109
/***
* @return this DAOFactory's BillingDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-114:117
/***
* @return this DAOFactory's CPTCodesDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-122:125
/***
* @return this DAOFactory's DrugInteractionDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-130:133
/***
* @return this DAOFactory's FamilyDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-138:141
/***
* @return this DAOFactory's HealthRecordsDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-146:149
/***
* @return this DAOFactory's HospitalsDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-154:157
/***
* @return this DAOFactory's ICDCodesDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-162:165
/***
* @return this DAOFactory's NDCodesDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-170:173
/***
* @return this DAOFactory's OfficeVisitDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-178:181
/***
* @return this DAOFactory's PatientDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-186:189
/***
* @return this DAOFactory's PersonnelDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-194:197
/***
* @return this DAOFactory's ReferralDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-202:205
/***
* @return this DAOFactory's RiskDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-210:213
/***
* @return this DAOFactory's TransactionDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-218:221
/***
* @return this DAOFactory's VisitRemindersDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-226:229
/***
* @return this DAOFactory's FakeEmailDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-234:237
/***
* @return this DAOFactory's ReportRequestDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-242:245
/***
* @return this DAOFactory's SurveyDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-250:253
/***
* @return this DAOFactory's LabProcedureDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-258:261
/***
* @return this DAOFactory's LOINCDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-266:269
/***
* @return this DAOFactory's SurveyResultDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-274:277
/***
* @return this DAOFactory's MessageDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-282:285
/***
* @return this DAOFactory's AdverseEventDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-290:293
/***
* @return this DAOFactory's RemoteMonitoringDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-298:301
/***
* @return this DAOFactory's PrescriptionsDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-306:309
/***
* @return this DAOFactory's DiagnosesDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-314:317
/***
* @return this DAOFactory's ProceduresDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-322:325
/***
* @return this DAOFactory's PrescriptionReportDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-330:333
/***
* @return this DAOFactory's DrugReactionOverrideCodesDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-338:341
/***
* @return this DAOFactory's PatientInstructionsDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-346:350
/*** Gets the DAO for interaction with database table requiredprocedures.
*
* @return this DAOFactory's RequiredProceduresDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-355:358
/*** Gets the DAO for reviews with the DB table reviews.
* @return this DAOFactory's ReviewsDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-363:366
/*** Gets the DOA for ophthalmology office visits records.
* @return this DAO factory's OphthalmologyOVRecordDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-371:374
/*** Gets the DOA for ophthalmology scheduled office visit records.
* @return this DAO factory's OphthalmologyOVRecordDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-379:382
/*** Gets the DOA for ophthalmology surgery records.
* @return this DAO factory's OphthalmologyOVRecordDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-387:390
/*** Gets the DAO for obstetrics records.
* @return this DAO factory's ObstetricsRecordDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-395:398
/*** Gets the DAO for setting flags. Currently used with obstetrics.
* @return this DAO factory's ObstetricsRecordDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-407:410
/*** Creates a new DAO for all of the Food Entries in a Food Diary
* @return this DAO factory's FoodEntryDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-415:418
/*** Creates a new DAO for all of the Exercise Entries in an Exercise Diary
* @return this DAO factory's ExerciseEntryDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-423:426
/*** Creates a new DAO for all of the Sleep Entries in an Sleep Diary
* @return this DAO factory's SleepEntryDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-431:434
/*** Creates a new DAO for all of the Labels for diary entries
* @return this DAO factory's LabelsDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-439:442
/*** Creates a new DAO for calculating a patient's Mifflin-St Jeor formula
* @return this DAO factory's MacronutrientsDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\DAOFactory.java-447:450
/*** Creates a new DAO for Ophthalmology Disease interactions
* @return this DAO factory's Ophthalmology Disease interactions
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\IConnectionDriver.java-6:11
/*** Used by DAOFactory to abstract away different ways of getting our JDBC connection
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AccessDAO.java-11:25
/*** AccessDAO is for all queries related to authorization.
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AccessDAO.java-30:34
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO,
* which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AccessDAO.java-39:47
/*** Returns the number of minutes it would take for a session to time out.
* This is done by effectively using the database table as a hash table.
* If a row in GlobalVariables does not exist, one is inserted
* with the default value '20'.
*
* @return An int for the number of minutes.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AccessDAO.java-73:78
/*** Sets the number of minutes it would take for a session to timeout.
*
* @param mins An int specifying the number of minutes
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AdverseEventDAO.java-19:33
/*** Used for the logging mechanism.
*
* DAO stands for Database Access Object.
* All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time).
* For more complex sets of queries, extra DAOs are added.
* DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter
* to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory})
* and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AdverseEventDAO.java-39:43
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO,
* which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AdverseEventDAO.java-49:55
/*** Gets all the adverse event reports for a certain user MID.
* @param mid The MID of the user to be looked up.
* @return A java.util.List of AdverseEventBeans.
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AdverseEventDAO.java-76:82
/*** Adds a message to the database.
* @param aeBean aeBean
* @param hcpmid hcpmid
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AdverseEventDAO.java-107:113
/*** getHCPMID
* @param id id
* @return hcpMID
* @throws DBException
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AdverseEventDAO.java-138:144
/*** getReport
* @param reportID reportID
* @return aeList
* @throws DBException
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AdverseEventDAO.java-165:171
/*** removeReport
* @param reportID reportID
* @return lastInsert
* @throws DBException
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AdverseEventDAO.java-194:200
/*** getUnremovedAdverseEventsByCode
* @param code code
* @return loadlist
* @throws DBException
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AdverseEventDAO.java-226:232
/*** getNameForCode
* @param code code
* @return result
* @throws DBException
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AdverseEventDAO.java-263:271
/*** getPerscriptions
* @param start start
* @param end end
* @return aeList
* @throws ParseException
* @throws DBException
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AdverseEventDAO.java-299:307
/*** getImmunizations
* @param start start
* @param end end
* @return aeList
* @throws ParseException
* @throws DBException
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AllergyDAO.java-14:26
/*** DAO stands for Database Access Object.
* All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time).
* For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter
* to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory})
* and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AllergyDAO.java-32:36
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO,
* which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AllergyDAO.java-41:46
/*** Returns a list of patient's allergies.
* @param pid A long for the MID of the patient we are looking up.
* @return A java.util.List of AllergyBeans associated with this patient.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AllergyDAO.java-66:70
/*** Adds an allergy to this patient's list.
* @param allergy allergy bean
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ApptDAO.java-248:253
/*** Returns all past and future appointment conflicts for the doctor
* with the given MID
* @param mid
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ApptDAO.java-290:296
/*** Returns all past and future appointment conflicts for the patient
* with the given MID
* @param mid
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ApptRequestDAO.java-14:17
/***
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ApptRequestDAO.java-29:34
/***
* @param hcpid
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ApptRequestDAO.java-59:64
/***
* @param req
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ApptRequestDAO.java-85:90
/***
* @param req
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AuthDAO.java-18:33
/*** AuthDAO is for anything that has to do with authentication.
* Most methods access the users table.
*
* DAO stands for Database Access Object.
* All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time).
* For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter
* to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory})
* and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AuthDAO.java-37:37
/**LOGIN_TIMEOUT*/

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AuthDAO.java-43:47
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO,
* which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AuthDAO.java-53:64
/*** Add a particular user to the system.
* Does not add user-specific information (e.g. Patient or HCP).
* Initially sets security question to a random set of characters,
* so that nobody should be able to guess its value.
*
* @param mid The user's MID as a Long.
* @param role The role of the user as a Role enum {@link Role}
* @param password The password for the new user.
* @return A string representing the newly added randomly-generated password.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AuthDAO.java-92:99
/*** Reset the security question and answer for a particular user
*
* @param question The security question as a string.
* @param answer The security answer as a string.
* @param mid The MID of the user as a long.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AuthDAO.java-119:125
/*** Returns the user name of a user from just the MID
*
* @param mid The MID of the user to get the name of.
* @return The user's name as a String.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AuthDAO.java-150:156
/*** Returns the role of a particular MID
*
* @param mid The MID of the user to look up.
* @return The {@link Role} of the user as an enum.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AuthDAO.java-184:191
/*** Returns whether a user is deactivated.
* Currently works only for patients
*
* @param mid The MID of the user to look up.
* @return Activation status of the user
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AuthDAO.java-232:238
/*** Change the password of a particular user
*
* @param mid The MID of the user whose password we are changing.
* @param password The new password.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AuthDAO.java-260:266
/*** Return the security question for a particular user.
*
* @param mid The MID of the user we are looking up.
* @return The security question of the user we are looking up.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AuthDAO.java-294:300
/*** Return the security answer of a particular user
*
* @param mid The MID of the user we are looking up.
* @return The security answer as a String.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AuthDAO.java-328:337
/*** Record a login failure, which blacklists the ipAddress.
* Uses the database table like a hash table where
* the key is the user's IP address.
* If the user's IP address is not in the table, a row with "1" is
* added.
*
* @param ipAddr The IP address of the user as a String.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AuthDAO.java-359:368
/*** Record a reset password failure, which blacklists the ipAddress.
* Uses the database table like a hash
* table where the key is the user's IP address.
* If the user's IP address is not in the table,
* a row with "1" is added.
*
* @param ipAddr The IP address of the user as a String.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AuthDAO.java-390:396
/*** Return the number of failures from resetting a password, given an IP address.
*
* @param ipAddr An IP address for the associated attempt as a String.
* @return An int representing the number of failures.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AuthDAO.java-407:407
// if we're more than X minutes out, clear the failure count

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AuthDAO.java-434:441
/*** Return the number of failures from login failures a password,
* given an IP address.
*
* @param ipAddr The IP address for this attempt as a String.
* @return An int representing the number of failures which have occured.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AuthDAO.java-452:452
// if we're more than X minutes out, clear the failure count

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AuthDAO.java-530:535
/*** resetLoginFailuresToZero
* @param ipAddr irAddr
* @throws DBException
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AuthDAO.java-573:579
/*** Check that a user actually exists.
*
* @param mid mid
* @return check
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AuthDAO.java-601:607
/*** Check that a password belongs to a user
*
* @param mid MID of the user
* @param password Users password
* @return check
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AuthDAO.java-631:636
/*** Change the dependency status of the specified user
* @param mid the MID of the user to change dependency status
* @param dependency the dependency status to change user to
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AuthDAO.java-655:660
/*** Check that the specified user is a dependent
* @param mid MID of the user
* @return true if the user is a dependent, false otherwise
* @throws DBException if the SQL statement is not valid
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AuthDAO.java-680:684
/*** getSalt returns the salt for user with MID mid.
* @param mid The user we are looking for.
* @return The salt for that user.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\AuthDAO.java-713:716
/*** shakeSalt gets some salt from the shaker.
* @return A random string 64 characters long. Perhaps the chars was throwing it off?
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\BillingDAO.java-17:19
/*** this class is used to interact with the datbaase to add, get, edit, or remove bills
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\BillingDAO.java-22:22
/**DAOfactory used to make a BillingDAO*/

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\BillingDAO.java-24:24
/**used to get load things into the database or from the database*/

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\BillingDAO.java-27:30
/*** makes a new BillingDAO
* @param factory the DAOfactory used to make a BillingDAO
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\BillingDAO.java-36:41
/*** adds a bill to the database
* @param bill the bill being added to the database
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\BillingDAO.java-64:69
/*** Returns the bill with a specific billID.
* @param billID The ID of the bill
* @return The bill with the id.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\BillingDAO.java-100:105
/*** Returns a bill for a specific office visit.
* @param billID The office visit id that I am looking for.
* @return The bill for that visit.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\BillingDAO.java-136:141
/*** gets a list of billing beans of all the bills from the database for the given patient id
* @param mid the patient id
* @return the list of bills for the given patient id
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\BillingDAO.java-165:171
/*** Get a list of the patient's unpaid bills
*
* @param mid
* @return list of BillingBeans where status is Unsubmitted
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\BillingDAO.java-195:201
/*** Get a list of the bills paid with insurance.
*
* @param mid
* @return list of BillingBeans where paid by insurance.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\BillingDAO.java-225:229
/*** edits the bill giving as a parameter in the database
* @param bill the bill that needs to be edited(already with the edit)
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\BillingDAO.java-255:259
/*** removes a bill from the database
* @param bill the bill that needs to be deleted
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\BillingDAO.java-280:284
/*** getPendingNum gets the number of pending bills.
* @return the nubmer of pending bills.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\BillingDAO.java-309:314
/*** getDeniedNum gets the number of your denied bills.
* @param mid Your Medical id.
* @return the nubmer of your denied bills.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\BillingDAO.java-339:344
/*** getDeniedNum gets the number of your denied bills.
* @param mid Your Medical id.
* @return the nubmer of your denied bills.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CDCBmiStatsDAO.java-14:25
/*** Used for storing and getting data from the cdcbmistats table.
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CDCBmiStatsDAO.java-31:34
/*** Constructor for CDCBmiStatsDAO. Initializes the DAOFactory to have database interactions with.
* @param factory the DAOFactory to interact with
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CDCBmiStatsDAO.java-39:44
/*** Stores a CDCStatsBean into the cdcbmistats table. Inserts and creates a new entry if the sex and age of the bean
* are not currently in the table. Otherwise, the matching row in the table will be updated with the data from the
* passed in CDCStatsBean.
* @param statsBean The CDCStatsBean to store in the database
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CDCBmiStatsDAO.java-62:68
/*** Gets a CDCStatsBean with the specified sex and age from the cdcbmistats table.
* If there are no associated CDC stats with the specified parameters, then null is returned.
* @param sex integer for the sex of the patient. 1 for male and 2 for female.
* @param age float for the age of the patient.
* @return the CDCStatsBean with the specified sex and age.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CDCBmiStatsDAO.java-80:80
//Get the first and only stats bean

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CDCHeadCircStatsDAO.java-14:25
/*** Used for storing and getting data from the cdcheadcircumferencestats table.
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CDCHeadCircStatsDAO.java-31:34
/*** Constructor for CDCHeadCircStatsDAO. Initializes the DAOFactory to have database interactions with.
* @param factory the DAOFactory to interact with
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CDCHeadCircStatsDAO.java-39:44
/*** Stores a CDCStatsBean into the cdcheadcircumferencestats table. Inserts and creates a new entry if the sex and age of
* the bean are not currently in the table. Otherwise, the matching row in the table will be updated with the data from the
* passed in CDCStatsBean.
* @param statsBean The CDCStatsBean to store in the database
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CDCHeadCircStatsDAO.java-63:69
/*** Gets a CDCStatsBean with the specified sex and age from the cdcheadcircumferencestats table.
* If there are no associated CDC stats with the specified parameters, then null is returned.
* @param sex integer for the sex of the patient. 1 for male and 2 for female.
* @param age float for the age of the patient.
* @return the CDCStatsBean with the specified sex and age.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CDCHeadCircStatsDAO.java-81:81
//Get the first and only stats bean

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CDCHeightStatsDAO.java-14:25
/*** Used for storing and getting data from the cdcheightstats table.
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CDCHeightStatsDAO.java-31:34
/*** Constructor for CDCHeightStatsDAO. Initializes the DAOFactory to have database interactions with.
* @param factory the DAOFactory to interact with
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CDCHeightStatsDAO.java-39:44
/*** Stores a CDCStatsBean into the cdcheightstats table. Inserts and creates a new entry if the sex and age of the bean
* are not currently in the table. Otherwise, the matching row in the table will be updated with the data from the
* passed in CDCStatsBean.
* @param statsBean The CDCStatsBean to store in the database
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CDCHeightStatsDAO.java-63:69
/*** Gets a CDCStatsBean with the specified sex and age from the cdcheightstats table.
* If there are no associated CDC stats with the specified parameters, then null is returned.
* @param sex integer for the sex of the patient. 1 for male and 2 for female.
* @param age float for the age of the patient.
* @return the CDCStatsBean with the specified sex and age.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CDCHeightStatsDAO.java-81:81
//Get the first and only stats bean

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CDCStatsDAO.java-7:18
/*** Abstract class for interacting with the cdc health statistics tables
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CDCStatsDAO.java-21:26
/*** Stores a CDCStatsBean into a cdc stats table. Inserts and creates a new entry if the sex and age of the bean
* are not currently in the table. Otherwise, the matching row in the table will be updated with the data from the
* passed in CDCStatsBean.
* @param statsBean The CDCStatsBean to store in the database
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CDCStatsDAO.java-29:34
/*** Gets a CDCStatsBean with the specified sex and age from a cdc stats table.
* If there are no associated CDC stats with the specified parameters, then null is returned.
* @param sex integer for the sex of the patient. 1 for male and 2 for female.
* @param age float for the age of the patient.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CDCWeightStatsDAO.java-14:25
/*** Used for storing and getting data from the cdcweightstats table.
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CDCWeightStatsDAO.java-31:34
/*** Constructor for CDCWeightStatsDAO. Initializes the DAOFactory to have database interactions with.
* @param factory the DAOFactory to interact with
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CDCWeightStatsDAO.java-39:44
/*** Stores a CDCStatsBean into the cdcweightstats table. Inserts and creates a new entry if the sex and age of the bean
* are not currently in the table. Otherwise, the matching row in the table will be updated with the data from the
* passed in CDCStatsBean.
* @param statsBean The CDCStatsBean to store in the database
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CDCWeightStatsDAO.java-63:69
/*** Gets a CDCStatsBean with the specified sex and age from the cdcweightstats table.
* If there are no associated CDC stats with the specified parameters, then null is returned.
* @param sex integer for the sex of the patient. 1 for male and 2 for female.
* @param age float for the age of the patient.
* @return the CDCStatsBean with the specified sex and age.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CDCWeightStatsDAO.java-81:81
//Get the first and only stats bean

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CPTCodesDAO.java-15:34
/*** Used for managing CPT codes.
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*
* The CPT code set accurately describes medical, surgical, and diagnostic services
* and is designed to communicate uniform information about medical services and procedures
* among physicians, coders, patients, accreditation organizations, and payers for administrative,
* financial, and analytical purposes.
*
* @see http://www.ama-assn.org/ama/pub/physician-resources/solutions-managing-your-practice/coding-billing-insurance/cpt/about-cpt.shtml
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CPTCodesDAO.java-39:42
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CPTCodesDAO.java-47:52
/*** Returns a list of all CPT codes.
*
* @return A java.util.List of ProcedureBeans for the CPT codes.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CPTCodesDAO.java-72:77
/*** Returns a list of all immunization CPT codes.
*
* @return A java.util.List of all Immunization-related CPT codes.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CPTCodesDAO.java-97:102
/*** Returns a list of all non-immunization CPT codes.
*
* @return A java.util.List of all Immunization-related CPT codes.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CPTCodesDAO.java-122:128
/*** Returns a particular procedure description for a code.
*
* @param code The string representation of the code.
* @return The textual description of the code.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CPTCodesDAO.java-154:161
/*** Adds a new CPT code, returns that it was added successfully
*
* @param proc A ProcedureBean representing the new code information.
* @return A boolean for whether the operation was successful.
* @throws DBException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\CPTCodesDAO.java-184:190
/*** Change the procedure description for a particular CPT code
*
* @param proc A ProcedureBean representing the new code information.
* @return A boolean for whether the operation was successful.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\DiagnosesDAO.java-19:33
/*** Used for managing diagnoses given during a particular office visit.
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\DiagnosesDAO.java-39:41
/*** @param factory
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\DiagnosesDAO.java-47:51
/*** @param visitID
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\DiagnosesDAO.java-73:82
/*** Gets a local zip code count and regional count of a specified diagnosis code
*
* @param icdCode The diagnosis code
* @param zipCode The zip code to evaluate
* @param lower The starting date
* @param upper The ending date
* @return A bean containing the local and regional counts
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\DiagnosesDAO.java-93:93
// add 1 day's worth to include the upper

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\DiagnosesDAO.java-104:104
// add 1 day's worth to include the upper

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\DiagnosesDAO.java-124:133
/*** Gets a weekly local zip code count and regional count of a specified diagnosis code over a time period
*
* @param icdCode The diagnosis code
* @param zipCode The zip code to evaluate
* @param lower The starting date
* @param upper The ending date
* @return A list of beans containing the local and regional count for each week in the time period
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\DiagnosesDAO.java-199:204
/*** Adds a diagnosis bean to the database.
* @param pres The prescription bean to be added.
* @return The unique ID of the newly added bean.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\DiagnosesDAO.java-227:233
/*** Edits an existing prescription bean.
*
* @param pres The newly updated prescription bean.
* @return A long indicating the ID of the newly updated prescription bean.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\DiagnosesDAO.java-257:262
/*** Removes the given diagnosis from its office visit
*
* @param ovMedicationID The unique ID of the medication to be removed.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\DrugInteractionDAO.java-15:27
/*** Used for managing drug interactions.
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*
* @see http://www.fda.gov/Drugs/InformationOnDrugs/ucm142438.htm
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\DrugInteractionDAO.java-32:35
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\DrugInteractionDAO.java-41:46
/*** Returns a list of all drug interactions for the input drug name
* @param drugCode drugCode
* @return A java.util.List of DrugInteractionBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\DrugInteractionDAO.java-68:78
/*** Adds a new drug interaction, returns whether or not the addition was successful. If the code already exists, an
* iTrustException is thrown.
*
* @param firstDrug  The name of the first drug in an interaction.
* @param secondDrug  The name of the second drug in an interaction.
* @param description  Explanation of the drug interaction.
* @return A boolean indicating success or failure.
* @throws DBException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\DrugInteractionDAO.java-110:116
/*** Remove an interaction from the database
*
* @param firstDrug  The name of the first patient
* @param secondDrug  The name of the second patient
* @return true if removed successfully, false if not in list
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\DrugReactionOverrideCodesDAO.java-15:32
/*** Used for managing the Reason Codes.
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*
* The Override Reason Code (ORC) is a universal product identifier used in the
* United States for drugs intended for human use.
*
* @see http://www.fda.gov/Drugs/InformationOnDrugs/ucm142438.htm
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\DrugReactionOverrideCodesDAO.java-37:40
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\DrugReactionOverrideCodesDAO.java-45:50
/*** Returns a list of all ND codes
*
* @return A java.util.List of OverrideReasonBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\DrugReactionOverrideCodesDAO.java-70:76
/*** Returns a particular description for a given code.
*
* @param code The override reason code to be looked up.
* @return A bean representing the override reason that was looked up.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\DrugReactionOverrideCodesDAO.java-102:110
/*** Adds a new override reason code, returns whether or not the change was made. If the code already exists, an
* iTrustException is thrown.
*
* @param orc The overridereason bean to be added.
* @return A boolean indicating success or failure.
* @throws DBException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\DrugReactionOverrideCodesDAO.java-130:136
/*** Updates a particular code's description
*
* @param orc A bean representing the particular override reason to be updated.
* @return An int representing the number of updated rows.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ExerciseEntryDAO.java-17:22
/*** ExerciseEntryDAO.java Version 1 4/2/2015 Copyright notice: none
*
* Responsible for loading the entries in a patient's exercise diary, the totals
* a patient has performed, and adding a new entry to a patient's exercise diary
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ExerciseEntryDAO.java-28:33
/*** Basic constructor
*
* @param factory
*            the factory to use for getting connections
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ExerciseEntryDAO.java-39:47
/*** Returns all of the entries in the Exercise Entry table that contain the
* ID of the patient.
*
* @param patientMID
*            which patient to select Exercise Diary for
* @return the list of all of that patient's exercise entries
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ExerciseEntryDAO.java-71:81
/*** Returns the total hours and calories burned of each day in the exercise
* diary. The total just sums up the values for each individual exercise
* entry.
*
* @param patientMID
*            patient whose exercise diary we want
* @return a list in descending order of date (dates closest to today first)
*         of the totals performed on each day for a patient
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ExerciseEntryDAO.java-111:117
/*** Adds a exercise entry to a patient's exercise diary
*
* @param exerciseEntry
*            the entry to add
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ExerciseEntryDAO.java-140:147
/*** Queries the db to find the highest exercise entry id currently in use and
* then returns the next number so it can be used for a new exercise entry.
*
* @return the next id available for a exercise entry
* @throws DBException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ExerciseEntryDAO.java-172:185
/*** Deletes the exercise entry from the exercise diary that has the same
* unique id as the one passed in. Returns the count of the number of rows
* affected. The number of rows affected should never be more than 1. The
* patientMID is included to try to ensure that users cannot delete exercise
* diary entries that belong to users other than themselves.
*
* @param entryID
*            which exercise entry to delete
* @param patientMID
*            the owner of this exercise entry
* @return how many entries were deleted from the exercise diary
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ExerciseEntryDAO.java-205:220
/*** Updates a particular exercise entry with the new data. Neither the
* entryid nor the patientid will ever change, so there is no reason to
* include them as possibilities to change. It includes the patientMID in an
* attempt to ensure that patients can only update their own previous
* exercise entries.
*
* @param entryID
*            the exercise entry to update
* @param patientMID
*            who the patient is making this update
* @param exerciseEntry
*            the edited form of the exercise entry
* @return the number of rows updated (should never be more than 1)
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ExerciseEntryDAO.java-256:269
/*** Returns the entries in the Exercise Entry table that are within a
* specified date range.
*
* @param lower
*            the lower date
* @param upper
*            the lower date
* @param patientMID
*            which patient to select Exercise Diary for
*
* @return the list of exercise entries between the two dates
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ExerciseEntryDAO.java-282:282
// Convert java.util.Date to java.sql.Date

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ExerciseEntryDAO.java-302:316
/*** Returns the total hours and calories burned of each day in the exercise
* diary that falls between the two given dates. The total just sums up the
* values for each individual exercise entry.
*
* @param lower
*            the lower date
* @param upper
*            the lower date
* @param patientMID
*            which patient to select Exercise Diary for
*
* @return the list of exercise entries between the two dates
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ExerciseEntryDAO.java-331:331
// Add params

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ExerciseEntryDAO.java-333:333
// Convert java.util.Date to java.sql.Date

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FakeEmailDAO.java-14:26
/***
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FakeEmailDAO.java-31:34
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FakeEmailDAO.java-39:44
/*** Return all emails that have been "sent" (inserted into the database)
*
* @return A java.util.List of Email objects representing fake e-mails.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FakeEmailDAO.java-64:70
/*** Return all emails that a person has sent
*
* @param email The "From" email address as a string.
* @return A java.util.List of fake emails.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FakeEmailDAO.java-91:96
/*** "Send" an email, which just inserts it into the database.
*
* @param email The Email object to insert.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FakeEmailDAO.java-115:120
/*** Returns a list of emails that have the given string as a substring of the body
* @param string The string to search within the body.
* @return A java.util.List of fake emails.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FamilyDAO.java-14:27
/*** Used for queries related to families.
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FamilyDAO.java-32:35
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FamilyDAO.java-40:47
/*** Return the information of the mother and father of this patient
*
* @param pid -
*            this patient
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FamilyDAO.java-55:62
/*** Return a list of patients who share at least one parent (and that parent is not '0') with this patient
*
* @param pid -
*            this patient
* @return A java.util.list of FamilyMemberBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FamilyDAO.java-71:78
/*** Return a list of patients whose mother or father is this patient
*
* @param pid -
*            this patient
* @return A java.util.List of FamilyMemberBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FamilyDAO.java-84:95
/*** Private helper method (since all three are alike)
*
* @param pid
* @param relation
* @param query
* @param secondParam -
*            add the pid as the second parameter (the 3rd query was a little different)
*
* @return A java.util.List of FamilyMemberBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FlagsDAO.java-14:17
/*** FlagsDAO is the data accessor object for the obstetrics flags.
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FlagsDAO.java-22:25
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FlagsDAO.java-31:38
/*** Based on input, either inserts a new flag record, deletes an existing flag record,
* or does nothing. It will insert the flag if a match is not found for the MID and flagType.
* It will delete a flag if a match is found in the database and the flagged value is false.
* The idea is that the database only holds flagged flags, so missing = false.
*
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FlagsDAO.java-51:51
//if the result exists

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FlagsDAO.java-53:53
//if it's set to false, delete from the DB

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FlagsDAO.java-63:63
//else, it's true and it exists so nothing needs to change

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FlagsDAO.java-68:68
//else, it doesn't exist in the DB

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FlagsDAO.java-70:70
//if it's true, add it

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FlagsDAO.java-78:78
//else, it's false, so ignore it

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FlagsDAO.java-91:96
/*** Returns a FlagsBean object for the record indicated in the FlagsBean argument.
* @param p
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FlagsDAO.java-108:108
//now set the bean to whether or not the record exists in the database

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FoodEntryDAO.java-17:22
/*** FoodEntryDAO.java Version 1 2/21/2015 Copyright notice: none
*
* Responsible for loading the entries in a patient's food diary, the totals a
* patient has eaten, and adding a new entry to a patient's food diary
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FoodEntryDAO.java-28:33
/*** Basic constructor
*
* @param factory
*            the factory to use for getting connections
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FoodEntryDAO.java-39:47
/*** Returns all of the entries in the Food Entry table that contain the ID of
* the patient.
*
* @param patientMID
*            which patient to select Food Diary for
* @return the list of all of that patient's food entries
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FoodEntryDAO.java-71:82
/*** Returns the totals of calories, fat, sodium, carbs, sugar, fiber, and
* protein of each day in the food diary. The total is calculated by
* multiplying the number of servings by the grams/milligrams per serving
* for each individual food entry.
*
* @param patientMID
*            patient whose food diary we want
* @return a list in descending order of date (dates closest to today first)
*         of the totals eaten on each day for a patient
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FoodEntryDAO.java-89:92
/** We don't care about the mealtype, foodname, or servings but we
* need to have some for the loader, so just bring back whatever.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FoodEntryDAO.java-121:127
/*** Adds a food entry to a patient's food diary
*
* @param foodEntry
*            the entry to add
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FoodEntryDAO.java-150:157
/*** Queries the db to find the highest food entry id currently in use and
* then returns the next number so it can be used for a new food entry.
*
* @return the next id available for a food entry
* @throws DBException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FoodEntryDAO.java-183:196
/*** Deletes the food entry from the food diary that has the same unique id as
* the one passed in. Returns the count of the number of rows affected. The
* number of rows affected should never be more than 1. The patientMID is
* included to try to ensure that users cannot delete food diary entries
* that belong ot users other than themselves.
*
* @param entryID
*            which food entry to delete
* @param patientMID
*            the owner of this food entry
* @return how many entries were deleted from the food diary
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FoodEntryDAO.java-216:230
/*** Updates a particular food entry with the new data. Neither the entryid
* nor the patientid will ever change, so there is no reason to include them
* as possiblities to change. It includes the patientMID in an attempt to
* ensure that patients can only udpate their own previous food entries.
*
* @param entryID
*            the food entry to update
* @param patientMID
*            who the patient is making this update
* @param foodEntry
*            the edited form of the food entry
* @return the number of rows updated (should never be more than 1)
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FoodEntryDAO.java-271:284
/*** Returns the entries in the Food Entry table that are within a specified
* date range.
*
* @param lower
*            the lower date
* @param upper
*            the lower date
* @param patientMID
*            which patient to select Food Diary for
*
* @return the list of food entries between the two dates
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FoodEntryDAO.java-298:298
// Convert java.util.Date to java.sql.Date

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FoodEntryDAO.java-342:342
// Add params

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\FoodEntryDAO.java-344:344
// Convert java.util.Date to java.sql.Date

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\HealthRecordsDAO.java-15:28
/*** Used for all health records where a whole history is kept.
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\HealthRecordsDAO.java-33:36
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\HealthRecordsDAO.java-41:47
/*** Returns a list of all health records for a particular patient
*
* @param mid The MID of the patient to look up.
* @return A java.util.List of HealthRecords.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\HealthRecordsDAO.java-70:75
/***
* @param ovDateUpper Date of patient's 3-year birthday set as a boundary for baby records, < 3 years of age
* @return A java.util.List of all baby HealthRecords
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\HealthRecordsDAO.java-98:104
/***
* @param ovDateLower Date of patient's 3-year birthday set as a boundary for lower youth records, >= 3 years of age
* @param ovDateUpper Date of patient's 12-year birthday set as a boundary for upper youth records, < 12 years of age
* @return A java.util.List of all youth HealthRecords
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\HealthRecordsDAO.java-128:133
/*** getAllRecordsAfterOVDate
* @param ovDateUpper Date of patient's 12-year birthday set as a boundary for lower adult records, >= 12 years of age
* @return A java.util.List of all adult HealthRecords
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\HealthRecordsDAO.java-157:163
/*** Adds a health record for a particular patient
*
* @param record The HealthRecord object to insert.
* @return A boolean indicating whether the insert was successful.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\HealthRecordsDAO.java-184:189
/*** Removes a health record in the MySQL database by its office visit id
* @param record the health record to remove
* @return true if health record has successfully been removed. False otherwise.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\HealthRecordsDAO.java-191:191
//Boolean for keeping track whether record has been removed

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\HealthRecordsDAO.java-202:202
//If an SQLException happens, throw a DBException

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\HealthRecordsDAO.java-210:215
/*** Get an health record by its office visit ID.
* @param ovID the office visit id of the health record to get
* @return the health record with the associated office visit id
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\HealthRecordsDAO.java-217:217
//Health record object to hold patient's health record associated with the office visit

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\HealthRecordsDAO.java-227:227
//Get the first and only health record

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\HealthRecordsDAO.java-233:233
//If an SQLException happens, throw a DBException

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\HealthRecordsDAO.java-241:247
/*** getAllPatientHealthRecordsByHospital
* @param pid pid
* @param hospitalID hospitalID
* @return records
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\HospitalsDAO.java-17:30
/*** Used for managing hospitals
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\HospitalsDAO.java-35:38
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\HospitalsDAO.java-43:48
/*** Returns a list of all hospitals sorted alphabetically
*
* @return A java.util.List of HospitalBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\HospitalsDAO.java-68:74
/*** Returns a particular hospital given its ID
*
* @param id The String ID of the hospital.
* @return A HospitalBean representing this hospital.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\HospitalsDAO.java-100:107
/*** Adds a hospital
*
* @param hosp The HospitalBean object to insert.
* @return A boolean indicating whether the insertion was successful.
* @throws DBException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\HospitalsDAO.java-133:139
/*** Updates a particular hospital's description. Returns the number of rows affected (should be 1)
*
* @param hosp The HospitalBean to update.
* @return An int indicating the number of affected rows.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\HospitalsDAO.java-163:172
/*** Assign an HCP to a hospital. If they have already been assigned to that hospital, then an
* iTrustException is thrown.
*
* @param hcpID The HCP's MID to assign to the hospital.
* @param hospitalID The ID of the hospital to assign them to.
* @return A boolean indicating whether the assignment was a success.
* @throws DBException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\HospitalsDAO.java-194:201
/*** Unassigns an HCP to a hospital. Returns whether or not any changes were made
*
* @param hcpID The MID of the HCP to remove.
* @param hospitalID The ID of the hospital being removed from.
* @return A boolean indicating success.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\HospitalsDAO.java-221:227
/*** Removes all hospital assignments for a particular HCP. Returns the number of rows affected.
*
* @param hcpID The MID of the HCP.
* @return An int representing the number of hospital assignments removed.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\HospitalsDAO.java-246:252
/*** Checks to see if the LT has an assigned hospital
*
* @param hcpID The MID of the LT.
* @return true If the LT has an assigned hospital to them, false if not
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ICDCodesDAO.java-15:34
/*** Used for managing all ICD codes.
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*
* The International Statistical Classification of Diseases and Related Health Problems
* (most commonly known by the abbreviation ICD) provides codes to classify diseases and a
* wide variety of signs, symptoms, abnormal findings, complaints, social circumstances and
* external causes of injury or disease.
*
* @see http://www.cdc.gov/nchs/icd9.htm
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ICDCodesDAO.java-39:42
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ICDCodesDAO.java-47:52
/*** Returns all non-Ophthalmology ICD9CM codes sorted by code
*
* @return java.util.List of DiagnosisBeans
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ICDCodesDAO.java-73:78
/*** Returns all ICD9CM codes sorted by code
*
* @return java.util.List of DiagnosisBeans
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ICDCodesDAO.java-97:103
/*** Returns a particular description for a given code
*
* @param code The String representation of the code.
* @return A DiagnosisBean of the code.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ICDCodesDAO.java-127:134
/*** Adds an ICD9CM code. Returns whether or not the change was made.
*
* @param diag The DiagnosisBean representing the changes.
* @return A boolean indicating success.
* @throws DBException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ICDCodesDAO.java-156:162
/*** Changes a the description of a particular code.
*
* @param diag A DiagnosisBean representing the changes.
* @return A boolean indicating the number of updated rows.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabelDAO.java-20:23
/*** Basic constructor
* @param factory the factory to use for getting connections
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabelDAO.java-29:34
/*** Returns a single label
* @param entryID ID of the label in the database
* @return a LabelBean if there exist any labels
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabelDAO.java-61:67
/*** Returns all of the entries in the Labels table that contain
* the ID of the patient.
* @param patientMID which patient to select labels for
* @return the list of all of that patient's labels
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabelDAO.java-90:94
/*** Adds a label
* @param label the label to add
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabelDAO.java-115:129
/*** Updates a particular label with the new data. Neither the entryid
* nor the patientid will ever change, so there is no reason to include them
* as possiblities to change. It includes the patientMID in an attempt to
* ensure that patients can only udpate their own previous food entries.
*
* @param entryID
*            the label to update
* @param patientMID
*            who the patient is making this update
* @param label
*            the edited form of the label
* @return the number of rows updated (should never be more than 1)
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabelDAO.java-154:164
/*** Deletes the label from the database that has the same unique id
* as the one passed in. Returns the count of the number of rows affected.
* The number of rows affected should never be more than 1. The patientMID
* is included to try to ensure that users cannot delete food diary
* entries that belong to users other than themselves.
* @param entryID which food entry to delete
* @param patientMID the owner of this food entry
* @return how many entries were deleted from the food diary
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabProcedureDAO.java-14:18
/*** A DAO for managing lab procedure codes. Database Access Object. All info coming into a DAO is already validated.
* Just worry about DB stuff here. Note that all DAOs need to have a DAOFactory with which to access other
* DAOs and to get connections. Also, every DAO must have a constructor with a DAOFactory as a parameter.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabProcedureDAO.java-23:26
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabProcedureDAO.java-32:37
/*** Get a list of the lab procedures associated with a given patient.
* @param id The MID of the patient as a long.
* @return A java.util.List of LabProcedureBeans
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabProcedureDAO.java-61:68
/*** Get lab procedures for a specific office visit, but excluding lab
* procedures which a patient does not have access to.
*
* @param ovid Office visit id.
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabProcedureDAO.java-91:96
/*** Gets all the lab procedures for a given patient that occur within the next month.
* @param id The MID of the patient as a long.
* @return A java.util.List of LabProcedureBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabProcedureDAO.java-121:126
/*** Gets an individual lab procedure.
* @param id The ID of the lab procedure.
* @return A LabProcedureBean representing the procedure.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabProcedureDAO.java-147:152
/*** Gets all procedures for Patient
* @param mid patient id
* @return A java.util.List of LabProcedureBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabProcedureDAO.java-174:180
/*** This gets all the procedures for a particular patient on a particular office visit
* @param mid The MID of the patient.
* @param ovid The Office Visit ID.
* @return A java.util.List of LabProcedureBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabProcedureDAO.java-204:209
/*** This gets all the procedures for a particular patient on a particular office visit
* @param ovid The Office Visit ID.
* @return A java.util.List of LabProcedureBeans
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabProcedureDAO.java-231:235
/*** Gets all lab procedures, period.
* @return A java.util.List of LabProcedureBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabProcedureDAO.java-257:262
/*** Get all lab procedures associated with a particular HCP.
* @param mid The HCP's id.
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabProcedureDAO.java-288:293
/*** Get all lab procedures associated with a particular HCP and Patient.
* @param mid The HCP's id.
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabProcedureDAO.java-322:327
/*** Get a count of all pending lab procedures for a particular HCP.
* @param mid
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabProcedureDAO.java-355:360
/*** Gets the lab procedures for a given LHCP that occur within the next month.
* @param ovid The Office Visit ID conducted by the LHCP in question.
* @return A java.util.List of LabProcedureBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabProcedureDAO.java-383:388
/*** Inserts a lab procedure into the database.
* @param b The LabProcedureBean to be inserted.
* @return A long containing the ID of the newly inserted lab procedure bean.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabProcedureDAO.java-425:429
/*** Updates an existing lab procedure.
* @param b The LabProcedureBean representing the procedure to be updated.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabProcedureDAO.java-461:465
/*** Marks a lab procedure as viewed by the patient
* @param b The LabProcedureBean representing the procedure to be marked as viewed.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabProcedureDAO.java-485:490
/*** Get the count of unviewed lab procedures for a particular patient.
* @param pid
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabProcedureDAO.java-518:523
/*** Gets all the lab procedures that correspond to a particular LOINC.
* @param id The LOINC in question.
* @return A java.util.List of LabProcedureBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabProcedureDAO.java-547:551
/*** Updates the rights of a user on a given lab procedure.
* @param b The LabProcedureBean in question.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabProcedureDAO.java-573:577
/*** Delete a given lab procedure form the database.
* @param procedureID
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabProcedureDAO.java-595:600
/*** Get a list of the lab procedures in transit associated with a given Lab Tech.
* @param id The MID of the LT as a long.
* @return A java.util.List of LabProcedureBeans
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabProcedureDAO.java-624:629
/*** Get a list of the lab procedures received for a given Lab Tech.
* @param id The MID of the LT as a long.
* @return A java.util.List of LabProcedureBeans
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabProcedureDAO.java-653:658
/*** Get a list of the lab procedures testing for a given Lab Tech.
* @param id The MID of the LT as a long.
* @return A java.util.List of LabProcedureBeans
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabProcedureDAO.java-682:689
/*** Get the count of the In_Transit and Received lab procedures assigned to
* a specific lab tech.
*
* @param mid
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabProcedureDAO.java-717:724
/*** Get the count of the In_Transit and Received lab procedures assigned to
* a specific lab tech grouped by priority.
*
* @param mid
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabProcedureDAO.java-758:764
/*** @param id
* @param parseLong
* @param parseLong2
* @param parseLong3
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabProcedureDAO.java-789:792
/*** @param parseLong
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LabProcedureDAO.java-812:815
/*** @param parseLong
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LOINCDAO.java-15:33
/*** DAO stands for Database Access Object.
* All DAOs are intended to be reflections of the database,
* that is, one DAO per table in the database (most of the time).
* For more complex sets of queries,
* extra DAOs are added.
* DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter
* to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory})
* and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*
* Logical Observation Identifiers Names and Codes (LOINC)
* is a database and universal standard for
* identifying medical laboratory observations.
* @see http://loinc.org/
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LOINCDAO.java-41:45
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO,
* 		which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LOINCDAO.java-51:57
/*** Adds a LOINC
*
* @param hosp The LOINCbean representing the new code to be added.
* @throws DBException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LOINCDAO.java-83:89
/*** Returns all LOINCs associated with LaboratoryProcedureCode
*
* @param labProcCode The code of the Laboratory Procedure Code as a String.
* @return A java.util.List of LOINCBeans matching the Laboratory Procedure Code.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LOINCDAO.java-111:116
/*** Updates the information in LOINC.
*
* @param ov
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\LOINCDAO.java-139:144
/*** Returns all LOINCs as a list.
*
* @return A java.util.List of LOINCbeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\MacronutrientsDAO.java-14:20
/*** MacronutrientsDAO.java
* Version 1
* 03/31/2015
* Copyright notice: none
* Contains database interactions for Macronutrients
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\MessageDAO.java-14:27
/*** Used for the logging mechanism.
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\MessageDAO.java-32:35
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\MessageDAO.java-41:47
/*** Gets all the messages for a certain user MID.
* @param mid The MID of the user to be looked up.
* @return A java.util.List of MessageBeans.
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\MessageDAO.java-72:78
/*** Gets all the messages for a certain user MID sorted by ascending time.
* @param mid The MID of the user to be looked up.
* @return A java.util.List of MessageBeans.
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\MessageDAO.java-102:108
/*** Gets all the messages for a certain user MID sorted by name ascending.
* @param mid The MID of the user to be looked up.
* @return A java.util.List of MessageBeans.
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\MessageDAO.java-139:145
/*** Gets all the messages for a certain user MID sorted by name descending.
* @param mid The MID of the user to be looked up.
* @return A java.util.List of MessageBeans.
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\MessageDAO.java-176:182
/*** Gets all the messages from a certain user MID.
* @param mid The MID of the user to be looked up.
* @return A java.util.List of MessageBeans.
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\MessageDAO.java-207:212
/*** Gets all the messages for a certain user MID sorted by ascending time.
* @param mid The MID of the user to be looked up.
* @return A java.util.List of MessageBeans.
* @throws SQLException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\MessageDAO.java-237:243
/*** Gets all the messages for a certain user MID sorted by name ascending.
* @param mid The MID of the user to be looked up.
* @return A java.util.List of MessageBeans.
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\MessageDAO.java-274:280
/*** Gets all the messages for a certain user MID sorted by name descending.
* @param mid The MID of the user to be looked up.
* @return A java.util.List of MessageBeans.
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\MessageDAO.java-313:318
/*** Adds a message to the database.
* @param mBean A bean representing the message to be added.
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\NDCodesDAO.java-15:32
/*** Used for managing the ND Codes.
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*
* The National Drug Code (NDC) is a universal product identifier used in the
* United States for drugs intended for human use.
*
* @see http://www.fda.gov/Drugs/InformationOnDrugs/ucm142438.htm
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\NDCodesDAO.java-37:40
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\NDCodesDAO.java-45:50
/*** Returns a list of all ND codes
*
* @return A java.util.List of MedicationBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\NDCodesDAO.java-69:75
/*** Returns a particular description for a given code.
*
* @param code The ND code to be looked up.
* @return A bean representing the Medication that was looked up.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\NDCodesDAO.java-99:107
/*** Adds a new ND code, returns whether or not the change was made. If the code already exists, an
* iTrustException is thrown.
*
* @param med The medication bean to be added.
* @return A boolean indicating success or failure.
* @throws DBException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\NDCodesDAO.java-127:133
/*** Updates a particular code's description
*
* @param med A bean representing the particular medication to be updated.
* @return An int representing the number of updated rows.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\NDCodesDAO.java-151:158
/*** Removes a ND code, returns whether or not the change was made.
*
* @param med The medication bean to be removed.
* @return A boolean indicating success or failure.
* @throws DBException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\NormalDAO.java-14:25
/*** Used for getting data from the normal distribution table.
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\NormalDAO.java-30:34
/*** Constructor for NormalDAO. Saves the DAOFactory that is passed in to do database transactions in.
*
* @param factory
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\NormalDAO.java-39:47
/*** Gets a normal bean from the normal distribution table. Reads in a double value that is formatted to
* 1 decimal place. Matches rows in the table based on the z column. Only returns one NormalBean object.
* Otherwise returns null if there is no match.
*
* @param z double value used to match the z field in the normaltable table. Needs to be a decimal place value.
* @return NormalBean with the specified z value in the parameter
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\NormalDAO.java-59:59
//Get the first and only NormalBean from the list if it exists

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ObstetricsRecordDAO.java-15:29
/*** Used for managing all static information related to an obstetrics record. For other information related to all aspects
* of patient care, see the other DAOs.
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ObstetricsRecordDAO.java-34:37
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ObstetricsRecordDAO.java-43:47
/*** Adds an obstetrics record to the table
*
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ObstetricsRecordDAO.java-53:53
//first, insert the record

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ObstetricsRecordDAO.java-54:54
//used to have OID, between MID and pregId (also VALUES had another ?,

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ObstetricsRecordDAO.java-63:63
//then, set the OID of the original bean to the one the database generates

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ObstetricsRecordDAO.java-77:83
/*** Returns an obstetrics record correlating to the given OID
*
* @param oid the obstetrics id
* @return ObstetricsRecordBean with the information from the obstetrics record
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ObstetricsRecordDAO.java-109:116
/*** Returns a list of obstetrics records correlating to the given MID
*
* @param mid the patient's id
* @return a list of ObstetricsRecordBean's with the information from all the obstetrics records
* correlating to the given MID
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ObstetricsRecordDAO.java-137:143
/*** Same as above method for get records by MID, but filters by PregnancyStatus
* @param mid
* @param pregStatus
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ObstetricsRecordDAO.java-177:177
//check if result set was empty, then load if not

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ObstetricsRecordDAO.java-192:197
/*** Updates an obstetrics record for the given OID
*
* @param p The ObstetricsRecordBean representing the new information for the obstetrics record.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OfficeVisitDAO.java-18:32
/*** Used for doing tasks related to office visits. Use this for linking diagnoses to office visits, and similar
* tasks.
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OfficeVisitDAO.java-38:41
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OfficeVisitDAO.java-46:52
/*** Adds an visit and return its ID
*
* @param ov The OfficeVisitBean to be added.
* @return A long indicating the unique ID for the office visit.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OfficeVisitDAO.java-84:89
/*** Updates the information in a particular office visit.
*
* @param ov The Office Visit bean representing the changes.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OfficeVisitDAO.java-109:115
/*** Returns a particular office visit given an ID
*
* @param visitID The unique ID of the office visit.
* @return An OfficeVisitBean with the specifics for that office visit.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OfficeVisitDAO.java-143:150
/*** Returns whether or not an office visit actually exists
*
* @param ovID The ID of the office visit to be checked.
* @param pid The MID of the patient associated with this transaction.
* @return A boolean indicating its existence.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OfficeVisitDAO.java-172:178
/*** Returns a list of all office visits for a given patient
*
* @param pid The MID of the patient in question.
* @return A java.util.List of OfficeVisitBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OfficeVisitDAO.java-200:206
/*** Returns a list of all office visits for a given patient
*
* @param mid The MID of the LHCP you are looking up.
* @return A java.util.List of Office Visits.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OfficeVisitDAO.java-229:235
/*** Returns a list of all office visits for a given patient
*
* @param pid The MID of the patient.
* @return A java.util.List of Office Visits.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OfficeVisitDAO.java-258:263
/*** Returns a list of all office visits at a given hospital
* @param hospitalID the id of the hospital
* @return a list of the OfficeVisitBeans that hold the office visits
* @throws DBException in the event of a database error
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OfficeVisitDAO.java-285:291
/*** Gets all office visits corresponding to a particular ICD diagnosis.
*
* @param icdcode A string represnting the ICD diagnosis to look up.
* @return A java.util.List of Office visits.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologyDiagnosisDAO.java-14:28
/*** Used for managing diagnoses given during a particular office visit.
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologyDiagnosisDAO.java-34:36
/*** @param factory
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologyDiagnosisDAO.java-42:46
/*** @param visitID
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologyDiagnosisDAO.java-68:73
/*** Adds a diagnosis bean to the database.
* @param pres The prescription bean to be added.
* @return The unique ID of the newly added bean.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologyDiagnosisDAO.java-96:102
/*** Edits an existing prescription bean.
*
* @param pres The newly updated prescription bean.
* @return A long indicating the ID of the newly updated prescription bean.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologyDiagnosisDAO.java-126:131
/*** Removes the given diagnosis from its office visit
*
* @param ovMedicationID The unique ID of the medication to be removed.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologyDiagnosisDAO.java-150:155
/*** Returns all non-Ophthalmology ICD9CM codes sorted by code
*
* @return java.util.List of DiagnosisBeans
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologyOVRecordDAO.java-15:29
/*** Used for managing all static information related to an ophthalmology office
* visit record. For other information related to all aspects of patient care,
* see the other DAOs.
*
* DAO stands for Database Access Object. All DAOs are intended to be
* reflections of the database, that is, one DAO per table in the database
* (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor
* than a factory. All DAOs should be accessed by DAOFactory
* (@see {@link DAOFactory}) and every DAO should have a factory - for
* obtaining JDBC connections and/or accessing other DAOs.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologyOVRecordDAO.java-32:32
/** Used to get database connections*/

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologyOVRecordDAO.java-34:34
/** Used to load data from ResultSets, and into PreparedStatements.*/

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologyOVRecordDAO.java-37:41
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO, which
* is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologyOVRecordDAO.java-47:51
/*** Adds an Ophthalmology office visit record to the table.
* @param p The Ophthalmology office visit record to be added to the database.
* @throws DBException thrown when the database throws a SQLException.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologyOVRecordDAO.java-57:57
//first, insert the record

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologyOVRecordDAO.java-66:66
//then, set the OID of the original bean to the one the database generates

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologyOVRecordDAO.java-79:86
/*** Returns an ophthalmology office visit record correlating to the given
* OID.
* @param oid The Ophthalmology office visit id.
* @return OphthalmologyOVRecordBean containing the information from the
* Ophthalmology office visit record.
* @throws DBException thrown when the database throws a SQLException.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologyOVRecordDAO.java-113:120
/*** Returns a list of ophthalmology office visit records correlating to the
* given MID.
* @param mid the patient's id.
* @return a list of ObstetricsRecordBean's with the information from all
* the ophthalmology office visit records correlating to the given MID.
* @throws DBException thrown when the database throws a SQLException.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologyOVRecordDAO.java-141:147
/*** Updates an ophthalmology office visit record for the given OID.
* @param oid the ophthalmology office visit id.
* @param p The OphthalmologyOVRecordBean representing the new information for
* the ophthalmology office visit record.
* @throws DBException thrown when the database throws a SQLException.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologyScheduleOVDAO.java-15:29
/*** Used for managing all static information related to a scheduled ophthalmology office
* visit record. For other information related to all aspects of patient care,
* see the other DAOs.
*
* DAO stands for Database Access Object. All DAOs are intended to be
* reflections of the database, that is, one DAO per table in the database
* (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor
* than a factory. All DAOs should be accessed by DAOFactory
* (@see {@link DAOFactory}) and every DAO should have a factory - for
* obtaining JDBC connections and/or accessing other DAOs.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologyScheduleOVDAO.java-31:31
/** Used to get database connections*/

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologyScheduleOVDAO.java-33:33
/** Used to load data from ResultSets, and into PreparedStatements.*/

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologyScheduleOVDAO.java-36:40
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO, which
* is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologyScheduleOVDAO.java-47:51
/*** Adds a scheduled Ophthalmology office visit record to the table.
* @param p The scheduled Ophthalmology office visit record to be added to the database.
* @throws DBException thrown when the database throws a SQLException.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologyScheduleOVDAO.java-57:57
//first, insert the record

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologyScheduleOVDAO.java-65:65
//then, set the OID of the original bean to the one the database generates

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologyScheduleOVDAO.java-78:85
/*** Returns a scheduled ophthalmology office visit record correlating to the given
* OID.
* @param oid The scheduled Ophthalmology office visit id.
* @return OphthalmologyScheduleOVRecordBean containing the information from the
* scheduled Ophthalmology office visit record.
* @throws DBException thrown when the database throws a SQLException.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologyScheduleOVDAO.java-112:119
/*** Returns a list of scheduled ophthalmology office visit records correlating to the
* given PATIENTMID.
* @param mid the patient's id.
* @return a list of OphthalmologyScheduleOVRecordBean's with the information from all
* the scheduled ophthalmology office visit records correlating to the given PATIENTMID.
* @throws DBException thrown when the database throws a SQLException.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologyScheduleOVDAO.java-140:147
/*** Returns a list of scheduled ophthalmology office visit records correlating to the
* given DOCTORMID.
* @param mid the patient's id.
* @return a list of OphthalmologyScheduleOVRecordBean's with the information from all
* the scheduled ophthalmology office visit records correlating to the given DOCTORMID.
* @throws DBException thrown when the database throws a SQLException.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologyScheduleOVDAO.java-168:174
/*** Updates a scheduled ophthalmology office visit record for the given OID.
* @param oid the scheduled ophthalmology office visit id.
* @param p The OphthalmologyScheduleOVRecordBean representing the new information for
* the scheduled ophthalmology office visit record.
* @throws DBException thrown when the database throws a SQLException.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologySurgeryRecordDAO.java-15:29
/*** Used for managing all static information related to an ophthalmology office
* visit record. For other information related to all aspects of patient care,
* see the other DAOs.
*
* DAO stands for Database Access Object. All DAOs are intended to be
* reflections of the database, that is, one DAO per table in the database
* (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor
* than a factory. All DAOs should be accessed by DAOFactory
* (@see {@link DAOFactory}) and every DAO should have a factory - for
* obtaining JDBC connections and/or accessing other DAOs.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologySurgeryRecordDAO.java-32:32
/** Used to get database connections*/

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologySurgeryRecordDAO.java-34:34
/** Used to load data from ResultSets, and into PreparedStatements.*/

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologySurgeryRecordDAO.java-37:41
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO, which
* is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologySurgeryRecordDAO.java-47:51
/*** Adds an Ophthalmology office visit record to the table.
* @param p The Ophthalmology office visit record to be added to the database.
* @throws DBException thrown when the database throws a SQLException.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologySurgeryRecordDAO.java-57:57
//first, insert the record

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologySurgeryRecordDAO.java-66:66
//then, set the OID of the original bean to the one the database generates

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologySurgeryRecordDAO.java-78:85
/*** Returns an ophthalmology office visit record correlating to the given
* OID.
* @param oid The Ophthalmology office visit id.
* @return ObstetricsRecordBean containing the information from the
* Ophthalmology office visit record.
* @throws DBException thrown when the database throws a SQLException.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologySurgeryRecordDAO.java-112:119
/*** Returns a list of ophthalmology office visit records correlating to the
* given MID.
* @param mid the patient's id.
* @return a list of ObstetricsRecordBean's with the information from all
* the ophthalmology office visit records correlating to the given MID.
* @throws DBException thrown when the database throws a SQLException.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\OphthalmologySurgeryRecordDAO.java-140:146
/*** Updates an ophthalmology office visit record for the given OID.
* @param oid the ophthalmology office visit id.
* @param p The OphthalmologySurgeryRecordBean representing the new information for
* the ophthalmology office visit record.
* @throws DBException thrown when the database throws a SQLException.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-27:41
/*** Used for managing all static information related to a patient. For other information related to all aspects
* of patient care, see the other DAOs.
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-50:53
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-63:70
/*** Returns the name for the given MID
*
* @param mid The MID of the patient in question.
* @return A String representing the patient's first name and last name.
* @throws ITrustException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-98:106
/*** Returns the role of a particular patient - why is this in PatientDAO? It should be in AuthDAO
*
* @param mid The MID of the patient in question.
* @param role A String representing the role of the patient.
* @return A String representing the patient's role.
* @throws ITrustException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-135:140
/*** Adds an empty patient to the table, returns the new MID
*
* @return The MID of the patient as a long.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-159:165
/*** Returns the patient's information for a given ID
*
* @param mid The MID of the patient to retrieve.
* @return A PatientBean representing the patient.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-192:197
/*** Updates a patient's information for the given MID
*
* @param p The patient bean representing the new information for the patient.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-291:297
/*** Returns whether or not the patient exists
*
* @param pid The MID of the patient in question.
* @return A boolean indicating whether the patient exists.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-318:324
/*** Returns a list of HCPs who are declared by the given patient
*
* @param pid The MID of the patient in question.
* @return A java.util.List of Personnel Beans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-347:355
/*** Declares an HCP for a particular patient
*
* @param pid The MID of the patient in question.
* @param hcpID The HCP's MID.
* @return A boolean as to whether the insertion was successful.
* @throws DBException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-377:384
/*** Undeclare an HCP for a given patient
*
* @param pid The MID of the patient in question.
* @param hcpID The MID of the HCP in question.
* @return A boolean indicating whether the action was successful.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-404:411
/*** Check if a patient has declared the given HCP
*
* @param pid The MID of the patient in question as a long.
* @param hcpid The MID of the HCP in question as a long.
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-431:437
/*** Return a list of patients that the given patient represents
*
* @param pid The MID of the patient in question.
* @return A java.util.List of PatientBeans
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-459:465
/*** Return a list of patients that the given patient represents
*
* @param pid The MID of the patient in question.
* @return A java.util.List of PatientBeans
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-487:493
/*** Return a list of patients that the given patient is represented by
*
* @param pid The MID of the patient in question.
* @return A java.util.List of PatientBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-515:522
/*** Check if the given representer represents the representee
*
* @param representer The MID of the representer in question.
* @param representee The MID of the representee in question.
* @return A boolean indicating whether represenation is in place.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-545:553
/*** Assign a representer to the representee
*
* @param representer The MID of the representer as a long.
* @param representee The MID of the representee as a long.
* @return A boolean as to whether the insertion was correct.
* @throws DBException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-630:637
/*** Unassign the representation
*
* @param representer The MID of the representer in question.
* @param representee The MID of the representee in question.
* @return A boolean indicating whether the unassignment was sucessful.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-656:661
/*** Removes all dependencies represented by the patient passed in the parameter
*
* @param representerMID the mid for the patient to remove all representees for
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-686:691
/*** Removes all dependencies participated by the patient passed in the parameter
*
* @param representerMID the mid for the patient to remove all representees for
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-713:719
/*** Return a list of all diagnoses for a given patient
*
* @param pid The MID of the patient in question.
* @return A java.util.List of Diagnoses.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-743:749
/*** Return a list of all procedures for a given patient
*
* @param pid The MID of the patient in question.
* @return A java.util.List of all the procedures.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-773:779
/*** Return a list of all immunization procedures for a given patient
*
* @param pid The MID of the patient in question.
* @return A java.util.List of the procedures.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-804:810
/*** Return a list of all prescriptions for a patient
*
* @param patientID The MID of the patient in question.
* @return A java.util.List of prescriptions.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-835:841
/*** Return a list of prescriptions which are currently prescribed for a patient
*
* @param patientID The MID of the patient in question.
* @return A java.util.List of prescription beans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-868:874
/*** Return a list of prescriptions which are expired prescription for a patient
*
* @param patientID The MID of the patient in question.
* @return A java.util.List of prescriptions.
* @throws DBException
**/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-901:906
/*** Lists every patient in the database.
*
* @return A java.util.List of PatientBeans representing the patients.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-926:934
/*** Return a list of patients with a special-diagnosis-history who
* have the logged in HCP as a DHCP and whose medications are going to
* expire within seven days.
*
* @param hcpMID The MID of the logged in HCP
* @return A list of patients satisfying the conditions.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-1009:1016
/*** Returns all patients with names "LIKE" (as in SQL) the passed in parameters.
*
* @param first The patient's first name.
* @param last The patient's last name.
* @return A java.util.List of PatientBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-1042:1049
/*** Returns all patients with names "LIKE" with wildcards (as in SQL) the passed in parameters.
*
* @param first The patient's first name.
* @param last The patient's last name.
* @return A java.util.List of PatientBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-1076:1081
/*** Returns all patients with the given MID as a substring in their MID
* @param MID the patients MID
* @return list of patients with that MID as a substring
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-1106:1110
/*** Allows a patient to add a designated nutritionist. Only
* the designated nutritionist will be able to view the patient's
* nutritional information.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-1130:1133
/*** Returns the ID of the designated nutritionist for the patient
* returns -1 if the patient does not have a designated nutritionist
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-1145:1145
//if it has a next one

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-1159:1162
/*** Updates the designated nutritionist for this patient.
* Assumes that the patient already has a designated nutritionist.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientDAO.java-1183:1186
/*** Deletes the designated nutritionist for this patient.
* Assumes that the patient already has a designated nutritionist
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientInstructionsDAO.java-16:26
/*** Used for managing patient-specific instructions.
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientInstructionsDAO.java-35:40
/*** Get a list of patient instructions for a given office visit.
* @param visitID The id of the office visit to lookup.
* @return The list of patient instructions.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientInstructionsDAO.java-61:66
/*** Add a new patient instructions record.
* @param bean The instructions to add.
* @return The id of the newly added instructions record.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientInstructionsDAO.java-86:91
/*** Edit an existing patient instructions record in the database.
* @param bean The instruction to modify.
* @return The id of the modified instruction.  This will be that same as the id given in the bean itself.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientInstructionsDAO.java-113:117
/*** Remove a patient instructions record from the database.
* @param patientInstructionsID The id of the record to delete.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PatientInstructionsDAO.java-134:139
/*** Get a list of all office visits by a given patient which has patient specific instructions.
* @param pid The patient id to look up.
* @return A list of office visits.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PersonnelDAO.java-22:36
/*** Used for managing information related to personnel: HCPs, UAPs, Admins
*
* DAO stands for Database Access Object.
* All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time).
* For more complex sets of queries, extra DAOs are added.
* DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter
* to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory})
* and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PersonnelDAO.java-43:47
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO,
* 		which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PersonnelDAO.java-54:61
/*** Returns the name for a given MID
*
* @param mid The MID of the personnel in question.
* @return A String representing the name of the personnel.
* @throws ITrustException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PersonnelDAO.java-120:127
/*** Adds an empty personnel, and returns the MID.
*
* @return A long indicating the new MID.
* @param role A {@link Role} enum indicating the personnel's specific role.
* @throws DBException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PersonnelDAO.java-150:157
/*** Retrieves a PersonnelBean with all of the
* specific information for a given employee.
*
* @param mid The MID of the personnel in question.
* @return A PersonnelBean representing the employee.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PersonnelDAO.java-186:191
/*** Updates the demographics for a personnel.
*
* @param p The personnel bean with the updated information.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PersonnelDAO.java-212:218
/*** Indicates whether a certain personnel is in the database.
*
* @param pid The MID of the personnel in question.
* @return A boolean indicating whether this personnel exists.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PersonnelDAO.java-240:246
/*** Returns all of the hospitals this LHCP is associated with.
*
* @param mid The MID of the personnel in question.
* @return A java.util.List of HospitalBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PersonnelDAO.java-268:274
/*** Returns all of the hospitals this uap's associated hcp is associated with.
*
* @param mid The MID of the personnel in question.
* @return A java.util.List of HospitalBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PersonnelDAO.java-298:305
/*** Returns all personnel of specified specialty from the specified hospital.
*
* @param hosid, the ID of the Hospital to get personnel from
* @param specialty, the type of specialty to search for
* @return A java.util.List of PersonnelBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PersonnelDAO.java-321:321
//NOTE: There is a possible NullPointerException Threat here!

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PersonnelDAO.java-334:341
/*** Returns all personnel of specified specialty from the specified hospital.
*
* @param hosid, the ID of the Hospital to get personnel from
* @param specialty, the type of specialty to search for
* @return A java.util.List of PersonnelBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PersonnelDAO.java-363:368
/*** Returns all personnel in the database.
*
* @return A java.util.List of personnel.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PersonnelDAO.java-388:394
/*** Returns a list of UAPs who work for this LHCP.
*
* @param hcpid The MID of the personnel in question.
* @return A java.util.List of UAPs.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PersonnelDAO.java-415:425
/*** Given a prescription that has been given,
* this method returns all the information for the
* doctor who authorized that prescription.
*
* @param prescription The PrescriptionBean
* 		describing the prescription in question.
* @return The PersonnelBean describing
* 		the doctor who authorized it.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PersonnelDAO.java-446:454
/*** Matches all personnel who have names LIKE (as in SQL)
* the first and last names passed in.
*
* @param first The first name to be searched for.
* @param last The last name to be searched for.
* @return A java.util.List of personnel who match these names.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PersonnelDAO.java-484:488
/*** Returns list of personnel who are Lab Techs.
* @return List of personnel beans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PersonnelDAO.java-511:518
/*** Returns all experts with names "LIKE" with wildcards (as in SQL) the passed in parameters.
*
* @param first The expert's first name.
* @param last The expert's last name.
* @return A java.util.List of ExpertBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PersonnelDAO.java-545:547
/*** Returns all of the personnel who have a specialty of nutritionist
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PersonnelDAO.java-568:572
/*** Returns all of the personnel who have a specialty of ophthalmologist or optometrist
* @return List of all personnel who have a specialty of ophthalmologist or optometrist.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PreExistingConditionsDAO.java-15:18
/*** Adds pre-existing conditions to a database and returns a list of conditions by MID
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PreExistingConditionsDAO.java-20:22
/*** The max length of the field
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PreExistingConditionsDAO.java-26:31
/*** Validates that a string is plaintext only
* Matches regex [a-zA-Z0-9\-_ ]+ for up to the max string length
* @param input The input string to validate
* @return Whether the string is valid or not
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PreExistingConditionsDAO.java-38:41
/*** Creates a new DAO interface to the pre-existing conditions table
* @param factory The DAO factory to connect to
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PreExistingConditionsDAO.java-46:50
/*** Gets all pre-existing conditions by MID
* @return a list of pre-existing conditions for a patient
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PreExistingConditionsDAO.java-73:78
/*** Tries to add a condition to the table of existing conditions
* @param mid The patient ID to add the condition for
* @param condition The string of the condition to add
* @return A message of whether it was successfully added or not
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PrescriptionOverrideDAO.java-1:3
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PrescriptionOverrideDAO.java-17:30
/*** Used for managing prescriptions given during a particular office visit.
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PrescriptionOverrideDAO.java-59:64
/*** Adds a prescription bean to the database.
* @param pres The prescription bean to be added.
* @return The unique ID of the newly added bean.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PrescriptionOverrideDAO.java-88:93
/*** Removes the given medication from its office visit
*
* @param ovMedicationID The unique ID of the medication to be removed.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PrescriptionReportDAO.java-23:32
/*** Returns a list of information related to prescription reports given all of the office visits and the
* patient ID. The patient ID is necessary in case the office visit IDs are for different patients (the
* disambiguation is for security reasons).
*
* @param ovIDs A java.util.List of Longs for the office visits.
* @param patientID A long representing the MID of the patient in question.
* @return A java.util.List of prescription reports.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PrescriptionReportDAO.java-64:73
/*** Returns a list of information related to prescription reports given all of the office visits and the
* patient ID. The patient ID is necessary in case the office visit IDs are for different patients (the
* disambiguation is for security reasons).
*
* @param ovIDs A java.util.List of Longs for the office visits.
* @param patientID A long representing the MID of the patient in question.
* @return A java.util.List of prescription reports.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PrescriptionsDAO.java-1:3
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PrescriptionsDAO.java-18:31
/*** Used for managing prescriptions given during a particular office visit.
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PrescriptionsDAO.java-59:64
/*** Adds a prescription bean to the database.
* @param pres The prescription bean to be added.
* @return The unique ID of the newly added bean.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PrescriptionsDAO.java-87:93
/*** Edits an existing prescription bean.
*
* @param pres The newly updated prescription bean.
* @return A long indicating the ID of the newly updated prescription bean.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\PrescriptionsDAO.java-115:120
/*** Removes the given medication from its office visit
*
* @param ovMedicationID The unique ID of the medication to be removed.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ProceduresDAO.java-14:27
/*** Used for managing medical procedures given during a particular office visit.
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ProceduresDAO.java-32:34
/*** @param factory
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ProceduresDAO.java-40:45
/*** List procedure bean in database
* @param visitID
* @return procedure
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ProceduresDAO.java-67:71
/*** @param visitID
* @return list of inmmunization
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ProceduresDAO.java-115:120
/*** Adds a diagnosis bean to the database.
* @param pres The prescription bean to be added.
* @return The unique ID of the newly added bean.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ProceduresDAO.java-142:148
/*** Edits an existing procedure bean.
*
* @param pres The newly updated prescription bean.
* @return A long indicating the ID of the newly updated prescription bean.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ProceduresDAO.java-171:176
/*** Removes the given medication from its office visit
*
* @param ovMedicationID The unique ID of the medication to be removed.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RecordsReleaseDAO.java-40:40
//If the records release bean was inserted properly return true

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RecordsReleaseDAO.java-43:43
//Otherwise return false

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RecordsReleaseDAO.java-64:64
//If the records release bean was updated properly return true

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RecordsReleaseDAO.java-67:67
//Otherwise return false

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RecordsReleaseDAO.java-80:80
//Get the first and only records release bean

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-19:30
/*** Used to update referrals, and fetch lists of referrals sent to and
* from HCPs.
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-37:40
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-47:52
/*** Get all referrals associated with a particular office visit.
* @param ovid The office visit id.
* @return A list of ReferralBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-75:80
/*** Gets a list of all referrals sent from an HCP
* @param mid The HCP's mid.
* @return The list of the referrals they sent.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-104:109
/*** Get a specific referral.
* @param id The id of the referral to retrieve.
* @return A ReferralBean.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-137:143
/*** Set referral message.
* @param messageID messageID
* @param referralID referralID
* @return A ReferralBean.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-164:169
/*** Set referral message.
* @param messageID messageID
* @return A ReferralBean.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-197:202
/*** Gets a list of all referrals sent to an HCP
* @param mid The HCP's mid.
* @return The list of the referrals sent to them.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-226:231
/*** Gets a list of all referrals a HCP has received
* @param mid The patients's mid.
* @return The list of the referrals they received.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-253:258
/*** Gets a list of all referrals sent to a patient.
* @param mid The patients's mid.
* @return The list of the referrals they received.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-280:285
/*** Gets a list of all referrals sent to a patient
* @param mid The patients's mid.
* @return The list of the referrals they received that were unread.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-307:312
/*** Gets a list of all referrals sent to a patient
* @param mid The patients's mid.
* @return The list of the referrals they received that were unread.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-334:338
/*** Updates a given referral in the database.
* @param r The referral to update.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-358:363
/*** Adds a given referral to the database.
* @param r The referral to add.
* @return DBUtil
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-384:389
/*** Removes the given referral.
*
* @param id The unique ID of the referral to be removed.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-408:412
/*** An abstract class that encapsulates a sorted query of referrals.
* Derived classes provide the user id which all retrieved referrals will
* contain.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-419:423
/*** Create a new ReferralListQuery object.
* @param factory factory
* @param userid userid
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-427:427
// initialize lookup map

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-436:444
/*** Perform the query.
*
* @param sortField The pseudo-field name in which to sort.
* @param dir The direction of the desired sort (ascending or
* 			  descending)
* @return A list of VerboseReferralBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-487:495
/*** Perform the query.
*
* @param sortField The pseudo-field name in which to sort.
* @param dir The direction of the desired sort (ascending or
* 			  descending)
* @return A list of VerboseReferralBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-501:507
/*** Get the name of the user pseudo-field which is used to limit the
* query.  Only referrals where this field equals a specific user id
* will be returned.  This must be overridden by derived classes.
*
* @return The user field as a string.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-510:513
/*** getUserId
* @return long
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-516:522
/*** Builds the sort portion of the SQL query (i.e. the ORDER BY... portion).
*
* @param sortField The pseudo-field to sort on.
* @param dir The sort direction.
* @return A string which can be a part of an SQL query.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-529:531
/*** Concrete ReferralListQuery for accessing an HCPs sent referrals.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-534:538
/*** SenderReferralListQuery
* @param factory factory
* @param userid userid
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-549:551
/*** Concrete ReferralListQuery for accessing an HCPs received referrals.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-554:558
/*** ReceiverReferralListQuery
* @param factory factory
* @param userid userid
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-569:571
/*** Concrete ReferralListQuery for accessing a patients referrals.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-574:578
/*** PatientReferralListQuery
* @param factory factory
* @param userid userid
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-589:593
/*** Get a referral query for a sending HCP.
* @param mid The HCP id.
* @return A ReferralListQuery object.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-598:602
/*** Get a referral query for a receiving HCP.
* @param mid The HCP id.
* @return A ReferralListQuery object.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReferralDAO.java-607:611
/*** Get a referral query for a patient.
* @param pid pid
* @return A ReferralListQuery object.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RemoteMonitoringDAO.java-22:36
/*** Used for the keeping track of remote monitoring data.
*
* DAO stands for Database Access Object.
* All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time).
* For more complex sets of queries, extra DAOs are added.
* DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter
* to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory})
* and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RemoteMonitoringDAO.java-44:48
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO,
* 		which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RemoteMonitoringDAO.java-53:59
/*** Return remote monitoring list data for a given patient.
*
* @param patientMID Patient to retrieve data for.
* @return List of TelemedicineBeans
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RemoteMonitoringDAO.java-82:87
/*** Returns patient data for a given HCP
* @param loggedInMID loggedInMID
* @return dataList
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RemoteMonitoringDAO.java-111:111
//Go through all patients and remove any that aren't monitored by this HCP

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RemoteMonitoringDAO.java-119:119
//Add values in patient list with no data for today to list.

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RemoteMonitoringDAO.java-143:150
/*** getPatientDataByDate
* @param patientMID patientMID
* @param lower lower
* @param upper upeer
* @return dataList
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RemoteMonitoringDAO.java-159:159
// add 1 day's worth to include the upper

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RemoteMonitoringDAO.java-174:181
/*** Get the requested type of data for the specified patient.
*
* @param patientMID The MID of the patient
* @param dataType The type of telemedicine data to return
* @return A list of beans which all contain information of the requested type
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RemoteMonitoringDAO.java-203:215
/*** Store pedometer reading and height/weight data for a given patient
* in the RemoteMonitoringData table
*
* @param patientMID The MID of the patient
* @param bean bean
* @param height The height of the patient
* @param weight The weight of the patient
* @param reporterRole  The role of the person
* 		that reported these monitoring stats
* @param reporterMID  The MID of the person that reported these monitoring stats
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RemoteMonitoringDAO.java-273:280
/*** Private method to get the number of entries for a
* certain patientID and a certain data type for today.
* @param patientMID
* @param dataType
* @return the number of entries
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RemoteMonitoringDAO.java-303:308
/*** validatePR
* @param representativeMID representativeMID
* @param patientMID patientMID
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RemoteMonitoringDAO.java-336:341
/*** Show the list of HCPs monitoring this patient
*
* @param patientMID The MID of the patient
* @return list of HCPs monitoring the provided patient
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RemoteMonitoringDAO.java-365:373
/*** Add a patient to the list of HCPs' monitoring lists of Patients
*
* @param patientMID The MID of the patient
* @param HCPMID The MID of the HCP
* @param tBean The TelemedicineBean indicating
* what telemedicine data the patient is allowed to enter.
* @return true if added successfully, false if already in list
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RemoteMonitoringDAO.java-416:422
/*** Remove a patient from the list of HCPs' monitoring lists of Patients
*
* @param patientMID The MID of the patient
* @param HCPMID The MID of the HCP
* @return true if removed successfully, false if not in list
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReportRequestDAO.java-15:29
/*** Used for handling data related to report requests.
*
* DAO stands for Database Access Object.
* All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time).
* For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter
* to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory})
* and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReportRequestDAO.java-35:39
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO,
* 		which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReportRequestDAO.java-45:51
/*** Returns a full bean describing a given report request.
*
* @param id The unique ID of the bean in the database.
* @return The bean describing this report request.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReportRequestDAO.java-75:81
/*** Returns all report requests associated with a given requester.
*
* @param mid The MID of the personnel in question.
* @return A java.util.List of report requests.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReportRequestDAO.java-105:111
/*** Returns all of the report requests associated with a specific patient.
*
* @param pid The MID of the patient in question.
* @return A java.util.List of report requests.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReportRequestDAO.java-135:143
/*** Adds a request for a report.
*
* @param requesterMID The MID of the requester.
* @param patientMID The MID of the patient in question.
* @param date The date the request was made.
* @return A long of the unique ID of the report request.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReportRequestDAO.java-166:172
/*** Sets the status of a report request to 'Viewed'
*
* @param ID The unique ID of the request in question.
* @param date The date the request was viewed.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RequiredProceduresDAO.java-21:25
/*** DAO object that interacts with the requiredprocedures database table.
* The requiredprocedures table contains information about each of the procedures
* that is required in order for a patient to enroll in public school, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RequiredProceduresDAO.java-28:28
/** Factory to create DAO objects */

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RequiredProceduresDAO.java-30:30
/** Bean loaders for all beans used */

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RequiredProceduresDAO.java-34:34
/** DAO for interacting with diagnoses databases */

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RequiredProceduresDAO.java-37:41
/*** Creates a new DAO to interact with the requredprocedures database table.
*
* @param factory DAOFactory that creates database objects.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RequiredProceduresDAO.java-47:52
/*** Returns a list of all procedures that a specified patient has had.
* @param pid PID of the patient
* @return list of all procedures performed
* @throws DBException if the database is not valid
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RequiredProceduresDAO.java-77:84
/*** Returns a list of all required procedures for the specified age group
* (0 for kindergarten, 1 for sixth grade, and 2 for college aged patients).
* @param pid PID of the patient
* @param ageGroup numeric value that represents the age group of the patient
* @return list of all required procedures
* @throws DBException if the database is not valid
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RequiredProceduresDAO.java-106:113
/*** Returns a list of all required procedures for the specified age group that
* the specified patient has not yet received.
* @param pid PID of the patient
* @param ageGroup 0 if the patient is in kindergarten, 1 if sixth grade, 2 if college aged
* @return list of all needed procedures
* @throws DBException if the database is not valid
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RequiredProceduresDAO.java-116:116
//Get a list of all required immunizations that the patient does not yet have.

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RequiredProceduresDAO.java-133:133
//Get a list of all appropriate diagnoses

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReviewsDAO.java-15:18
/*** Provide a way to handle database queries for the reviews table,
* store HCP review information.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReviewsDAO.java-23:26
/*** The basic constructor for the ReviewsDAO object.
* @param factory DAOFactory entry param
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReviewsDAO.java-34:40
/*** Based on the information from the ReviewsBean, add
* a review for an HCP (given by HCP in the bean) into the reviews table.
* @param bean containing the rating
* @return true if the review was added successfully and false otherwise
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReviewsDAO.java-60:66
/*** Get a list of all reviews for a given HCP with id matching
* input param pid.
* @param pid ID of the HCP whose reviews to return
* @return list of all reviews, null if there aren't any
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReviewsDAO.java-87:93
/*** Get a list of all reviews for a given HCP with id matching
* input param pid.
* @param pid ID of the HCP whose reviews to return
* @return list of all reviews, null if there aren't any
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReviewsDAO.java-113:119
/*** Get a list of all reviews for a given HCP with id matching
* input param pid.
* @param pid ID of the HCP whose reviews to return
* @return list of all reviews, null if there aren't any
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReviewsDAO.java-140:145
/*** Get average rating for the given HCP overall, all categories and all reviews.
* @param pid HCP with ratings wanted
* @return the average rating of all the overall ratings
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ReviewsDAO.java-175:183
/*** This checks the appointment table in the DB to see if the there is an appointment entry
* for the input mid(patient_id) and pid(doctor_id) params.
* It returns true if the patient has seen the given doctor, false otherwise.
* @param mid Patient ID
* @param pid HCP ID
* @return true if the patient has had an appointment with the HCP, false otherwise
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RiskDAO.java-12:26
/*** Used for finding risk factors for a given patient.
*
* DAO stands for Database Access Object.
* All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time).
* For more complex sets of queries, extra DAOs are added.
* DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter
* to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory})
* and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RiskDAO.java-31:35
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO,
* 		which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RiskDAO.java-40:54
/*** This method is implemented using {@link FamilyDAO} for 2 reasons:
* (a) definitions of family members might change,
* so it's better to centralize that code and
* (2) to make this code a little bit "nicer"
* even though it executes one query per family member.
* If this method gets slow, then you will need to
* refactor. Otherwise, let's just keep it simple...
*
* @param patientID The MID of the patient in question.
* @param icdLower A double of the lower bound for the codes.
* @param icdUpper A double of the upper bound for the codes.
* @return A boolean indicating whether a family member had a match in this range.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RiskDAO.java-73:80
/*** Returns whether or not a patient had a childhood infection for the exact, given ICD codes.
*
* @param patientID The MID of the patient in question.
* @param icdCodes A parameter list of the ICD codes to match.
* @return A boolean indicating whether this patient had all the listed ICD codes.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RiskDAO.java-82:82
// Note the datediff call - this is a MySQL function

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RiskDAO.java-83:83
// that takes the difference between two dates

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RiskDAO.java-84:84
// and returns that value in terms of days.

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RiskDAO.java-85:85
// 6570 days is 18 years (not counting leap years)

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RiskDAO.java-124:130
/*** Returns if the patient has ever smoked in their life
*
* @param patientID The MID of the patient in question.
* @return A boolean indicating whether the patient smoked.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\RiskDAO.java-150:159
/*** Returns if a patient has ever been diagnosed
* with the given ICD code, in the range [lower,upper)
*
* @param patientID The MID of the patient in question.
* @param lowerICDCode A double of the lower ICD code.
* @param upperICDCode A double of the upper ICD code.
* @return A boolean indicating whether there was a match in the given range.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\SleepEntryDAO.java-17:22
/*** SleepEntryDAO.java Version 1 4/6/2015 Copyright notice: none
*
* Responsible for loading the entries in a patient's sleep diary, the totals
* a patient has slept, and adding a new entry to a patient's sleep diary
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\SleepEntryDAO.java-27:32
/*** Basic constructor
*
* @param factory
*            the factory to use for getting connections
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\SleepEntryDAO.java-38:46
/*** Returns all of the entries in the Sleep Entry table that contain the
* ID of the patient.
*
* @param patientMID
*            which patient to select Sleep Diary for
* @return the list of all of that patient's sleep entries
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\SleepEntryDAO.java-70:80
/*** Returns the total hours slept for each day in the sleep
* diary. The total just sums up the values for each individual sleep
* entry.
*
* @param patientMID
*            patient whose sleep diary we want
* @return a list in descending order of date (dates closest to today first)
*         of the totals slept on each day for a patient
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\SleepEntryDAO.java-109:115
/*** Adds a sleep entry to a patient's sleep diary
*
* @param sleepEntry
*            the entry to add
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\SleepEntryDAO.java-138:145
/*** Queries the db to find the highest sleep entry id currently in use and
* then returns the next number so it can be used for a new sleep entry.
*
* @return the next id available for a sleep entry
* @throws DBException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\SleepEntryDAO.java-170:183
/*** Deletes the sleep entry from the sleep diary that has the same
* unique id as the one passed in. Returns the count of the number of rows
* affected. The number of rows affected should never be more than 1. The
* patientMID is included to try to ensure that users cannot delete sleep
* diary entries that belong to users other than themselves.
*
* @param entryID
*            which sleep entry to delete
* @param patientMID
*            the owner of this sleep entry
* @return how many entries were deleted from the sleep diary
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\SleepEntryDAO.java-203:218
/*** Updates a particular sleep entry with the new data. Neither the
* entryid nor the patientid will ever change, so there is no reason to
* include them as possibilities to change. It includes the patientMID in an
* attempt to ensure that patients can only update their own previous
* sleep entries.
*
* @param entryID
*            the sleep entry to update
* @param patientMID
*            who the patient is making this update
* @param sleepEntry
*            the edited form of the sleep entry
* @return the number of rows updated (should never be more than 1)
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\SleepEntryDAO.java-249:262
/*** Returns the entries in the Sleep Entry table that are within a
* specified date range.
*
* @param lower
*            the lower date
* @param upper
*            the lower date
* @param patientMID
*            which patient to select Sleep Diary for
*
* @return the list of sleep entries between the two dates
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\SleepEntryDAO.java-275:275
// Convert java.util.Date to java.sql.Date

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\SleepEntryDAO.java-295:309
/*** Returns the total hours and calories burned of each day in the sleep
* diary that falls between the two given dates. The total just sums up the
* values for each individual sleep entry.
*
* @param lower
*            the lower date
* @param upper
*            the lower date
* @param patientMID
*            which patient to select Sleep Diary for
*
* @return the list of sleep entries between the two dates
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\SleepEntryDAO.java-323:323
// Add params

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\SleepEntryDAO.java-325:325
// Convert java.util.Date to java.sql.Date

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\SurveyDAO.java-14:24
/*** A DAO for handling all Survey data.
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\SurveyDAO.java-29:32
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\SurveyDAO.java-38:42
/*** Insert survey data into database.
* @param surveyBean The Bean representing the user's responses which will be inserted.
* @param date The date the survey was completed.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\SurveyDAO.java-90:97
/*** Gets survey data from the database by the office visit id. Creates an instance of an
* SurveyBean with data and returns it.
*
* @param id The unique ID of the survey in question.
* @return A bean containing the SurveyBean.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\SurveyDAO.java-121:127
/*** Has this survey been completed?
*
* @param visitID The unique ID of the office visit we are wondering about.
* @return boolean indicating whether this survey is completed.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\SurveyResultDAO.java-13:23
/*** A DAO for handling all Survey results.
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\SurveyResultDAO.java-28:31
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\SurveyResultDAO.java-37:44
/*** Returns all the survey results in the database that correspond to a particular zip code.
*
* @param zip The zipcode we are interested in as a String.
* @param specialty The specialty we are interested in as a String.
* @return A java.util.List of SurveyResultBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\SurveyResultDAO.java-91:98
/*** Returns all the survey data associated with a given hospital and a certain specialty.
*
* @param hospitalID The unique ID of the iTrust hospital we are querying about.
* @param specialty A string representing the specialty we are interested in.
* @return A java.util.List of SurveyResultBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\TransactionDAO.java-19:32
/*** Used for the logging mechanism.
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\TransactionDAO.java-38:41
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\TransactionDAO.java-46:51
/*** Returns the whole transaction log
*
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\TransactionDAO.java-71:80
/*** Log a transaction, with all of the info. The meaning of secondaryMID and addedInfo changes depending on
* the transaction type.
*
* @param type The {@link TransactionType} enum representing the type this transaction is.
* @param loggedInMID The MID of the user who is logged in.
* @param secondaryMID Typically, the MID of the user who is being acted upon.
* @param addedInfo A note about a subtransaction, or specifics of this transaction (for posterity).
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\TransactionDAO.java-103:109
/*** Return a list of all transactions in which an HCP accessed the given patient's record
*
* @param patientID The MID of the patient in question.
* @return A java.util.List of transactions.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\TransactionDAO.java-137:145
/*** The Most Thorough Fetch
* @param mid MID of the logged in user
* @param dlhcpID MID of the user's DLHCP
* @param start Index to start pulling entries from
* @param range Number of entries to retrieve
* @return List of <range> TransactionBeans affecting the user starting from the <start>th entry
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\TransactionDAO.java-180:188
/*** Return a list of all transactions in which an HCP accessed the given patient's record, within the dates
*
* @param patientID The MID of the patient in question.
* @param lower The starting date as a java.util.Date
* @param upper The ending date as a java.util.Date
* @return A java.util.List of transactions.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\TransactionDAO.java-203:203
// add 1 day's worth to include the upper

iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\TransactionDAO.java-221:226
/*** Returns the operation profile
*
* @return The OperationalProfile as a bean.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\TransactionDAO.java-249:256
/***
* @param tbList
* @param patientID
* @param sortByRole
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\VisitRemindersDAO.java-17:30
/*** Used for queries related to patient reminders
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\VisitRemindersDAO.java-34:37
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\VisitRemindersDAO.java-42:47
/*** Returns a list of patients associated with a given HCP.
*
* @param hcpid The MID of the HCP in question.
* @return A java.util.List of Visit Reminder Forms.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\VisitRemindersDAO.java-101:109
/*** Returns a list of patients who need a visit for this HCP. This means:
*
* Alive patient, no office visit for > 1 yr, diagnosed: - Diabetes: 250.xx - Asthma: 493.xx -
* Circulatory-System Disease: [ 390.00 , 459.99 ]
*
* @param hcpid The MID of the HCP in question.
* @return A java.util.List of visit reminders.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\VisitRemindersDAO.java-202:217
/*** Returns a list of old people who need a flu shot
*
* CURRENT SPEC: Alive patient, over 50 years old, no flu shot - 90656, 90658, 90660 a) during the months
* 09 - 12 of current calendar year if in 09 - 12 b) during the months 09 - 12 of last calendar year if
* not in 09 - 12
*
* Determines current date and calls one of two private methods these methods return different sets of
* people - a: people who haven't had a flu shot yet this year and need one - b: people who missed last
* year's flu shot and need a check-up
*
* @return A java.util.List of Visit Reminder Forms.
* @param hcpid The MID of the HCP in question.
* @param patientBirthday The birthday of the patient in question.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\VisitRemindersDAO.java-223:226
/** Fall 2007 Bug Fix: Use the correct range for a zero-based calendar (eg January is 0)
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\WardDAO.java-20:32
/*** Used for managing Wards
*
* DAO stands for Database Access Object. All DAOs are intended to be reflections of the database, that is,
* one DAO per table in the database (most of the time). For more complex sets of queries, extra DAOs are
* added. DAOs can assume that all data has been validated and is correct.
*
* DAOs should never have setters or any other parameter to the constructor than a factory. All DAOs should be
* accessed by DAOFactory (@see {@link DAOFactory}) and every DAO should have a factory - for obtaining JDBC
* connections and/or accessing other DAOs.
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\WardDAO.java-42:45
/*** The typical constructor.
* @param factory The {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\WardDAO.java-51:57
/*** Returns a list of all wards under a hospital sorted alphabetically
*
* @param id The ID of the hospital to get wards from
* @return A java.util.List of WardBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\WardDAO.java-78:85
/*** Adds a Ward
*
* @param ward The WardBean object to insert.
* @return A boolean indicating whether the insertion was successful.
* @throws DBException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\WardDAO.java-107:113
/*** Updates a particular ward's information. Returns the number of rows affected (should be 1)
*
* @param ward The WardBean to update.
* @return An int indicating the number of affected rows.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\WardDAO.java-134:140
/*** Removes a ward from a hospital. Returns whether or not any changes were made
*
* @param id The WardId of the Ward to remove.
* @return A boolean indicating success.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\WardDAO.java-160:166
/*** Returns a list of all wardrooms under a ward sorted alphabetically
*
* @param id The id of the ward to get all rooms for
* @return A java.util.List of all WardRoomBeans in a ward.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\WardDAO.java-187:194
/*** Adds a WardRoom
*
* @param wardRoom The WardRoomBean object to insert.
* @return A boolean indicating whether the insertion was successful.
* @throws DBException
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\WardDAO.java-217:223
/*** Updates a particular wardroom's information. Returns the number of rows affected (should be 1)
*
* @param wardRoom The WardRoomBean to update.
* @return An int indicating the number of affected rows.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\WardDAO.java-245:251
/*** Removes a room from a ward. Returns whether or not any changes were made
*
* @param id The RoomId of the Room to remove.
* @return A boolean indicating success.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\WardDAO.java-270:276
/*** Returns a list of all wards assigned to a HCP sorted alphabetically
*
* @param id The id of the HCP to get wards for
* @return A java.util.List of all WardBeans.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\WardDAO.java-298:304
/*** Returns a list of all HCPs assigned to a ward sorted alphabetically
*
* @param id The id of the ward to get HCPs for
* @return A java.util.List of PersonnelBean that represent the HCPs assigned to a ward.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\WardDAO.java-325:332
/*** Assigns an HCP to a the specified ward.
*
* @param hcpID The id of the HCP to assign
* @param wardID The ward to assign the HCP to.
* @return A boolean whether or not the insert worked correctly.
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\WardDAO.java-355:362
/*** Removes a HCP and Ward association
*
* @param wardID The Ward ID of the Ward associated to the HCP.
* @param hcpID The HCP ID of the HCP associated with the Ward.
* @return A boolean indicating success.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\WardDAO.java-382:388
/*** Updates a particular wardroom's occupiedBy information. Returns the number of rows affected (should be 1)
*
* @param wardRoom The WardRoomBean to update.
* @return An int indicating the number of affected rows.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\WardDAO.java-413:420
/*** Returns a list of all wards with the status specified that the hcp has access to
*
* @param status  The Status to search on
* @param hcpID The id of the HCP to get wards for
* @return A java.util.List of WardRoomBeans that the specified hcp has access too.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\WardDAO.java-442:448
/*** Returns a WardRoom specified by the id
*
* @param wardRoomID The id of the ward room to get
* @return A WardRoomBean with the ID specified
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\WardDAO.java-475:481
/*** Returns a Ward specified by the id
*
* @param wardID The id of the ward to get
* @return A WardBean with the ID specified
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\WardDAO.java-508:514
/*** Returns the hospital that the specified ward room is located in
*
* @param wardRoomID The id of the ward room to get the hospital for
* @return The HospitalBean that the specified ward room is located in.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\WardDAO.java-541:548
/*** Logs the checkout reason for a patient
*
* @param mid The mid of the Patient checking out
* @param reason The reason the patient is being checked out.
* @return Whether 1 patient was inserted
* @throws ITrustException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\WardDAO.java-568:574
/*** Returns the hospital that the specified user is located in
*
* @param pid The id of the user to get the hospital for
* @return The HospitalBean that the specified patient is located in.
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ZipCodeDAO.java-14:16
/*** DAO for the Zip Code table
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\mysql\ZipCodeDAO.java-26:31
/*** Returns the zip code bean for a particular zip code.
* @param zipCode
* @return
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\ProductionConnectionDriver.java-10:16
/*** Produces the JDBC connection from Tomcat's JDBC connection pool (defined in context.xml). Produces and
* exception when running the unit tests because they're not being run through Tomcat.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\dao\ProductionConnectionDriver.java-20:20
// In production situations

iTrust_v21\src\edu\ncsu\csc\itrust\dao\ProductionConnectionDriver.java-24:24
// For our special unit test - do not use unless you know what you are doing

iTrust_v21\src\edu\ncsu\csc\itrust\DateUtil.java-8:13
/*** Provides a few extra date utilities
*
*  :)
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\DateUtil.java-17:22
/*** Returns a MM/dd/yyyy format of the date for the given years ago
*
* @param years
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\DateUtil.java-29:44
/*** Checks to see if a given date is within a range of months <strong>INCLUSIVELY</strong>, agnostic of
* the year. <br />
* <br />
*
* The range "wraps" so that if the first month is after the second month, then the definition of "is in
* month range" is:<br />
* the date falls outside of secondMonth, firstMonth, but including secondMonth and firstMonth.
*
* Modular arithmetic is used to adjust month values into the valid range.
*
* @param date
* @param firstMonth
* @param secondMonth
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\DateUtil.java-56:63
/*** Same as isInMonthRange but uses the current date as the date value.
*
* @see DateUtil#isInMonthRange(Date, int, int)
* @param firstMonth
* @param secondMonth
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\DateUtil.java-68:72
/*** Returns the date a certain number of years ago
* @param years how many years ago
* @return the date it was however many years ago
*/


iTrust_v21\src\edu\ncsu\csc\itrust\DateUtil.java-79:83
/*** Returns the date a certain number of years ago
* @param years how many years ago
* @return the date it was however many years ago
*/


iTrust_v21\src\edu\ncsu\csc\itrust\DateUtil.java-88:92
/*** Returns the date a certain number of days ago
* @param days how many days ago
* @return the date it was however many days ago
*/


iTrust_v21\src\edu\ncsu\csc\itrust\DateUtil.java-99:103
/*** Returns the date a certain number of days ago
* @param days how many days ago
* @return the date it was however many days ago
*/


iTrust_v21\src\edu\ncsu\csc\itrust\DateUtil.java-108:123
/*** <!--Pass in INSTANTIATED sql date objects and they will be set to the specified range, ie, FROM
* <current year> - yearsAgo1/monthValue1/01 TO <current year> - yearsAgo2/monthValue2/<last day of
* month2>--> Pass in INSTANTIATED sql date objects and they will be set to the specified range, ie, FROM
* &lt;current year&gt; - yearsAgo1/monthValue1/01 TO &lt;current year&gt; -
* yearsAgo2/monthValue2/&lt;last day of month2&gt;
*
* @param month1
*            First sql.Date object to be set
* @param monthValue1
* @param yearsAgo1
* @param month2
*            Second sql.Date object to be set
* @param monthValue2
* @param yearsAgo2
*/


iTrust_v21\src\edu\ncsu\csc\itrust\DBUtil.java-10:15
/*** Provides a few database utilities
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\DBUtil.java-17:21
/*** Used to check if we can actually obtain a connection.
*
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\DBUtil.java-32:37
/*** Close the prepared statement and the connection in a proper way
*
* @param conn
* @param ps
*/


iTrust_v21\src\edu\ncsu\csc\itrust\DBUtil.java-50:62
/*** Returns the last ID that was generated for an auto-increment column. Please note that this does NOT
* cause transaction problems! last_insert_id() returns the last generated ID on a per-connection basis.
* See the MySQL documentation at the following location to confirm this:
* {@link http://dev.mysql.com/doc/refman/5.0/en/getting-unique-id.html}
*
* Don't believe me? see {@link AutoIncrementTest}
*
* @param conn
* @return last generated id
* @throws SQLException
* @throws DBException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\EmailUtil.java-7:12
/*** Sends email to users. Since we don't want to train spammers in 326, this just inserts into a database. If
* we put this into an actual system, we would replace this class with stuff from javax.mail
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\EmailUtil.java-20:20
// DO NOT SEND REAL EMAILS!!!!!

iTrust_v21\src\edu\ncsu\csc\itrust\EmailUtil.java-21:21
// Sending emails - even to a throwaway account, is a waste of bandwidth and looks very suspicious.

iTrust_v21\src\edu\ncsu\csc\itrust\EmailUtil.java-22:22
// If you want to know how to send emails from Java, just Google it on your own time.

iTrust_v21\src\edu\ncsu\csc\itrust\enums\BloodType.java-3:8
/*** All possible blood types
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\Ethnicity.java-3:5
/*** All possible ethnicities represented in iTrust.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\ExerciseType.java-3:8
/*** ExerciseType.java Version 1 4/2/2015 Copyright notice: none
*
* The types of exercise a patient can log.
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\ExerciseType.java-10:10
/** Running, cycling, etc */

iTrust_v21\src\edu\ncsu\csc\itrust\enums\ExerciseType.java-12:12
/** Bench press, curls, etc */

iTrust_v21\src\edu\ncsu\csc\itrust\enums\ExerciseType.java-17:22
/*** Sets the name of the exercise
*
* @param name
*            the name of the exercise
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\ExerciseType.java-27:31
/*** Returns the name of the exercise
*
* @return the name of the exercise
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\ExerciseType.java-36:40
/*** Returns the name of the exercise
*
* @return the name of the exercise
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\ExerciseType.java-45:53
/*** Tries to parse a string into one of the 2 valid exercise types. Throws an
* IllegalArgumentException if the string is not one of the given exercise
* types
*
* @param str
*            the name of the exercise
* @return a ExerciseType with the appropriate name
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\FlagValue.java-3:5
/*** FlagValue is an enum that represents the different flags that exist in iTrust for obstetrics.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\FlagValue.java-7:7
/** Has High Blood Pressure */

iTrust_v21\src\edu\ncsu\csc\itrust\enums\FlagValue.java-9:9
/** Has an advanced maternal age */

iTrust_v21\src\edu\ncsu\csc\itrust\enums\FlagValue.java-11:11
/** Has maternal allergies*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\FlagValue.java-13:13
/** Has low lying placenta */

iTrust_v21\src\edu\ncsu\csc\itrust\enums\FlagValue.java-15:15
/** Has a genetic miscarriage */

iTrust_v21\src\edu\ncsu\csc\itrust\enums\FlagValue.java-17:17
/** Has abnormality */

iTrust_v21\src\edu\ncsu\csc\itrust\enums\FlagValue.java-19:19
/** Has twins */

iTrust_v21\src\edu\ncsu\csc\itrust\enums\FlagValue.java-21:21
/** Has a weight change */

iTrust_v21\src\edu\ncsu\csc\itrust\enums\FlagValue.java-23:23
/** has rh negative blood type */

iTrust_v21\src\edu\ncsu\csc\itrust\enums\FlagValue.java-25:25
/** has preexisting conditions */

iTrust_v21\src\edu\ncsu\csc\itrust\enums\FlagValue.java-31:35
/*** Constructor for a FlagValue that takes a name and id.
* @param name the flag name
* @param id the flag ID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\FlagValue.java-41:46
/*** Custom replacement method for the un-overridable valueOf method.
* Parses non-case sensitive and can use either ID or Name as needed.
* @param idOrName A string, assumed to likely be a match to either ID or name of some FlagValue
* @return The corresponding FlagValue
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\FlagValue.java-53:56
/*** Returns the ID of the flag.
* @return the ID of the flag
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\FlagValue.java-61:64
/*** Returns the string value of the flag.
* @return the string value of the flag
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\Gender.java-3:5
/*** Male or Female.  Not specified is provided as well, for incomplete forms or patient's discretion.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\MealType.java-3:11
/*** MealType.java
* Version 1
* 2/21/2015
* Copyright notice: none
*
* All of the different types of meals that can be entered
* into the food diary.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\MealType.java-13:13
/** Meal was eaten for breakfast */

iTrust_v21\src\edu\ncsu\csc\itrust\enums\MealType.java-15:15
/** Meal was eaten for lunch */

iTrust_v21\src\edu\ncsu\csc\itrust\enums\MealType.java-17:17
/** Meal was eaten as a snack */

iTrust_v21\src\edu\ncsu\csc\itrust\enums\MealType.java-19:19
/** Meal was eaten for dinner */

iTrust_v21\src\edu\ncsu\csc\itrust\enums\MealType.java-24:27
/*** Sets the name of the meal
* @param name the name of the meal
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\MealType.java-32:35
/*** Returns the name of the meal
* @return the name of the meal
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\MealType.java-40:43
/*** Returns the name of the meal
* @return the name of the meal
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\MealType.java-48:54
/*** Tries to parse a string into one of the 4 valid meal types.
* Throws an illegalargumentexception if the string is not one of the
* given meal types
* @param str the name of the meal
* @return a MealType with the appropriate name
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\PrescriptionAlerts.java-3:9
/*** Every prescription that should be alerted for emergency reports - in the future, this should be abstracted
* out to a database table so it can be changed at runtime.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\Role.java-3:6
/*** The iTrust user roles: Patient, ER, HCP, UAP, LT, PHA, Administrator and Tester.
* Consult the requirements for the contextual meanings of these individual choices.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\Role.java-8:8
/**PATIENT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\Role.java-10:10
/**ER*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\Role.java-12:12
/**HCP*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\Role.java-14:14
/**UAP*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\Role.java-16:16
/**LT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\Role.java-18:18
/**ADMIN*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\Role.java-20:20
/**PHA*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\Role.java-22:22
/**TESTER*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\Role.java-29:34
/*** Role
* @param userRolesString userRolesString
* @param dbTable dbTable
* @param midFirstDigit midFirstDigit
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\Role.java-41:44
/*** getDBTable
* @return dbTable
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\Role.java-49:52
/*** getUserRolesString
* @return userRolesString
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\Role.java-57:60
/*** getMidFirstDigit
* @return midFirstDigit
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\Role.java-65:69
/*** parse
* @param str str
* @return role
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\SleepType.java-3:7
/*** SleepType.java Version 1 4/6/2015 Copyright notice: none
*
* The types of sleep a patient can log.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\SleepType.java-15:20
/*** Sets the name of the sleep
*
* @param name
*            the name of the sleep
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\SleepType.java-25:29
/*** Returns the name of the sleep
*
* @return the name of the sleep
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\SleepType.java-34:38
/*** Returns the name of the sleep
*
* @return the name of the sleep
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\SleepType.java-43:51
/*** Tries to parse a string into one of the 2 valid sleep types. Throws an
* IllegalArgumentException if the string is not one of the given sleep
* types
*
* @param str
*            the name of the sleep
* @return a SleepType with the appropriate name
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\SortDirection.java-3:5
/*** Sorting direction.  Used to dynamically build SQL queries.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\State.java-3:8
/*** All of our wonderful states.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\State.java-33:33
// Just to show that this is intentional

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-4:10
/*** All of the possible transaction types, in no particular order, used in producing the operational profile.
* TransactionCode -- identification code
* Description -- basic description of the event
* ActionPhrase -- a patient-centered English sentence describing the action (used in activity feeds)
* PatientViewable -- boolean for if the action will be displayed in the patient activity feed
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-12:12
/**LOGIN_FAILURE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-14:14
/**HOME_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-16:16
/**UNCAUGHT_EXCEPTION*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-18:18
/**GLOBAL_PREFERENCES_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-20:20
/**GLOBAL_PREFERENCES_EDIT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-22:22
/**USER_PREFERENCES_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-24:24
/**USER_PREFERENCES_EDIT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-26:26
/**PATIENT_CREATE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-28:28
/**PATIENT_DISABLE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-30:30
/**PATIENT_DEACTIVATE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-32:32
/**PATIENT_ACTIVATE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-34:34
/**LHCP_CREATE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-36:36
/**LHCP_EDIT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-38:38
/**LHCP_DISABLE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-40:40
/**ER_CREATE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-42:42
/**ER_EDIT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-44:44
/**ER_DISABLE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-46:46
/**PHA_CREATE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-48:48
/**PHA_EDIT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-50:50
/**PHA_DISABLE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-52:52
/**LHCP_ASSIGN_HOSPITAL*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-54:54
/**LHCP_REMOVE_HOSPITAL*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-56:56
/**LT_ASSIGN_HOSPITAL*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-58:58
/**LT_REMOVE_HOSPITAL*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-60:60
/**UAP_CREATE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-62:62
/**UAP_EDIT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-64:64
/**UAP_DISABLE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-66:66
/**PERSONNEL_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-68:68
/**LT_CREATE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-70:70
/**LT_EDIT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-72:72
/**LT_DISABLE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-74:74
/**LOGIN_SUCCESS*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-76:76
/**LOGOUT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-78:78
/**LOGOUT_INACTIVE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-80:80
/**PASSWORD_RESET*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-82:82
/**DEMOGRAPHICS_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-84:84
/**DEMOGRAPHICS_EDIT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-85:85
//Set to false as per the requirements page for UC43 as it is not supposed to be shown for LHCP or DLHCP

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-87:87
/**PATIENT_PHOTO_UPLOAD*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-89:89
/**PATIENT_PHOTO_REMOVE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-91:91
/**DEPEND_DEMOGRAPHICS_EDIT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-93:93
/**LHCP_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-95:95
/**LHCP_DECLARE_DLHCP*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-97:97
/**LHCP_UNDECLARE_DLHCP*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-99:99
/**ACCESS_LOG_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-101:101
/**MEDICAL_RECORD_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-103:103
/**PATIENT_HEALTH_INFORMATION_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-105:105
/**PATIENT_HEALTH_INFORMATION_EDIT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-107:107
/**BASIC_HEALTH_CHARTS_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-109:109
/**OFFICE_VISIT_CREATE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-111:111
/**OFFICE_VISIT_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-113:113
/**OFFICE_VISIT_EDIT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-115:115
/**PRESCRIPTION_ADD*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-117:117
/**PRESCRIPTION_EDIT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-119:119
/**PRESCRIPTION_REMOVE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-121:121
/**LAB_PROCEDURE_ADD*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-123:123
/**LAB_PROCEDURE_EDIT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-125:125
/**LAB_PROCEDURE_REMOVE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-127:127
/**DIAGNOSIS_ADD*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-129:129
/**DIAGNOSIS_REMOVE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-131:131
/**DIAGNOSIS_URL_EDIT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-133:133
/**PROCEDURE_ADD*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-135:135
/**PROCEDURE_EDIT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-137:137
/**PROCEDURE_REMOVE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-139:139
/**IMMUNIZATION_ADD*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-141:141
/**IMMUNIZATION_REMOVE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-143:143
/**OFFICE_VISIT_BILLED*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-145:145
/**OPERATIONAL_PROFILE_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-147:147
/**HEALTH_REPRESENTATIVE_DECLARE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-149:149
/**HEALTH_REPRESENTATIVE_UNDECLARE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-151:151
/**MEDICAL_PROCEDURE_CODE_ADD*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-153:153
/**MEDICAL_PROCEDURE_CODE_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-155:155
/**MEDICAL_PROCEDURE_CODE_EDIT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-157:157
/**IMMUNIZATION_CODE_ADD*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-159:159
/**IMMUNIZATION_CODE_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-161:161
/**IMMUNIZATION_CODE_EDIT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-163:163
/**DIAGNOSIS_CODE_ADD*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-165:165
/**DIAGNOSIS_CODE_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-167:167
/**DIAGNOSIS_CODE_EDIT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-169:169
/**DRUG_CODE_ADD*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-171:171
/**DRUG_CODE_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-173:173
/**DRUG_CODE_EDIT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-175:175
/**DRUG_CODE_REMOVE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-177:177
/**LOINC_CODE_ADD*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-179:179
/**LOINC_CODE_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-181:181
/**LOINC_CODE_EDIT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-183:183
/**LOINC_CODE_FILE_ADD*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-185:185
/**RISK_FACTOR_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-187:187
/**PATIENT_REMINDERS_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-189:189
/**HOSPITAL_LISTING_ADD*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-191:191
/**HOSPITAL_LISTING_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-193:193
/**HOSPITAL_LISTING_EDIT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-195:195
/**PRESCRIPTION_REPORT_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-197:197
/**DEATH_TRENDS_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-199:199
/**EMERGENCY_REPORT_CREATE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-201:201
/**EMERGENCY_REPORT_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-203:203
/**APPOINTMENT_TYPE_ADD*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-205:205
/**APPOINTMENT_TYPE_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-207:207
/**APPOINTMENT_TYPE_EDIT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-209:209
/**APPOINTMENT_ADD*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-211:211
/**APPOINTMENT_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-213:213
/**APPOINTMENT_EDIT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-215:215
/**APPOINTMENT_REMOVE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-217:217
/**APPOINTMENT_ALL_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-219:219
/**APPOINTMENT_CONFLICT_OVERRIDE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-221:221
/**APPOINTMENT_REQUEST_SUBMITTED*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-223:223
/**APPOINTMENT_REQUEST_APPROVED*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-225:225
/**APPOINTMENT_REQUEST_REJECTED*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-227:227
/**APPOINTMENT_REQUEST_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-229:229
/**COMPREHENSIVE_REPORT_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-231:231
/**COMPREHENSIVE_REPORT_ADD*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-233:233
/**SATISFACTION_SURVEY_TAKE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-235:235
/**SATISFACTION_SURVEY_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-237:237
/**LAB_RESULTS_UNASSIGNED*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-239:239
/**LAB_RESULTS_CREATE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-241:241
/**LAB_RESULTS_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-243:243
/**LAB_RESULTS_REASSIGN*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-245:245
/**LAB_RESULTS_REMOVE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-247:247
/**LAB_RESULTS_ADD_COMMENTARY*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-249:249
/**LAB_RESULTS_VIEW_QUEUE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-251:251
/**LAB_RESULTS_RECORD*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-253:253
/**LAB_RESULTS_RECEIVED*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-255:255
/**EMAIL_SEND*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-257:257
/**EMAIL_HISTORY_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-259:259
/**PATIENT_LIST_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-261:261
/**EXPERIENCED_LHCP_FIND*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-263:263
/**MESSAGE_SEND*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-265:265
/**MESSAGE_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-267:267
/**INBOX_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-269:269
/**OUTBOX_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-271:271
/**PATIENT_FIND_LHCP_FOR_RENEWAL*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-273:273
/**EXPIRED_PRESCRIPTION_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-275:275
/**PRECONFIRM_PRESCRIPTION_RENEWAL*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-277:277
/**DIAGNOSES_LIST_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-279:279
/**CONSULTATION_REFERRAL_CREATE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-281:281
/**CONSULTATION_REFERRAL_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-283:283
/**CONSULTATION_REFERRAL_EDIT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-285:285
/**CONSULTATION_REFERRAL_CANCEL*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-287:287
/**PATIENT_LIST_ADD*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-289:289
/**PATIENT_LIST_EDIT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-291:291
/**PATIENT_LIST_REMOVE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-293:293
/**TELEMEDICINE_DATA_REPORT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-295:295
/**TELEMEDICINE_DATA_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-297:297
/**ADVERSE_EVENT_REPORT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-299:299
/**ADVERSE_EVENT_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-301:301
/**ADVERSE_EVENT_REMOVE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-303:303
/**ADVERSE_EVENT_REQUEST_MORE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-305:305
/**ADVERSE_EVENT_CHART_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-307:307
/**OVERRIDE_INTERACTION_WARNING*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-309:309
/**OVERRIDE_CODE_ADD*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-311:311
/**OVERRIDE_CODE_EDIT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-313:313
/**DRUG_INTERACTION_ADD*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-315:315
/**DRUG_INTERACTION_EDIT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-317:317
/**DRUG_INTERACTION_DELETE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-319:319
/**CALENDAR_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-321:321
/**UPCOMING_APPOINTMENTS_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-323:323
/**NOTIFICATIONS_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-325:325
/**ACTIVITY_FEED_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-327:327
/**PATIENT_INSTRUCTIONS_ADD*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-329:329
/**PATIENT_INSTRUCTIONS_EDIT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-331:331
/**PATIENT_INSTRUCTIONS_DELETE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-333:333
/**PATIENT_INSTRUCTIONS_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-335:335
/**DIAGNOSIS_TRENDS_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-337:337
/**DIAGNOSIS_EPIDEMICS_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-339:339
/**GROUP_REPORT_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-341:341
/**FIND_EXPERT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-343:343
/**FIND_EXPERT_ZIP_ERROR*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-345:345
/**PATIENT_ASSIGNED_TO_ROOM*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-347:347
/**PATIENT_REMOVED_FROM_ROOM*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-349:349
/**ROOMS_FULL*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-351:351
/**CREATE_BASIC_HEALTH_METRICS*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-353:353
/**VIEW_BASIC_HEALTH_METRICS*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-355:355
/**EDIT_BASIC_HEALTH_METRICS*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-357:357
/**REMOVE_BASIC_HEALTH_METRICS*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-359:359
/**PATIENT_VIEW_BASIC_HEALTH_METRICS*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-361:361
/**HCP_VIEW_BASIC_HEALTH_METRICSc*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-363:363
/**HCP_VIEW_PERCENTILES_CHART*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-365:365
/**PATIENT_VIEW_PERCENTILES_CHART*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-367:367
/**ADMIN_UPLOAD_CDCMETRICS*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-369:369
/**PASSWORD_CHANGE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-371:371
/**PASSWORD_CHANGE_FAILED*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-373:373
/**IMMUNIZATION_REPORT_PATIENT_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-375:375
/**IMMUNIZATION_REPORT_HCP_VIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-377:377
/**PATIENT_RELEASE_HEALTH_RECORDS*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-379:379
/**PATIENT_VIEW_RELEASE_REQUEST*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-381:381
/**HCP_RELEASE_APPROVAL*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-383:383
/**HCP_RELEASE_DENIAL*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-385:385
/**UAP_RELEASE_APPROVAL*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-387:387
/**UAP_RELEASE_DENIAL*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-389:389
/**HCP_CREATED_DEPENDENT_PATIENT*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-391:391
/**HCP_CHANGE_PATIENT_DEPENDENCY*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-393:393
/**PATIENT_VIEW_DEPENDENT_REQUESTS*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-395:395
/**PATIENT_REQUEST_DEPEDENT_RECORDS*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-397:397
/**PATIENT_VIEWS_BILLS*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-399:399
/**PATIENT_VIEWS_BILL*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-401:401
/**PATIENT_PAYS_BILL*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-403:403
/**PATIENT_SUBMITS_INSURANCE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-405:405
/**UAP_INITIAL_APPROVAL*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-407:407
/**UAP_INITIAL_DENIAL*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-409:409
/**UAP_SECOND_APPORVAL*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-411:411
/**UAP_SECOND_DENIAL*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-413:413
/**PATIENT_RESUBITS_INSURANCE*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-415:415
/**VIEW_EXPERT_SEARCH*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-417:417
/**VIEW_REVIEWS*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-419:419
/**SUBMIT_REVIEW*/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-421:421
/**CREATE_INITIAL_OBSTETRICS_RECORD**/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-423:423
/**VIEW_INITIAL_OBSTETRICS_RECORD**/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-425:425
/**CREATE_INITIAL_OBSTETRICS_RECORD**/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-427:427
/**VIEW_INITIAL_OBSTETRICS_RECORD**/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-429:429
/**VIEW_INITIAL_OBSTETRICS_RECORD**/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-431:431
/**ADD_ALLERGY**/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-434:434
/**Added to the Food Diary **/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-436:436
/**Patient viewed food diary**/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-438:438
/**Nutritionist viewed food diary **/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-440:440
/** Patient edited an entry from their food diary */

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-442:442
/** Patient deleted an entry from their food diary */

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-445:445
/** Patient changed their designated Nutritionist */

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-448:448
/**Added to the Sleep Diary **/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-450:450
/**Patient viewed Sleep diary**/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-452:452
/**HCP viewed Sleep diary **/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-454:454
/** Patient edited an entry from their Sleep diary */

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-456:456
/** Patient deleted an entry from their Sleep diary */

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-459:459
/**Added to the Exercise Diary **/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-461:461
/**Patient viewed Exercise diary**/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-463:463
/**Trainer viewed Exercise diary **/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-465:465
/** Patient edited an entry from their Exercise diary */

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-467:467
/** Patient deleted an entry from their Exercise diary */

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-470:470
/**Added to Labels **/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-472:472
/**Patient edited a Label**/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-474:474
/**Patient deleted a Label **/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-476:476
/**Patient edited a Label**/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-478:478
/**Patient edited a Label**/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-480:480
/**Patient edited a Label**/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-483:483
/**CREATE_OPHTHALMOLOGY_OV**/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-485:485
/**VIEW_OPHTHALMOLOGY_OV**/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-487:487
/**EDIT_OPHTHALMOLOGY_OV**/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-489:489
/**PATIENT_VIEW_OPHTHALMOLOGY_OV**/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-491:491
/**PATIENT_VIEW_DEPENDENT_OPHTHALMOLOGY_OV**/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-494:494
/**CREATE_OPHTHALMOLOGY_SURGERY**/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-496:496
/**VIEW_OPHTHALMOLOGY_SURGERY**/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-498:498
/**EDIT_OPHTHALMOLOGY_SURGERY**/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-500:500
/**PATIENT_VIEW_OPHTHALMOLOGY_SURGERY**/

iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-502:505
/*** This string is used in the SQL statement associated with pulling events for
* display in a patient's Access Log
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-517:519
/*** This string is used in the SQL statement associated with excluding events as specified in UC43
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-536:539
/*** getCode
* @return code
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-544:547
/*** getDescription
* @return description
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-552:555
/*** getActionPhrase
* @return actionPhrase
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-560:563
/*** isPatientViewable
* @return patientView
*/


iTrust_v21\src\edu\ncsu\csc\itrust\enums\TransactionType.java-568:572
/*** parse
* @param code code
* @return type
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\AddPatientFileException.java-3:6
/*** This exception is thrown to indicate any type of error which occurs while
* parsing a CSV file.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\AddPatientFileException.java-8:10
/*** Unique identifier for the exception
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\AddPatientFileException.java-13:15
/*** The error message for the exception
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\AddPatientFileException.java-18:22
/*** Constructor initializing the error message string
*
* @param string The error message string
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\AddPatientFileException.java-27:31
/*** Returns the exception's error message
*
* @return The error message from the exception
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\CSVFormatException.java-3:6
/*** This exception is thrown to indicate any type of error which occurs while
* parsing a CSV file.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\CSVFormatException.java-8:10
/*** Unique identifier for the exception
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\CSVFormatException.java-13:15
/*** The error message for the exception
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\CSVFormatException.java-18:22
/*** Constructor initializing the error message string
*
* @param string The error message string
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\CSVFormatException.java-27:31
/*** Returns the exception's error message
*
* @return The error message from the exception
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\DBException.java-5:13
/*** The reasoning behind this wrapper exception is security. When an SQL Exception gets thrown all the way back
* to the JSP, we begin to reveal details about our database (even knowing that it's MySQL is bad!) So, we
* make a wrapper exception with a vague description, but we also keep track of the SQL Exception for
* debugging and testing purposes.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\DBException.java-23:25
/*** @return The SQL Exception that was responsible for this error.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\ErrorList.java-7:12
/*** Used by the validators to create a list of error messages.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\ErrorList.java-20:24
/*** Adds a message to the list if it's not a Java null or empty string.
*
* @param errorMessage
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\ErrorList.java-30:34
/*** Returns the list of error messages
*
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\ErrorList.java-39:43
/*** Returns true if the list has any errors
*
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\FormValidationException.java-8:13
/*** This exception is used specifically for when an action involves the correct
* and proper submission of a web form.  Form Validation is handled by a series of
* other classes, but when form validation is incorrect or incomplete, this exception
* is thrown.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\FormValidationException.java-18:21
/*** Constructor with error messages passed as a list of parameters to the method.
* @param errorMessages The list of error messages to be returned in the special form validation box.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\FormValidationException.java-29:32
/*** Constructor with error messages as a special ErrorList data type.
* @param errorList An ErrorList object which contains the list of error messages.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\FormValidationException.java-37:40
/*** Returns the error list as a java.util.List of Strings.
* @return The error list
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\FormValidationException.java-45:47
/*** The error message will be displayed at the top of the iTrust page as in other iTrust Exceptions.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\FormValidationException.java-55:59
/*** The special formatting for error messages is then kept in one place.
* @param out The output writer (in this case a JSPWriter) where the formatted list will go.
* @throws IOException If the writer is incorrect.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\FormValidationException.java-68:68
/** Like printHTML, except a string is returned. */

iTrust_v21\src\edu\ncsu\csc\itrust\exception\ITrustException.java-3:6
/*** A specialized exception class for displaying iTrust error messages.
* This exception is handled by the default iTrust exception handler.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\ITrustException.java-11:14
/*** The typical constructor.
* @param message A message to be displayed to the screen.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\ITrustException.java-19:22
/*** For messages which are displayed to the user. Usually, this is a very general message for security
* reasons.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\ITrustException.java-31:35
/*** For exceptions which show a lot of technical detail, usually delegated to a subclass
*
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\NoHealthRecordsException.java-3:7
/*** This error message is thrown when checking for health risk indicators and the
* patient has had no health records entered.  It is a separate case than an iTrustException
* because the error handling is slightly different.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\NoHealthRecordsException.java-15:17
/*** The default constructor, which just passes a pre-specified message to an iTrustException.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\PrescriptionFieldException.java-1:3
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\PrescriptionFieldException.java-6:9
/***
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\PrescriptionFieldException.java-11:13
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\PrescriptionWarningException.java-1:3
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\PrescriptionWarningException.java-8:11
/***
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\PrescriptionWarningException.java-18:21
/*** Warning if providing wrong prescription
* @param warnings
*/


iTrust_v21\src\edu\ncsu\csc\itrust\exception\PrescriptionWarningException.java-27:30
/*** Display warning message
* @return r
*/


iTrust_v21\src\edu\ncsu\csc\itrust\HtmlEncoder.java-3:8
/*** Escapes a few key HTML characters and does some other checking
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\HtmlEncoder.java-10:14
/***  Escapes a few key HTML characters
* @param input String to check and escape
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\HtmlEncoder.java-24:29
/*** Checks URL
*
* @param input URL to check
* @return false if the input contains http://, true otherwise
*/


iTrust_v21\src\edu\ncsu\csc\itrust\Localization.java-5:7
/** Provides a singleton for accessing the current locale of iTrust*  Could possibly load the country and language from a file.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\Localization.java-11:13
/*** Localization
*/


iTrust_v21\src\edu\ncsu\csc\itrust\Localization.java-18:21
/*** Returns the current locale
* @return the current locale
*/


iTrust_v21\src\edu\ncsu\csc\itrust\Localization.java-28:32
/*** singleton method, may want to make this thread safe, as far as I know
* iTrust doesn't do any multithreading though...
* @return Localization instance
*/


iTrust_v21\src\edu\ncsu\csc\itrust\Messages.java-6:7
/***/


iTrust_v21\src\edu\ncsu\csc\itrust\Messages.java-13:17
/*** getString
* @param key key
* @return !key!
*/


iTrust_v21\src\edu\ncsu\csc\itrust\ParameterUtil.java-7:9
/*** Provides a utility method that converts the "Map" from the JSP container to a type-checked hashmap
*/


iTrust_v21\src\edu\ncsu\csc\itrust\ParameterUtil.java-11:15
/*** Provides a utility method that converts the "Map" from the JSP container to a type-checked hashmap
* @param params Map to convert
* @return converted Map
*/


iTrust_v21\src\edu\ncsu\csc\itrust\RandomPassword.java-5:10
/*** Generates a random string of characters
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\RandomPassword.java-14:18
/*** Returns a string of random characters
*
* @return a string of random characters
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\DemographicReportFilter.java-10:13
/***
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\DemographicReportFilter.java-16:19
/***
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\DemographicReportFilter.java-52:55
/***
* @param name
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\DemographicReportFilter.java-60:62
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\DemographicReportFilter.java-73:77
/***
* @param filterType
* @param filterValue
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\DemographicReportFilter.java-85:89
/***
* @param name
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\DemographicReportFilter.java-99:101
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\DemographicReportFilter.java-286:289
/***
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\DemographicReportFilter.java-294:297
/***
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\DemographicReportFilter.java-302:305
/***
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\DemographicReportFilter.java-310:312
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\MedicalReportFilter.java-18:21
/***
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\MedicalReportFilter.java-24:27
/***
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\MedicalReportFilter.java-40:43
/***
* @param name
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\MedicalReportFilter.java-48:50
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\MedicalReportFilter.java-63:67
/***
* @param filterType
* @param filterValue
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\MedicalReportFilter.java-76:80
/***
* @param name
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\MedicalReportFilter.java-90:92
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\MedicalReportFilter.java-228:231
/***
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\MedicalReportFilter.java-236:239
/***
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\MedicalReportFilter.java-244:247
/***
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\MedicalReportFilter.java-252:254
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\PersonnelReportFilter.java-10:13
/***
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\PersonnelReportFilter.java-16:19
/***
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\PersonnelReportFilter.java-21:21
// MID,

iTrust_v21\src\edu\ncsu\csc\itrust\report\PersonnelReportFilter.java-26:29
/***
* @param name
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\PersonnelReportFilter.java-34:36
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\PersonnelReportFilter.java-53:57
/***
* @param name
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\PersonnelReportFilter.java-67:69
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\PersonnelReportFilter.java-101:103
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\PersonnelReportFilter.java-110:112
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\PersonnelReportFilter.java-118:121
/***
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\PersonnelReportFilter.java-126:129
/***
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\ReportFilter.java-6:9
/***
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\ReportFilter.java-11:15
/***
* @param patients
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\report\ReportFilter.java-17:19
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\risk\ChronicDiseaseMediator.java-9:14
/*** Figures out which risk checker strategy to use
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\risk\ChronicDiseaseMediator.java-18:25
/*** Given a factory and patient ID, and sets up a list of all risk checkers
*
* @param factory The DAOFactory to be used in creating the necessary DAOs to perform the checks.
* @param pid The MID of the patient in question.
* @throws DBException
* @throws NoHealthRecordsException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\risk\ChronicDiseaseMediator.java-33:35
/*** @return A list of diseases that this patient is at risk for
*/


iTrust_v21\src\edu\ncsu\csc\itrust\risk\factors\AgeFactor.java-5:9
/*** The risk factor associated with checking if a person is over a particular age
* See {@link PatientRiskFactor} for details on what each method typically does.
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\risk\factors\ChildhoodInfectionFactor.java-6:12
/*** Checks if the patient had the given diagnoses during childhood.
* See {@link PatientRiskFactor} for details on what each method typically does.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\risk\factors\CholesterolFactor.java-5:11
/*** Checks if cholesterol is over a given threshold for a given patient
* See {@link PatientRiskFactor} for details on what each method typically does.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\risk\factors\EthnicityFactor.java-6:12
/*** Checks if the ethnicity of a patient matches the one at risk
* See {@link PatientRiskFactor} for details on what each method typically does.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\risk\factors\FamilyHistoryFactor.java-6:12
/*** Checks if a patient has a family history of a given diagnosis range. Delegates straight to the DAO.
* See {@link PatientRiskFactor} for details on what each method typically does.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\risk\factors\GenderFactor.java-6:12
/*** Checks if the patient's gender matches the given at-risk one.
* See {@link PatientRiskFactor} for details on what each method typically does.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\risk\factors\HypertensionFactor.java-5:11
/*** Checks if the patient's blood pressure is above a given threshold.
* See {@link PatientRiskFactor} for details on what each method typically does.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\risk\factors\PatientRiskFactor.java-3:9
/*** Abstract class for risk factors, the hasRiskFactor delegates to the protected version. Caches the result in
* case it gets checked more than once.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\risk\factors\PatientRiskFactor.java-13:15
/*** @return A textual description of what the patient's status is that's causing the risk.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\risk\factors\PatientRiskFactor.java-18:20
/*** @return A boolean indicating whether the patient has the increased risk.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\risk\factors\PatientRiskFactor.java-23:25
/*** @return A boolean indicating whether the patient has the increased risk.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\risk\factors\PriorDiagnosisFactor.java-6:12
/*** Checks for prior diagnoses by delegatin to the DAO
* See {@link PatientRiskFactor} for details on what each method typically does.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\risk\factors\SmokingFactor.java-6:12
/*** Risk factor delegates to the DAO to see if a patient has ever smoked in their life
* See {@link PatientRiskFactor} for details on what each method typically does.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\risk\factors\WeightFactor.java-5:11
/*** Checks the patient's body mass index over the given threshold
* See {@link PatientRiskFactor} for details on what each method typically does.
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\risk\HeartDiseaseRisks.java-23:28
/*** Checks to see if the given patient is at risk for Heart Disease
* For details on what each method does, see {@link RiskChecker}
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\risk\RiskChecker.java-13:21
/*** An abstract class which has a number of utlity methods for checking risks.
*
* When extending this class, use the methods to fill in all of the necessary information. Then use isAtRisk
* and getPatientRiskFactors to get the actual risks. See the known subclasses for an example
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\risk\RiskChecker.java-40:42
/*** @return The name of the disease being checked.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\risk\RiskChecker.java-45:47
/*** @return A java.util.List of the risk factors increasing this patients disease risk.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\risk\RiskChecker.java-50:52
/*** @return A boolean indicating whether the patient is at increased risk.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\risk\RiskChecker.java-55:62
/*** This method exists purely for performance - just stop once you hit the threshold. <br />
* <br />
* Also, the risk factors should be cached in the RiskFactor implementors - in getPatientRiskFactors there
* should be no double-querying
*
* @return isAtRisk
*/


iTrust_v21\src\edu\ncsu\csc\itrust\risk\RiskChecker.java-77:79
/*** @return A java.util.List of patient risk factors associated with this disease.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\risk\Type1DiabetesRisks.java-14:20
/*** Checks to see if the given patient is at risk for Type 1 Diabetes.
* For details on what each method does, see {@link RiskChecker}
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\risk\Type2DiabetesRisks.java-21:27
/*** Checks to see if the given patient is at risk for Type II Diabetes.
* For details on what each method does, see {@link RiskChecker}
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\server\FindExpertServlet.java-16:18
/*** Servlet implementation class FindExpertServlet
*/


iTrust_v21\src\edu\ncsu\csc\itrust\server\FindExpertServlet.java-23:25
/*** @see HttpServlet#HttpServlet()
*/


iTrust_v21\src\edu\ncsu\csc\itrust\server\FindExpertServlet.java-28:28
//We never use the mid, so we don't need it.

iTrust_v21\src\edu\ncsu\csc\itrust\server\FindExpertServlet.java-37:39
/*** @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\server\GroupReportGeneratorServlet.java-18:22
/*** GroupReportGeneratorServlet is a generic servlet that serves a xml document
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\server\GroupReportGeneratorServlet.java-25:27
/*** GroupReportGeneratorAction to generate the report for download
*/


iTrust_v21\src\edu\ncsu\csc\itrust\server\GroupReportGeneratorServlet.java-30:32
/*** factor for the GroupReportGeneratorAction to use
*/


iTrust_v21\src\edu\ncsu\csc\itrust\server\GroupReportGeneratorServlet.java-35:37
/*** Document to be served to client
*/


iTrust_v21\src\edu\ncsu\csc\itrust\server\GroupReportGeneratorServlet.java-40:42
/*** Randomly generated servlet ID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\server\GroupReportGeneratorServlet.java-45:47
/*** doPost method that takes a user request and serves them a downloadable xml based on their defined search criteria.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\server\GroupReportGeneratorServlet.java-55:55
//Set the headers.

iTrust_v21\src\edu\ncsu\csc\itrust\server\HealthRecordsXMLGeneratorServlet.java-35:35
//Get the ViewRecordsReleaseAction object

iTrust_v21\src\edu\ncsu\csc\itrust\server\HealthRecordsXMLGeneratorServlet.java-37:37
//Get the release request

iTrust_v21\src\edu\ncsu\csc\itrust\server\HealthRecordsXMLGeneratorServlet.java-56:56
//Get all of the patient's health records from the specified hospital

iTrust_v21\src\edu\ncsu\csc\itrust\server\HealthRecordsXMLGeneratorServlet.java-64:64
//Get the root element

iTrust_v21\src\edu\ncsu\csc\itrust\server\HealthRecordsXMLGeneratorServlet.java-67:67
//Create a release information element

iTrust_v21\src\edu\ncsu\csc\itrust\server\HealthRecordsXMLGeneratorServlet.java-70:70
//Define the request date

iTrust_v21\src\edu\ncsu\csc\itrust\server\HealthRecordsXMLGeneratorServlet.java-74:74
//Define the patient name

iTrust_v21\src\edu\ncsu\csc\itrust\server\HealthRecordsXMLGeneratorServlet.java-78:78
//Define the release hospital

iTrust_v21\src\edu\ncsu\csc\itrust\server\HealthRecordsXMLGeneratorServlet.java-82:82
//Define the doctor to release to's name

iTrust_v21\src\edu\ncsu\csc\itrust\server\HealthRecordsXMLGeneratorServlet.java-86:86
//Define the doctor to release to's contact information

iTrust_v21\src\edu\ncsu\csc\itrust\server\HealthRecordsXMLGeneratorServlet.java-93:93
//Define the hospital to release to

iTrust_v21\src\edu\ncsu\csc\itrust\server\HealthRecordsXMLGeneratorServlet.java-97:97
//Define the hospital to release to's address

iTrust_v21\src\edu\ncsu\csc\itrust\server\HealthRecordsXMLGeneratorServlet.java-104:104
//Define health record elements

iTrust_v21\src\edu\ncsu\csc\itrust\server\HealthRecordsXMLGeneratorServlet.java-108:108
//Define visit date elements

iTrust_v21\src\edu\ncsu\csc\itrust\server\HealthRecordsXMLGeneratorServlet.java-113:113
//Define height elements

iTrust_v21\src\edu\ncsu\csc\itrust\server\HealthRecordsXMLGeneratorServlet.java-118:118
//Define weight elements

iTrust_v21\src\edu\ncsu\csc\itrust\server\HealthRecordsXMLGeneratorServlet.java-123:123
//Define blood pressure elements

iTrust_v21\src\edu\ncsu\csc\itrust\server\HealthRecordsXMLGeneratorServlet.java-130:130
//Define patient smoking status elements

iTrust_v21\src\edu\ncsu\csc\itrust\server\HealthRecordsXMLGeneratorServlet.java-135:135
//Define household smoke status elements

iTrust_v21\src\edu\ncsu\csc\itrust\server\HealthRecordsXMLGeneratorServlet.java-140:140
//Define hdl elements

iTrust_v21\src\edu\ncsu\csc\itrust\server\HealthRecordsXMLGeneratorServlet.java-145:145
//Define ldl elements

iTrust_v21\src\edu\ncsu\csc\itrust\server\HealthRecordsXMLGeneratorServlet.java-150:150
//Define triglycerides elements

iTrust_v21\src\edu\ncsu\csc\itrust\server\HealthRecordsXMLGeneratorServlet.java-155:155
//Define doctor elements

iTrust_v21\src\edu\ncsu\csc\itrust\server\HealthRecordsXMLGeneratorServlet.java-162:162
//Serialisation through Transform and print to html

iTrust_v21\src\edu\ncsu\csc\itrust\server\PatientSearchServlet.java-18:20
/*** Servlet implementation class PateintSearchServlet
*/


iTrust_v21\src\edu\ncsu\csc\itrust\server\PatientSearchServlet.java-25:27
/*** @see HttpServlet#HttpServlet()
*/


iTrust_v21\src\edu\ncsu\csc\itrust\server\PatientSearchServlet.java-30:30
//We don't ever use the second parameter, so we don't need to give it meaning.

iTrust_v21\src\edu\ncsu\csc\itrust\server\PatientSearchServlet.java-33:35
/*** @see HttpServlet#HttpServlet()
*/


iTrust_v21\src\edu\ncsu\csc\itrust\server\PatientSearchServlet.java-38:38
//We don't ever use the second parameter, so we don't need to give it meaning.

iTrust_v21\src\edu\ncsu\csc\itrust\server\PatientSearchServlet.java-42:44
/*** @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\server\SessionTimeoutListener.java-9:11
/*** A listener which will time the user out after a pre-specified time limit.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\server\SessionTimeoutListener.java-15:17
/*** The default constructor.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\server\SessionTimeoutListener.java-22:26
/*** The specialized constructor, which takes a particular DAOFactory to be used when checking for the pre-specified
* timeout limit.
* @param factory The DAOFactory to be used.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\server\SessionTimeoutListener.java-31:35
/*** Called when the HttpSession is created, this method pulls the pre-specified limit from the
* database and sets it as a property of the HttpSession.
* @param arg0 The HttpSessionEven which just occurred.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\server\SessionTimeoutListener.java-50:53
/*** Must be declared for compliance with the interface. Not implemented.
* @param arg0 arg0
*/


iTrust_v21\src\edu\ncsu\csc\itrust\server\SessionTimeoutListener.java-55:55
// nothing to do here

iTrust_v21\src\edu\ncsu\csc\itrust\server\WardCRUDServlet.java-13:15
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\server\WardCRUDServlet.java-18:20
/*** WardDao for doing DAO Operations
*/


iTrust_v21\src\edu\ncsu\csc\itrust\server\WardCRUDServlet.java-31:31
//Send error parameter back to page

iTrust_v21\src\edu\ncsu\csc\itrust\server\WardCRUDServlet.java-35:35
//Send error parameter back to page

iTrust_v21\src\edu\ncsu\csc\itrust\server\WardCRUDServlet.java-40:40
//Redirect back to page

iTrust_v21\src\edu\ncsu\csc\itrust\server\WardCRUDServlet.java-52:52
//Send error parameter back to page

iTrust_v21\src\edu\ncsu\csc\itrust\server\WardCRUDServlet.java-56:56
//Send error parameter back to page

iTrust_v21\src\edu\ncsu\csc\itrust\server\WardCRUDServlet.java-61:61
//Redirect back to page

iTrust_v21\src\edu\ncsu\csc\itrust\server\WardCRUDServlet.java-69:69
//Send error parameter back to page

iTrust_v21\src\edu\ncsu\csc\itrust\server\WardCRUDServlet.java-74:74
//Redirect back to page

iTrust_v21\src\edu\ncsu\csc\itrust\server\WardRoomCRUDServlet.java-13:15
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\server\WardRoomCRUDServlet.java-18:20
/*** WardDao for doing DAO Operations
*/


iTrust_v21\src\edu\ncsu\csc\itrust\server\WardRoomCRUDServlet.java-33:33
//Send error parameter back to page

iTrust_v21\src\edu\ncsu\csc\itrust\server\WardRoomCRUDServlet.java-37:37
//Send error parameter back to page

iTrust_v21\src\edu\ncsu\csc\itrust\server\WardRoomCRUDServlet.java-42:42
//Redirect back to page

iTrust_v21\src\edu\ncsu\csc\itrust\server\WardRoomCRUDServlet.java-55:55
//Send error parameter back to page

iTrust_v21\src\edu\ncsu\csc\itrust\server\WardRoomCRUDServlet.java-60:60
//Redirect back to page

iTrust_v21\src\edu\ncsu\csc\itrust\server\WardRoomCRUDServlet.java-68:68
//Send error parameter back to page

iTrust_v21\src\edu\ncsu\csc\itrust\server\WardRoomCRUDServlet.java-73:73
//Redirect back to page

iTrust_v21\src\edu\ncsu\csc\itrust\tags\ICD9CMLink.java-9:11
/*** JSP tag used as a utility to link to the actual ICD9CM site
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\ICD9CMLink.java-17:19
/*** ICD9CMLink
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\ICD9CMLink.java-24:27
/*** doStartTag
* @throws JspException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\ICD9CMLink.java-34:34
//TODO

iTrust_v21\src\edu\ncsu\csc\itrust\tags\ICD9CMLink.java-39:42
/*** doEndTag
* @throws JspException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\ICD9CMLink.java-47:49
/*** release
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\ICD9CMLink.java-53:55
/*** setPageContext
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\ICD9CMLink.java-60:63
/*** setParent
* @param parent parent
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\ICD9CMLink.java-68:70
/*** getParent
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\ICD9CMLink.java-75:78
/*** getCode
* @return code
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\ICD9CMLink.java-83:86
/*** setCode
* @param code code
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\ICD9CMLink.java-91:94
/*** setCode
* @param code code
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\PatientNavigation.java-9:13
/*** JSP tag that is used as the patient navigation bar at the bottom of the screen.
*
* To add a new page, add to the two arrays, and make sure that the page accepts PID
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\PatientNavigation.java-17:17
// A more elegant solution here would be to use enums and have a displayName, a name, and url

iTrust_v21\src\edu\ncsu\csc\itrust\tags\PatientNavigation.java-26:28
/*** PatientNavigation
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\PatientNavigation.java-32:35
/*** doStartTag
* @throws JspException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\PatientNavigation.java-50:50
//TODO

iTrust_v21\src\edu\ncsu\csc\itrust\tags\PatientNavigation.java-55:58
/*** doEndTag
* @throws JspException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\PatientNavigation.java-63:65
/*** release
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\PatientNavigation.java-69:72
/*** setPageContext
* @param pageContext pageContext
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\PatientNavigation.java-77:80
/*** setParent
* @param parent parent
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\PatientNavigation.java-85:88
/*** getParent
* @return parent
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\PatientNavigation.java-93:96
/*** getThisTitle
* @return this title
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\PatientNavigation.java-101:104
/*** setThisTitle
* @param thisPage thisPage
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\StateSelect.java-10:16
/*** JSP tag that adds an HTML select for states, from the enum.
*
* @see {@link State}
*
* Also selects the current state
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\StateSelect.java-23:25
/*** StateSelect
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\StateSelect.java-30:33
/*** doStarTag
* @throws JspException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\StateSelect.java-47:47
//TODO

iTrust_v21\src\edu\ncsu\csc\itrust\tags\StateSelect.java-52:56
/*** doEndTag
* @return SKIP_BODY
* @throws JspException
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\StateSelect.java-61:63
/*** release
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\StateSelect.java-67:70
/*** setPageContext
* @param pageContext pageContext
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\StateSelect.java-75:78
/*** setParent
* @param parent parent
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\StateSelect.java-83:85
/*** getParent
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\StateSelect.java-90:93
/*** getName
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\StateSelect.java-98:101
/*** setName
* @param name anem
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\StateSelect.java-106:109
/*** getValue
* @return value
*/


iTrust_v21\src\edu\ncsu\csc\itrust\tags\StateSelect.java-114:117
/*** setValue
* @param value value
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\AddPatientValidator.java-8:13
/*** The validator used by {@link AddPatientAction}. Only checks first name, last name, and email
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\AddPatientValidator.java-15:17
/*** The default constructor.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\AddPatientValidator.java-21:26
/*** Performs the act of validating the bean in question, which varies depending on the
* type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
*
* @param p A bean of the type to be validated.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\AddPersonnelValidator.java-8:13
/*** The validator used by {@link AddPatientAction}. Only checks first name, last name, and email
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\AddPersonnelValidator.java-16:18
/*** The default constructor.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\AddPersonnelValidator.java-22:27
/*** Performs the act of validating the bean in question, which varies depending on the
* type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
*
* @param p A bean of the type to be validated.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\AdverseEventValidator.java-7:9
/*** Validates an adverse event bean, from {@link AdverseEventAction}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\AdverseEventValidator.java-11:13
/*** The default constructor.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\AdverseEventValidator.java-17:21
/*** Performs the act of validating the bean in question, which varies depending on the
* type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
* @param b b
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\AllergyBeanValidator.java-8:13
/*** Validator used to validate adding a new allergy in {@link EditOfficeVisitAction}
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\AllergyBeanValidator.java-15:17
/*** The default constructor.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\AllergyBeanValidator.java-21:26
/*** Performs the act of validating the bean in question, which varies depending on the
* type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
*
* @param p A bean of the type to be validated.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\BeanValidator.java-8:16
/*** Abstract class used by all validators that provides utility methods for checking formatting of a particular
* field. Specify the Bean to be validated
*
*
*
* @param <T>
*            The bean type to be validated
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\BeanValidator.java-20:29
/*** Check the format against the given enum. isNullable will check if the string is empty or a Java null.
* Otherwise, an error message will be returned. Use this in conjunction with {@link ErrorList}.
*
* @param name
* @param value
* @param format
* @param isNullable
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\BeanValidator.java-41:50
/*** Check a long value against a particular format. isNullable will check if it is empty or a Java null.
* Otherwise, an error message will be returned. Use this in conjunction with {@link ErrorList}.
*
* @param name
* @param longValue
* @param format
* @param isNullable
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\BeanValidator.java-58:67
/*** Check the format against the given enum. isNullable will check if it is a Java null. Otherwise, an
* error message will be returned. Use this in conjunction with {@link ErrorList}.
*
* @param name
* @param doubleValue
* @param format
* @param isNullable
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\BeanValidator.java-75:84
/*** Check the format against the given enum. isNullable will check if it is a Java null. Otherwise, an
* error message will be returned. Use this in conjunction with {@link ErrorList}.
*
* @param name
* @param doubleValue
* @param format
* @param isNullable
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\BeanValidator.java-92:100
/*** Check against the proper gender
*
* @param name
* @param gen
* @param format
* @param isNullable
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\BeanValidator.java-108:117
/*** The that an integer is the proper format, and is in the correct range
*
* @param name
* @param value
* @param lower
* @param upper
* @param isNullable
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\BeanValidator.java-126:126
// just fall through to returning the error message

iTrust_v21\src\edu\ncsu\csc\itrust\validate\BeanValidator.java-132:140
/*** Check that a double is in the proper format and is in the correct range
*
* @param name
* @param value
* @param lower
* @param upper
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\BeanValidator.java-147:147
// just fall through to returning the error message

iTrust_v21\src\edu\ncsu\csc\itrust\validate\BeanValidator.java-152:158
/*** Check that the value fits the "true" or "false"
*
* @param name
* @param value
* @return
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\DiagnosisBeanValidator.java-7:12
/*** Validates an ICD9CM code
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\DiagnosisBeanValidator.java-14:16
/*** The default constructor.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\DiagnosisBeanValidator.java-20:25
/*** Performs the act of validating the bean in question, which varies depending on the
* type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
*
* @param p A bean of the type to be validated.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\DrugInteractionValidator.java-7:9
/*** Validates a drug interaction bean, from {@link DrugInteractionAction}
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\DrugInteractionValidator.java-11:13
/*** The default constructor.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\DrugInteractionValidator.java-17:22
/*** Performs the act of validating the bean in question, which varies depending on the
* type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
*
* @param d A bean of the type to be validated.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\EditOfficeVisitValidator.java-8:13
/*** Used to validate updating an office visit, by {@link EditOfficeVisitAction}
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\EditOfficeVisitValidator.java-16:18
/*** The default constructor.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\EditOfficeVisitValidator.java-22:27
/*** Performs the act of validating the bean in question, which varies depending on the
* type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
*
* @param p A bean of the type to be validated.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\EditPrescriptionsValidator.java-1:3
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\EditPrescriptionsValidator.java-13:16
/***
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\EditPrescriptionsValidator.java-25:27
/* (non-Javadoc)* @see edu.ncsu.csc.itrust.validate.BeanValidator#validate(java.lang.Object)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\EMailValidator.java-10:12
/*** The default constructor.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\EMailValidator.java-16:21
/*** Performs the act of validating the bean in question, which varies depending on the
* type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
*
* @param m A bean of the type to be validated.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\ExerciseEntryValidator.java-12:16
/*** ExerciseEntryValidator.java Version 1 4/2/2015 Copyright notice: none Ensures
* that a exercise entry has only appropriate values before it is loaded into the
* database
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\ExerciseEntryValidator.java-19:30
/*** Performs the act of validating the bean in question, which varies
* depending on the type of validator. If the validation does not succeed, a
* {@link FormValidationException} is thrown. The date performed must be of
* the form mm/dd/yyyy and it must be on or before today's date. The
* exercise type cannot be null and it must be either Weight Training or
* Cardio. The exercise name cannot be null. Hours, calories, reps, and sets
* must be greater than 0.
*
* @param bean
*            The bean to be validated.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\ExerciseEntryValidator.java-58:58
// pointer

iTrust_v21\src\edu\ncsu\csc\itrust\validate\ExerciseEntryValidator.java-76:76
// Only validate these if it's weight training.

iTrust_v21\src\edu\ncsu\csc\itrust\validate\FoodEntryValidator.java-11:18
/*** FoodEntryValidator.java
* Version 1
* 2/21/2015
* Copyright notice: none
* Ensures that a food entry has only appropriate values before it is loaded
* into the database
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\FoodEntryValidator.java-21:31
/*** Performs the act of validating the bean in question, which varies
* depending on the type of validator.  If the validation does
* not succeed, a {@link FormValidationException} is thrown.
* The date eaten must be of the form mm/dd/yyyy and it must be on or
* before today's date. The meal type cannot be null and it must be either
* Breakfast, Lunch, Snack, or Dinner. The food name cannot be null.
* Servings must be greater than 0. All of the rest of the grams
* and milligrams must be greater than or equal to 0.
* @param p A bean of the type to be validated.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\HealthRecordFormValidator.java-8:13
/*** Validator used in adding health information on Basic Health History, {@link EditHealthHistoryAction}
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\HealthRecordFormValidator.java-15:20
/*** Performs the act of validating the bean in question, which varies depending on the
* type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
*
* @param p A bean of the type to be validated.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\HospitalBeanValidator.java-8:13
/*** Validates the input for hospital beans, {@link UpdateHospitalListAction}
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\HospitalBeanValidator.java-15:17
/*** The default constructor.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\HospitalBeanValidator.java-22:27
/*** Performs the act of validating the bean in question, which varies depending on the
* type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
*
* @param p A bean of the type to be validated.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\LabProcedureValidator.java-9:14
/*** Performs the act of validating the bean in question, which varies depending on the
* type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
*
* @param p A bean of the type to be validated.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\LOINCBeanValidator.java-9:11
/*** Validator used to validate LOINCbean
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\LOINCBeanValidator.java-13:15
/*** The default constructor.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\LOINCBeanValidator.java-19:23
/*** Performs the act of validating the bean in question, which varies depending on the
* type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\MailValidator.java-9:11
/*** The default constructor.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\MailValidator.java-15:20
/*** Performs the act of validating the bean in question, which varies depending on the
* type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
*
* @param p A bean of the type to be validated.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\MedicationBeanValidator.java-8:13
/*** Validates ND code beans, from {@link UpdateNDCodeListAction}
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\MedicationBeanValidator.java-15:17
/*** The default constructor.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\MedicationBeanValidator.java-21:26
/*** Performs the act of validating the bean in question, which varies depending on the
* type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
*
* @param p A bean of the type to be validated.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\MessageValidator.java-8:13
/*** Used to validate updating an office visit, by {@link EditOfficeVisitAction}
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\ObstetricsRecordValidator.java-8:10
/*** The validator used by {@link AddObstetricsAction}.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\ObstetricsRecordValidator.java-12:14
/*** The default constructor.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\ObstetricsRecordValidator.java-19:24
/*** Performs the act of validating the bean in question, which varies depending on the
* type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
*
* @param p A bean of the type to be validated.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\ObstetricsRecordValidator.java-29:29
//if Initial record

iTrust_v21\src\edu\ncsu\csc\itrust\validate\ObstetricsRecordValidator.java-36:36
//else, if office visit

iTrust_v21\src\edu\ncsu\csc\itrust\validate\ObstetricsRecordValidator.java-41:41
//note that this weeks pregnant != the initial weeks pregnant b/c can be up to 49 weeks

iTrust_v21\src\edu\ncsu\csc\itrust\validate\OphthalmologyDiagnosisBeanValidator.java-7:12
/*** Validates an ICD9CM code
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\OphthalmologyDiagnosisBeanValidator.java-14:16
/*** The default constructor.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\OphthalmologyDiagnosisBeanValidator.java-20:25
/*** Performs the act of validating the bean in question, which varies depending on the
* type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
*
* @param p A bean of the type to be validated.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\OphthalmologyOVValidator.java-7:10
/*** Validator class for OphthalmologyOVActionBean. Used in order to verify that a beans
* contents are consistent with the data format section of UC83.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\OphthalmologyOVValidator.java-13:16
/** Validates an Ophthalmology bean passed to it.* @param bean The bean to be validated.
* @throws FormValidationException throws an exception as its way of saying that the bean passed is invalid.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\OphthalmologyOVValidator.java-21:21
//at this point, we can assume that all numerical fields have made it into the bean successfully,

iTrust_v21\src\edu\ncsu\csc\itrust\validate\OphthalmologyOVValidator.java-22:22
//we still need to check to make sure they are in the right ranges.

iTrust_v21\src\edu\ncsu\csc\itrust\validate\OphthalmologyScheduleOVValidator.java-7:10
/*** Validator class for OphthalmologyScheduleOVRecordBean. Used in order to verify that a beans
* contents are consistent with the data format section of UC88.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\OphthalmologyScheduleOVValidator.java-13:16
/** Validates an scheduled Ophthalmology ov bean passed to it.* @param bean The bean to be validated.
* @throws FormValidationException throws an exception as its way of saying that the bean passed is invalid.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\OphthalmologyScheduleOVValidator.java-21:21
//at this point, we can assume that all numerical fields have made it into the bean successfully,

iTrust_v21\src\edu\ncsu\csc\itrust\validate\OphthalmologyScheduleOVValidator.java-22:22
//we still need to check to make sure they are in the right ranges.

iTrust_v21\src\edu\ncsu\csc\itrust\validate\OphthalmologyScheduleOVValidator.java-35:35
//Commenting this out so that blank comments can be placed.

iTrust_v21\src\edu\ncsu\csc\itrust\validate\OphthalmologyScheduleOVValidator.java-36:36
//errorList.addIfNotNull(checkFormat("Appointment Comment", bean.getComment(), ValidationFormat.APPT_COMMENT, false));

iTrust_v21\src\edu\ncsu\csc\itrust\validate\OphthalmologySurgeryValidator.java-7:10
/*** Validator class for OphthalmologySurgeryActionBean. Used in order to verify that a beans
* contents are consistent with the data format section of UC83.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\OphthalmologySurgeryValidator.java-13:16
/** Validates an Ophthalmology bean passed to it.* @param bean The bean to be validated.
* @throws FormValidationException throws an exception as its way of saying that the bean passed is invalid.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\OphthalmologySurgeryValidator.java-21:21
//at this point, we can assume that all numerical fields have made it into the bean successfully,

iTrust_v21\src\edu\ncsu\csc\itrust\validate\OphthalmologySurgeryValidator.java-22:22
//we still need to check to make sure they are in the right ranges.

iTrust_v21\src\edu\ncsu\csc\itrust\validate\OverrideReasonBeanValidator.java-7:10
/*** Validates reason code beans, from {@link UpdateReasonCodeListAction}
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\OverrideReasonBeanValidator.java-12:14
/*** The default constructor.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\OverrideReasonBeanValidator.java-18:23
/*** Performs the act of validating the bean in question, which varies depending on the
* type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
*
* @param p A bean of the type to be validated.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\PatientInstructionsBeanValidator.java-1:3
/***
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\PatientInstructionsBeanValidator.java-11:13
/***  Validates a patient instructions bean.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\PatientInstructionsBeanValidator.java-16:18
/* (non-Javadoc)* @see edu.ncsu.csc.itrust.validate.BeanValidator#validate(java.lang.Object)
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\PatientInstructionsBeanValidator.java-26:26
// The following checks URL length.

iTrust_v21\src\edu\ncsu\csc\itrust\validate\PatientInstructionsBeanValidator.java-29:29
// The following checks URL format.

iTrust_v21\src\edu\ncsu\csc\itrust\validate\PatientValidator.java-10:15
/*** Validates a patient bean, from {@link EditPatientAction}
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\PatientValidator.java-17:19
/*** The default constructor.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\PatientValidator.java-27:27
//First name, last name, and email are all required

iTrust_v21\src\edu\ncsu\csc\itrust\validate\PatientValidator.java-57:57
// ignore this

iTrust_v21\src\edu\ncsu\csc\itrust\validate\PatientValidator.java-143:143
/* This block was added for Theme 5 by Tyler Arehart */

iTrust_v21\src\edu\ncsu\csc\itrust\validate\PersonnelValidator.java-8:13
/*** Validates a personnel bean, from {@link EditPersonnelAction}
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\PersonnelValidator.java-15:17
/*** The default constructor.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\PersonnelValidator.java-21:26
/*** Performs the act of validating the bean in question, which varies depending on the
* type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
*
* @param p A bean of the type to be validated.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\ProcedureBeanValidator.java-8:13
/*** Validates an ND code, from {@link UpdateNDCodeListAction}
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\ProcedureBeanValidator.java-15:17
/*** The default constructor.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\ProcedureBeanValidator.java-21:26
/*** Performs the act of validating the bean in question, which varies depending on the
* type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
*
* @param p A bean of the type to be validated.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\RecordsReleaseFormValidator.java-10:15
/*** Performs the act of validating the bean in question, which varies depending on the
* type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
*
* @param p A bean of the type to be validated.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\ReferralBeanValidator.java-8:13
/*** Validates an ND code, from {@link UpdateNDCodeListAction}
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\ReferralBeanValidator.java-15:17
/*** The default constructor.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\ReferralBeanValidator.java-21:26
/*** Performs the act of validating the bean in question, which varies depending on the
* type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
*
* @param p A bean of the type to be validated.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\RemoteMonitoringDataBeanValidator.java-8:11
/*** Validator used to validate adding new remote monitoring data in {@link AddRemoteMonitoringDataAction}
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\RemoteMonitoringDataBeanValidator.java-13:15
/*** The default constructor.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\RemoteMonitoringDataBeanValidator.java-18:23
/*** Performs the act of validating the bean in question, which varies depending on the
* type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
*
* @param p A bean of the type to be validated.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\RemoteMonitoringDataBeanValidator.java-28:28
// Skip validation if values were not submitted (0 or -1)

iTrust_v21\src\edu\ncsu\csc\itrust\validate\SecurityQAValidator.java-8:14
/*** Validates the security question and answer. This doesn't follow the same format as the others because this
* validator is used for the various states of reset password, {@link SetSecurityQuestionAction}
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\SecurityQAValidator.java-16:21
/*** Performs the act of validating the bean in question, which varies depending on the
* type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
*
* @param p A bean of the type to be validated.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\SleepEntryValidator.java-11:15
/*** SleepEntryValidator.java Version 1 4/6/2015 Copyright notice: none Ensures
* that a sleep entry has only appropriate values before it is loaded into the
* database
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\SleepEntryValidator.java-18:28
/*** Performs the act of validating the bean in question, which varies
* depending on the type of validator. If the validation does not succeed, a
* {@link FormValidationException} is thrown. The date performed must be of
* the form mm/dd/yyyy and it must be on or before today's date. The
* sleep type cannot be null and it must be either Weight Training or
* Cardio. The sleep name cannot be null. Hours must be greater than 0.
*
* @param bean
*            The bean to be validated.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\SleepEntryValidator.java-56:56
// pointer

iTrust_v21\src\edu\ncsu\csc\itrust\validate\SurveySearchValidator.java-7:9
/*** Validator for zip code that is entered when a user searches for HCP survey results.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\SurveySearchValidator.java-12:17
/*** Performs the act of validating the bean in question, which varies depending on the
* type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.
*
* @param p A bean of the type to be validated.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\validate\ValidationFormat.java-5:11
/*** Enum with all of the validation formats that fit into a regex.
*
*
*
*
*/


iTrust_v21\src\edu\ncsu\csc\itrust\XmlGenerator.java-13:15
/*** XmlGenerator is a class that takes headers and data and converts them into a xml compliant document.
*/


iTrust_v21\src\edu\ncsu\csc\itrust\XmlGenerator.java-18:24
/*** generateXml converts the headers and data into a xml file
*
* @param headers - Column names
* @param Data - Data for columns
* @return - Xml document
*/


iTrust_v21\src\edu\ncsu\csc\itrust\XmlGenerator.java-28:28
//sorced from http://stackoverflow.com/questions/8865099/xml-file-generator-in-java

iTrust_v21\src\edu\ncsu\csc\itrust\XmlGenerator.java-32:32
//new document

iTrust_v21\src\edu\ncsu\csc\itrust\XmlGenerator.java-35:35
//head element

iTrust_v21\src\edu\ncsu\csc\itrust\XmlGenerator.java-39:39
//assumed has document builder and factory

iTrust_v21\src\edu\ncsu\csc\itrust\XmlGenerator.java-42:42
// makes format <Patient name="blah" age="xx" birthdate=""/> etc...

iTrust_v21\src\edu\ncsu\csc\itrust\XmlGenerator.java-50:50
//for each first level element, loop through second level and

iTrust_v21\src\edu\ncsu\csc\itrust\XmlGenerator.java-53:53
//TODO log error

iTrust_v21\src\edu\ncsu\csc\itrust\XmlGenerator.java-60:64
/*** Parses the string for a xml compliant one
* @param s - The string to be fixed
* @return - The xml compliant string
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-23:26
/*** Tests the limit for activities on the home page and then for all the activities.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-30:30
//Login

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-34:34
//Get the panels and select the activity panel

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-38:38
//Get the list items and count how many items there are, should be 20

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-42:42
//Now we check the all the activities

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-45:45
//Get the panels and select the activity panel

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-49:49
//Get the list items and count how many items there are, should be 40

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-51:51
//Plus three because of the two refresh links and then the one padding <li>

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-55:59
/*** Tests the refresh functionality of the activity panel, which refreshes and activity
* log on the homepage and limits it to 20.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-63:63
//Login

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-67:67
//Click on Older Activities to show all activity

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-69:69
//Then refresh to show only newest 20

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-72:72
//Get the panels and select toe activity panel

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-76:76
//Get the list items and count how many items there are, should be 20

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-81:84
/*** Tests for valid information in Activity Feed
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-88:88
//Login

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-96:96
//Get the panels and select toe activity panel

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-100:100
//Get the list items and count how many items there are, should be 20

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-114:118
/*** Tests to see if hidden activities show up on activity page
* DOES NOT SEEM TO ACTUALLY TEST THIS THOUGH!!!!!
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-120:120
//Login

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-124:124
//Go to Patient Information page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-136:136
//logout

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-140:140
//Login

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-144:144
//Go to Patient Information page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-162:162
//Let's manually logout

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-166:166
//Login

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-170:170
//Find the activity log

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-171:171
//Without doing this, the whole getPageSource will format with random \n

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-178:178
//Enable javascript

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-184:184
//Find Gandalf Stormcrow checkbox

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-186:186
//Deselect it

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-191:191
//Find Kelly Doctor checkbox

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-193:193
//Select it

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-198:198
//Disable javascript or else some links will not appear

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-201:201
//Go to homepage

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-206:206
//Get the activity log as an element so that the text is not formatted

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-224:232
/*** Tests to see that certain activities from the patients DLHCP are showing up in the activity field
* as well as verifying that other certain activities from the patients DLHCP are hidden.
*
* This tests Black Box Test Case ViewActivityFeed_ShowRequiredDLHCPActivity
* The scenario is that Patient Devil's Advocate logs into iTrust and then checks his Activity Feed.
* The Activity Feed should not be displaying certain actions that his DLHCP performed, such as looking
* at his demographics etc. It should be displaying events from other LHCP's as stated fully in the requirements doc.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-234:234
//Login

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-238:238
//Get the activity log as an element

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ActivityFeedTest.java-239:239
//Verify that certain activities from the patient's DLHCP are present, and that others are hidden

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AddNDTylenolTest.java-28:28
//Set elements to forms

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AddPatientTest.java-23:23
//Login

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AddPatientTest.java-28:28
//Click the add patients link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AddPatientTest.java-32:32
//Enter in information but blank first name

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AddPatientTest.java-39:39
//Enter in information but blank last name

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AddPatientTest.java-48:48
//Login

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AddPatientTest.java-53:53
//Click the add patients link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AddPatientTest.java-57:57
//Enter in information but invalid first name

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AddPatientTest.java-64:64
//Enter in information but invalid last name

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AddPatientTest.java-72:72
//Should pass with email changes

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AddPatientTest.java-74:74
//Login

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AddPatientTest.java-79:79
//Click the add patients link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AddPatientTest.java-83:83
//Enter in information but invalid email

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-30:30
//go to the page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-44:44
//go to the page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-50:50
//create date info

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-55:55
//fill form

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-72:72
//confirm that a warning was displayed, as the request conflicts with other appointments

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-76:76
//select another time for the appointment

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-81:81
//login to Zoidburg

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-86:86
//go to the page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-92:92
//check to make sure the request went through and approve it

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-101:101
//go to the page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-107:107
//create date info

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-112:112
//fill form

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-129:129
//confirm that the request was accepted

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-134:134
//login to zoidburg

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-139:139
//go to the page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-145:145
//check to make sure the request went through and approve it

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-149:149
//confirm on right page and that the appointment was approved

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-159:159
//go to the page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-165:165
//create date info

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-170:170
//fill form

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-187:187
//confirm that the request was accepted

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-192:192
//login to zoidburg

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-197:197
//go to the page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-203:203
//check to make sure the request went through and approve it

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-207:207
//confirm on right page and that the appointment was approved

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-216:216
//go to the page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-222:222
//create date info

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-227:227
//fill form

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-244:244
//confirm that a warning was displayed, as the request conflicts with other appointments

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-248:248
//select another time for the appointment

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-255:255
//login to Zoidburg

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-260:260
//go to the page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-266:266
//check to make sure the request went through

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-274:274
//go to the page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-280:280
//create date info

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-285:285
//fill form

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-302:302
//confirm that the request was accepted

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-312:312
//go to the page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-317:317
//fill form

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentRequestTest.java-334:334
//Verify that the form was rejected

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTest.java-25:25
//Login as HCP Kelly Doctor

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTest.java-31:31
//go to the schedule appointment page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTest.java-35:35
//use the old search to go to the patients page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTest.java-41:41
//check to confirm cannot schedule appointment with dead patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTest.java-47:47
//Login as HCP Kelly Doctor

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTest.java-66:66
//edit first entry to the desired time

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTest.java-75:75
//fill form

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTest.java-92:92
//click 'cancel'

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTest.java-95:95
//fill form

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTest.java-109:109
//confirm warning displayed and appointment not edited

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTest.java-115:115
//Login

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTest.java-123:123
//use the old search to go to the patients page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTest.java-129:129
//set up date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTest.java-134:134
//fill out form

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTest.java-149:149
//check to make sure warning displayed and add is not logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTest.java-157:157
//Login

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTest.java-162:162
//go to the View My Appointments link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTest.java-166:166
//confirm that appointments are showing

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTest.java-174:174
//Login

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTest.java-182:182
//use the old search to go to the patients page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTest.java-188:188
//set up date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTest.java-193:193
//fill out form

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTest.java-208:208
//check that the appointment was successfully added

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTest.java-216:216
//Login

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTest.java-224:224
//use the old search to go to the patients page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTest.java-230:230
//fill out form

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTest.java-245:245
//check to make sure that appointment with invalid date was not added

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTypeTest.java-23:23
// Create a new instance of the driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTypeTest.java-31:31
// HCP 9000000001 logs in.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTypeTest.java-36:36
// HCP 9000000001 moves to the edit appointment types page.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTypeTest.java-41:41
// HCP 9000000001 adds a new appointment type.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTypeTest.java-50:50
// HCP 9000000001 logs in.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTypeTest.java-55:55
// HCP 9000000001 moves to the edit appointment types page.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTypeTest.java-60:60
// HCP 9000000001 edits an existing appointment type.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTypeTest.java-69:69
// HCP 9000000001 logs in.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTypeTest.java-74:74
// HCP 9000000001 moves to the edit appointment types page.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTypeTest.java-79:79
// HCP 9000000001 edits an existing appointment type with a bad duration.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTypeTest.java-90:90
// HCP 9000000000 logs in.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTypeTest.java-95:95
// HCP 9000000000 moves to the schedule new appointment page.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTypeTest.java-99:99
// HCP 9000000000 selects patient 1

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTypeTest.java-104:104
// HCP 9000000000 inputs the appointment information and submits

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTypeTest.java-128:128
// Patient 2 logs in.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTypeTest.java-133:133
// Patient 2 moves to the view my appointments page.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTypeTest.java-137:137
// Create timestamp

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTypeTest.java-142:142
// Patient 2 checks for the right appointments

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTypeTest.java-178:178
// Create DB for this test case

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTypeTest.java-182:182
// HCP 9000000000 logs in.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTypeTest.java-187:187
// HCP 9000000000 moves to the view my appointments page.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTypeTest.java-191:191
// Create timestamp

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTypeTest.java-196:196
// HCP 9000000000 checks for the right appointments

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTypeTest.java-254:254
// HCP 9000000001 logs in.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTypeTest.java-259:259
// HCP 9000000001 moves to the edit appointment types page.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AppointmentTypeTest.java-264:264
// HCP 9000000001 edits an existing appointment type.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AuditPatientTest.java-25:25
//searching for patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AuditPatientTest.java-30:30
//typing out I understand

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AuditPatientTest.java-34:34
//asserting deletion

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AuditPatientTest.java-44:44
//searching for patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AuditPatientTest.java-49:49
//typing out I understand

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AuditPatientTest.java-53:53
//asserting deletion

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AuditPatientTest.java-63:63
//searching for patient 314159

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AuditPatientTest.java-69:69
//typing out I understand

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AuditPatientTest.java-73:73
//asserting activation

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AuditPatientTest.java-83:83
//searching for patient 314159

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AuditPatientTest.java-89:89
//typing out I understand

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\AuditPatientTest.java-93:93
//asserting activation

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-18:18
//log in as HCP Kelly Doctor

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-25:25
// HCP 9000000000 requests a report on patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-30:30
//checking number of rows

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-34:34
//Row 3 Date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-37:37
//Patient BMI

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-40:40
//Patient Weight Status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-44:44
//Row 2 Date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-47:47
//Patient BMI

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-50:50
//Patient Weight Status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-54:54
//Row 2 Date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-57:57
//Patient BMI

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-60:60
//Patient Weight Status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-67:67
//log in as HCP Kelly Doctor

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-74:74
// HCP 9000000000 requests a report on patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-79:79
//checking number of rows

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-83:83
//Row 3 Date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-86:86
//Patient BMI

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-89:89
//Patient Weight Status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-93:93
//Row 2 Date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-96:96
//Patient BMI

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-99:99
//Patient Weight Status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-103:103
//Row 1 Date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-106:106
//Patient BMI

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-109:109
//Patient Weight Status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-116:116
//log in as HCP Kelly Doctor

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-123:123
// HCP 9000000000 requests a report on patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-128:128
//checking number of rows

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-132:132
//Row 3 Date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-135:135
//Patient BMI

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-138:138
//Patient Weight Status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-142:142
//Row 2 Date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-145:145
//Patient BMI

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-148:148
//Patient Weight Status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-152:152
//Row 1 Date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-155:155
//Patient BMI

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-158:158
//Patient Weight Status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-164:164
//log in as HCP Kelly Doctor

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-171:171
// HCP 9000000000 requests a report on patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-176:176
//checking number of rows

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-180:180
//Row 2 Date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-183:183
//Patient BMI

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-186:186
//Patient Weight Status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-190:190
//Row 1 Date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-193:193
//Patient BMI

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-196:196
//Patient Weight Status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-202:202
//log in as HCP Kelly Doctor

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-209:209
// HCP 9000000000 requests a report on patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-214:214
//checking number of rows

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-218:218
//Row 3 Date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-221:221
//Patient BMI

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-224:224
//Patient Weight Status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-228:228
//Row 2 Date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-231:231
//Patient BMI

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-234:234
//Patient Weight Status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-238:238
//Row 1 Date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-241:241
//Patient BMI

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\BMICalculationTest.java-244:244
//Patient Weight Status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalculateMacronutrientsTest.java-21:21
// Login patient 1.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalculateMacronutrientsTest.java-26:26
// Navigate to the Macronutrients page.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalculateMacronutrientsTest.java-34:34
// Login patient 1.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalculateMacronutrientsTest.java-39:39
// Navigate to the Macronutrients page.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalculateMacronutrientsTest.java-48:48
// Login patient 1.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalculateMacronutrientsTest.java-52:52
// Navigate to the Macronutrients page.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalculateMacronutrientsTest.java-56:56
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalculateMacronutrientsTest.java-64:64
// Navigate to the Macronutrients page.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalculateMacronutrientsTest.java-68:68
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-19:19
// Create a new instance of the driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-25:25
//gen.officeVisit5();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-32:32
//gen.standardData();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-36:36
// Login

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-40:40
// Click Calendar

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-43:43
// check title

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-47:47
// check for the right appointments

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-61:61
// On the 5th: 1:30PM - General Checkup

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-64:64
// On the 18th: 8:00AM - Colonoscopy

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-68:68
// On the 28th: 9:00AM - Physical

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-76:76
// Login

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-80:80
// Click Calendar

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-83:83
// check title

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-87:87
// Patient 2 clicks the  487.00-Influenza  link on the 10th of the month.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-97:97
// Date of Visit: <current month> 10, <current year>.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-98:98
// Physician: Kelly Doctor.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-99:99
// Note: Terrible cough.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-100:100
// Diagnoses: 487-Influenza.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-101:101
// Medical Procedures: 1270F-Injection Procedure.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-102:102
// Lab Procedure: No laboratory procedures on record.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-103:103
// Medications Prescribed: No prescriptions on record.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-104:104
// Immunizations: 90657-Influenza virus vaccine, split.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-118:118
// Login

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-122:122
// Click Calendar

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-125:125
// check title

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-129:129
// Patient 2 clicks the  487.00-Influenza  link on the 10th of the month.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-138:138
//driver.findElement(By.partialLinkText("664662530-Penicillin-21")).click();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-140:140
// Date prescribed: <current month> 21, <current year>.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-141:141
// Physician: Gandalf Stormcrow.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-142:142
// Medication: 664662530-Penicillin.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-143:143
// Start Date: <Current month> 21, <current year>.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-144:144
// End Date: <60 days from the current date>.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-145:145
// Instructions: Administer every 6 hours after meals.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-153:153
// calculate date range

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-163:163
// Login

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-167:167
// Click Calendar

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-170:170
// check title

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-177:177
//get the second link with General Checkup-5

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-191:191
//ensure proper data is showing up

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CalendarTest.java-198:198
//get the current month and year

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ChangePasswordTest.java-19:19
// Create a new instance of the driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ChangePasswordTest.java-27:27
//Patient1 logs into iTrust

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ChangePasswordTest.java-31:31
//User goes to change password

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ChangePasswordTest.java-46:46
//User types in their current, new, and confirm passwords

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ChangePasswordTest.java-52:52
//User submits password change. Change logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ChangePasswordTest.java-56:56
//User logs out

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ChangePasswordTest.java-60:60
//User can log in with old password, but can't with new one

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ChangePasswordTest.java-72:72
//Patient1 logs into iTrust

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ChangePasswordTest.java-76:76
//User goes to change password

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ChangePasswordTest.java-91:91
//User types in their current, new, and confirm passwords

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ChangePasswordTest.java-97:97
//User submits password change. Change logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ChangePasswordTest.java-101:101
//User logs out

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ChangePasswordTest.java-105:105
//User can log in with old password, but can't with new one

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ChangePasswordTest.java-117:117
//Patient1 logs into iTrust

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ChangePasswordTest.java-121:121
//User goes to change password

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ChangePasswordTest.java-136:136
//User types in their current, new, and confirm passwords

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ChangePasswordTest.java-142:142
//User submits password change. Change logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ChangePasswordTest.java-146:146
//User logs out

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ChangePasswordTest.java-150:150
//User can log in with old password, but can't with new one

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ChangePasswordTest.java-162:162
//Patient1 logs into iTrust

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ChangePasswordTest.java-166:166
//User goes to change password

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ChangePasswordTest.java-181:181
//User types in their current, new, and confirm passwords

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ChangePasswordTest.java-187:187
//User submits password change. Change logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ChangePasswordTest.java-191:191
//User logs out

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ChangePasswordTest.java-195:195
//User can log in with old password, but can't with new one

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ComprehensiveReportingTest.java-11:11
//private static WebDriver driver = null;

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ComprehensiveReportingTest.java-15:15
// Create a new instance of the driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ComprehensiveReportingTest.java-16:16
//driver = new HtmlUnitDriver();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ComprehensiveReportingTest.java-23:23
// HCP 9000000000 logs in

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ComprehensiveReportingTest.java-28:28
// HCP 9000000000 moves to the add new report request page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ComprehensiveReportingTest.java-33:33
// HCP 9000000000 requests a report on patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ComprehensiveReportingTest.java-41:41
// HCP 9000000000 logs in

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ComprehensiveReportingTest.java-46:46
// HCP 9000000000 moves to the add new report request page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ComprehensiveReportingTest.java-51:51
// HCP 9000000000 requests a report on patient 260

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ComprehensiveReportingTest.java-58:58
// HCP 9000000000 logs in

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ComprehensiveReportingTest.java-63:63
// HCP 9000000000 moves to the add new report request page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ComprehensiveReportingTest.java-68:68
// HCP 9000000000 requests a report on patient 260

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ConsultationTest.java-17:17
// Create a new instance of the html unit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ConsultationTest.java-20:20
// Navigate to desired web page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ConsultationTest.java-31:31
// get the title of the page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ConsultationTest.java-33:33
// verify title

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ConsultationTest.java-44:44
// get the title of the page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ConsultationTest.java-46:46
// verify title

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ConsultationTest.java-57:57
// get the title of the page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ConsultationTest.java-59:59
// verify title

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreateHCPTest.java-20:20
//login as admin

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreateHCPTest.java-49:49
//login as admin

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreateLTSpecTest.java-11:16
/*** Makes sure the "specialty" field is available when adding an HCP,
* creates an HCP with the specialty "Medicine", and makes sure
* that HCP was successfully created.
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreateLTSpecTest.java-19:21
/*** Gives us the standard testing data
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreateLTSpecTest.java-28:30
/*** Test we can create HCP's as an admin
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreateLTSpecTest.java-32:32
//login admin

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreateLTSpecTest.java-38:38
//click on add hcp

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreateLTSpecTest.java-41:41
//add the hcp

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreateLTSpecTest.java-45:45
//fill in the information

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreateLTSpecTest.java-52:52
//get the dropdown options for the apptType

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreateLTSpecTest.java-54:54
//make sure there is such a field

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreateLTSpecTest.java-59:64
/* I know this seems crazy, selecting an option, and then creating* a new select option to make sure that the right option is selected
* before we even submit the form, but this is as close to the
* previous test this is based off of as I could
* think of making it.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreatePHATest.java-24:24
// Log in as an Admin.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreatePHATest.java-30:30
// Click on Add PHA.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreatePHATest.java-34:34
// Add the PHA.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreatePHATest.java-38:38
// Make sure the text displays.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreatePHATest.java-46:46
// Make sure nothing happened.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreateUAPTest.java-9:11
/*** Test class for iTrust creation of UAP's.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreateUAPTest.java-14:16
/*** Set up for testing by creating necessary data.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreateUAPTest.java-25:27
/*** Test creating a standard UAP. The form should submit without any issues.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreateUAPTest.java-45:52
/*** When creating a UAP, the entered email needs to be validated
* against the RFC3696 specification. This specification
* allows for quoted strings, escaped characters, and underscores.
*
* In this test, Joe Bob with the email _"joe@email"\\email@gmail.com
* should validate.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreateUAPTest.java-55:55
// Log in

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreateUAPTest.java-58:58
// Click on the add UAP link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreateUAPTest.java-61:61
// Fill in the fields

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreateUAPTest.java-67:67
// Submit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreateUAPTest.java-70:70
// Verify that the success text appears

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreditCardValidatorTest.java-22:22
// login patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreditCardValidatorTest.java-27:27
// click on My Demographics

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreditCardValidatorTest.java-58:58
// login patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreditCardValidatorTest.java-63:63
// click on My Demographics

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreditCardValidatorTest.java-88:88
// login patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreditCardValidatorTest.java-93:93
// click on My Demographics

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreditCardValidatorTest.java-123:123
// login patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreditCardValidatorTest.java-128:128
// click on My Demographics

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreditCardValidatorTest.java-153:153
// login patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreditCardValidatorTest.java-158:158
// click on My Demographics

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreditCardValidatorTest.java-188:188
// login patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreditCardValidatorTest.java-193:193
// click on My Demographics

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreditCardValidatorTest.java-217:219
/** AMEX stands for American Express.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreditCardValidatorTest.java-221:221
// login patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreditCardValidatorTest.java-226:226
// click on My Demographics

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreditCardValidatorTest.java-256:256
// login patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreditCardValidatorTest.java-261:261
// click on My Demographics

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreditCardValidatorTest.java-286:286
// login patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreditCardValidatorTest.java-291:291
// click on My Demographics

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreditCardValidatorTest.java-309:309
// login patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\CreditCardValidatorTest.java-314:314
// click on My Demographics

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependencyExtensionSeleniumTest.java-11:13
/*** Tests viewing/editing dependent's demographic information as the "dependee"
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependencyExtensionSeleniumTest.java-16:18
/*** set up standard test data
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependencyExtensionSeleniumTest.java-24:27
/*** Make sure the parent of a dependent can see the dependent's information.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependencyExtensionSeleniumTest.java-29:29
//add in the baby

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependencyExtensionSeleniumTest.java-33:33
//login

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependencyExtensionSeleniumTest.java-37:37
//make sure you can see baby

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependencyExtensionSeleniumTest.java-42:44
/*** Tests that you can edit one of your dependent's demographic data
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependencyExtensionSeleniumTest.java-46:46
//add in baby again

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependencyExtensionSeleniumTest.java-51:51
//make sure you can see baby

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependencyExtensionSeleniumTest.java-55:55
//get the form to update baby's info

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependencyExtensionSeleniumTest.java-61:61
//submit the form

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependencyExtensionSeleniumTest.java-67:69
/*** Test that without adding in baby, there are no dependents
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependencyExtensionSeleniumTest.java-74:74
//go to my demographics

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-24:29
/*** Tests adding a dependent / representative relationship to existing
* patients
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-31:31
// Log in.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-36:36
// Click on Representatives.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-39:39
// search for patient 103 by MID.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-41:41
// the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-46:46
// Add Caldwell Hudson as a representative

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-51:51
// Make sure the text displays.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-57:61
/*** Tests that a dependent cannot login
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-63:63
// Load UC58 data

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-66:66
// Try to log in (dependents can't).

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-76:76
// Make sure we didn't go anywhere.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-82:86
/*** Tests that a list of a depedent's representatives is displayed to them
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-88:88
// Load UC58 data

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-91:91
// Log in.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-96:96
// Click on Representatives.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-99:99
// search for patient 103 by MID.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-101:101
// the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-106:106
// Add Caldwell Hudson as a representative

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-111:111
// Make sure the text displays.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-117:121
/*** Tests to make sure representatives can't be dependents themselves
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-123:123
// Load UC58 data

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-126:126
// Log in.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-131:131
// Click on Representatives.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-134:134
// search for patient 103 by MID.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-136:136
// the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-141:141
// Make sure the text displays.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-152:152
// Load UC59 data

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-155:155
// Log in.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-160:160
// Click on Representatives.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-167:167
// Make sure the text displays.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-175:175
// Fill in medical records release form

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-212:212
// Load UC59 data

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-215:215
// Log in.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-220:220
// Click on Representatives.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-227:227
// Make sure the text displays.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-235:235
// Fill in medical records release form

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-272:272
// Load UC59 data

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-275:275
// Log in.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-280:280
// Click on Representatives.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-283:283
// search for patient 103 by MID.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-285:285
// the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-290:290
// Remove the representative.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-294:294
// Log in as Bob Ross.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-298:298
// Click on Add Patient.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-301:301
// Try to select Billy.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-303:303
// Should fail.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-316:316
// Load UC59 data

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-319:319
// Log in.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-324:324
// Click on Add Patient.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-337:337
// Load UC59 data

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-340:340
// Log in.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DependentsTest.java-345:345
// Click on Records Release Requests.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-9:12
/*** Tests that patients can choose a designated nutritionist
* who is the only person able to view their nutritional information.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-15:17
/*** Make sure we get the standard data for each call
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-25:27
/*** teardown all of the data
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-33:37
/*** Tests that a hcp cannot view a patient's food diary,
* the patient (who previously has no designated nutritionist) selects
* this hcp as his nutritionist, and then the hcp can view his food diary.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-40:40
//login as spencer reid

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-43:43
//search for the patient's food diary

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-46:46
//search for patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-48:48
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-51:51
//should be back at home page with exception

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-55:55
//driver.findElement(By.partialLinkText("Logout")).click();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-56:56
//now login as random person

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-62:62
//choose spencer reid as your nutritionist

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-74:74
//assert that it was logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-77:77
//now logout as random person and log back in as spencer reid

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-78:78
//driver.findElement(By.linkText("Logout")).click();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-81:81
//search for the patient's food diary

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-84:84
//search for patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-86:86
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-95:98
/*** Tests that a patient can select none as his designated nutritionist
* and that an hcp that could view his food diaries no longer can
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-101:101
//login as spencer reid

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-104:104
//search for the patient's food diary

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-107:107
//search for patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-109:109
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-116:116
//driver.findElement(By.partialLinkText("Logout")).click();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-117:117
//now login as Derek Morgan

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-123:123
//choose to have no nutritionist

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-135:135
//assert that it was logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-138:138
//now logout as random person and log back in as spencer reid

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-139:139
//driver.findElement(By.linkText("Logout")).click();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-142:142
//search for the patient's food diary

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-145:145
//search for patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-147:147
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-150:150
//should be back at home page with exception

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-156:158
/*** Change your designated nutritionist to a different hcp
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-161:161
//login as spencer reid

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-164:164
//search for the patient's food diary

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-167:167
//search for patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-169:169
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-176:176
//driver.findElement(By.partialLinkText("Logout")).click();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-178:178
//now check that Ben Matlock cannot view it

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-181:181
//search for the patient's food diary

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-184:184
//search for patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-186:186
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-189:189
//should be back at home page with exception

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-194:194
//now login as Derek Morgan

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-199:199
//choose ben matlock as your nutritionist

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-211:211
//assert that it was logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-214:214
//now logout as random person and log back in as spencer reid

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-215:215
//driver.findElement(By.linkText("Logout")).click();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-218:218
//search for the patient's food diary

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-221:221
//search for patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-223:223
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-226:226
//should be back at home page with exception

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-231:231
//now make sure ben matlock can view the diary

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-234:234
//search for the patient's food diary

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-237:237
//search for patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DesignateNutritionistTest.java-239:239
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DetermineOperationalProfileTest.java-21:24
/*** Precondition: Sample data is in the database. CreatePatient2 has passed.
* Login with user 9999999999 and password pw.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DetermineOperationalProfileTest.java-26:26
// login as uap and add a patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-12:14
/*** Tests that you can add new office visits as a UAP and HCP
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-17:19
/*** set up standard test data
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-25:34
/*** Authenticate UAP
* MID 8000000009
* Password: uappass1
* Choose "Document Office Visit"
* Enter Patient MID 1
* Enter Fields:
* Date: 2005-11-21
* Notes: "I like diet-coke"
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-36:36
//login UAP

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-40:40
//make sure we are on the home page for UAP's

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-43:43
//select to document an office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-45:45
//search for patient 1 by MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-48:48
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-51:51
//we should now be on the document office visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-55:55
//click the Yes, document office visit button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-66:66
//get the dropdown options for the apptType

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-71:71
//check that the creation was successful

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-77:87
/*** Authenticate HCP
* MID 9000000000
* Password: pw
* Choose Document Office Visit
* Enter Patient MID 2 and confirm
* Choose to document new office visit.
* Enter Fields:
* Date: 2005-11-2
* Notes: Great patient!
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-89:89
//login

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-94:94
//click Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-97:97
//search for patient 2 by MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-99:99
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-106:106
//click to document an office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-110:110
//now create an office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-121:121
//check that the creation was successful

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-126:136
/*** Authenticate HCP
* MID 9000000000
* Password: pw
* Choose Document Office Visit
* Enter Patient MID 2 and confirm
* Choose to document new office vist.
* Enter Fields:
* Date: 2005-11-21
* Notes: <script>alert('ha ha ha');</script>
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-138:138
//login

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-143:143
//click document office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-145:145
//choose patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-147:147
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-154:154
//click yes, document office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-159:159
//add a new office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-171:175
/*** Tests that the notes section of a new office visit can include
* a semicolon.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-177:177
//login UAP

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-181:181
//click document office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-183:183
//choose patient 1

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-185:185
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-192:192
//click yes, document office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-196:196
//add a new office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-208:217
/*** Authenticate UAP
* MID 8000000009
* Password: uappass1
* Choose Document Office Visit
* Enter Patient MID 1 and confirm
* Choose to document new office vist.
* Enter Fields:
* Date: 2005-11-21
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-219:219
//login UAP

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-223:223
//click document office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-225:225
//choose patient 1

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-227:227
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-234:234
//click yes, document office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DocumentOfficeVisitTest.java-237:237
//add a new office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\Driver.java-5:8
/*** Custom implementation of an HtmlUnitDriver
* that does not report js errors.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\Driver.java-10:12
/*** Construct a new driver and disable script error reporting.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DrugInteractionTest.java-36:36
// Warning: assertTextPresent may require manual changes

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DrugInteractionTest.java-40:46
/** Authenticate admin 90000000001
* Choose "Edit ND Codes"
* Choose "Tetracycline"
* Choose "Isotretinoin" interaction
* Click delete
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DrugInteractionTest.java-56:56
// Warning: assertTextPresent may require manual changes

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DrugInteractionTest.java-57:57
//assertTrue(driver.findElement(By.cssSelector("BODY")).getText().matches("^[\\s\\S]*Interaction deleted successfully[\\s\\S]*$"));

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DrugInteractionTest.java-73:73
// Warning: assertTextPresent may require manual changes

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DrugInteractionTest.java-78:86
/** Authenticate admin 90000000001
* Choose "Edit ND Codes"
* Choose "Edit Interactions"
* Choose "Adefovir" as one drug
* Choose "Aspirin" as the other drug
* Enter "May increase the risk and severity of nephrotoxicity due to additive effects on the kidney."
* Click submit
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DrugInteractionTest.java-96:96
//new Select(driver.findElement(By.name("drug1"))).selectByVisibleText("61958-0501 Adefovir");

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DrugInteractionTest.java-97:97
//new Select(driver.findElement(By.name("drug2"))).selectByVisibleText("08109-6 Aspirin");

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DrugInteractionTest.java-101:101
// Warning: assertTextPresent may require manual changes

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DrugInteractionTest.java-102:102
//assertTrue(driver.findElement(By.cssSelector("BODY")).getText().matches("^[\\s\\S]*Interaction recorded successfully[\\s\\S]*$"));

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DrugInteractionTest.java-105:112
/** Authenticate admin 90000000001
* Choose "Edit ND Codes"
* Choose "Edit Interactions"
* Choose "Adefovir" as both drug1 and drug2
* Enter "Mixing this drug with itself will cause the person taking it to implode."
* Click submit
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DrugInteractionTest.java-122:122
//((Select) driver.findElement(By.name("drug1"))).selectByVisibleText("61958-0501 Adefovir");

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DrugInteractionTest.java-123:123
//((Select) driver.findElement(By.name("drug2"))).selectByVisibleText("61958-0501 Adefovir");

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DrugInteractionTest.java-127:127
// Warning: assertTextPresent may require manual changes

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\DrugInteractionTest.java-128:128
//assertTrue(driver.findElement(By.cssSelector("BODY")).getText().matches("^[\\s\\S]*Interactions can only be recorded between two different drugs [\\s\\S]*$"));

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-9:12
/*** Tests that patients can edit and delete entries in their
* exercise diary.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-15:17
/*** Make sure we get the standard data for each call
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-24:26
/*** Test that a user can edit entries in their exercise diary.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-28:28
//need to enable javascript

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-36:38
/* now find the values individually (name:row#)have to do it by value since they are input fields
used for editing and deleting */


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-54:54
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-65:67
/* click the edit entry button* (each row in table has 14 and edit is 2nd last)
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-71:71
//update entry (need to re-get the values since they're now enabled

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-90:90
//now submit it

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-95:95
//now assert everything updated, including totals

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-111:111
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-123:126
/*** Tests that a Patient cannot enter invalid values
* when editing a Exercise Diary entry.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-128:128
//need to enable javascript

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-136:138
/* now find the values individually (name:row#)have to do it by value since they are input fields
used for editing and deleting */


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-154:154
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-165:167
/* click the edit entry button* (each row in table has 14 and edit is 2nd last)
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-171:171
//update entry (need to re-get the values since they're now enabled

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-190:190
//now submit it

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-195:195
//now assert everything updated, including totals

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-211:211
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-222:225
/*** Tests that a user will be presented with a popup before
* completely deleting an entry.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-233:236
/* make sure the values are right to begin withnow find the values individually (name:row#)
have to do it by value since they are input fields
used for editing and deleting */


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-252:252
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-263:263
//now click to delete the first entry

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-266:267
/*htmlunitdriver doesn't work with confirms well, and this is thebest workaround there is */


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-271:271
//assert entries and totals updated (Running is now the first entry)

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-287:287
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-295:298
/*** Tests that a user can cancel deletion of an entry and that
* nothing will happen.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-306:309
/* make sure the values are right to begin withnow find the values individually (name:row#)
have to do it by value since they are input fields
used for editing and deleting */


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-325:325
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-336:336
//now click to delete the first entry

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-339:340
/*htmlunitdriver doesn't work with confirms well, and this is thebest workaround there is */


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-344:344
//assert entries and totals updated (Running is now the first entry)

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-360:360
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-371:374
/*** Tests that a user cannot enter an invalid date
* when editing a exercise diary entry.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-376:376
//need to enable javascript

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-384:386
/* now find the values individually (name:row#)have to do it by value since they are input fields
used for editing and deleting */


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-402:402
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-413:415
/* click the edit entry button* (each row in table has 14 and edit is 2nd last)
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-419:419
//update entry (need to re-get the values since they're now enabled

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-438:438
//now submit it

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-443:443
//now assert everything updated, including totals

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteExerciseDiaryTest.java-459:459
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-10:13
/*** Tests that patients can edit and delete entries in their
* food diary.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-16:18
/*** Make sure we get the standard data for each call
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-25:27
/*** Test that a user can edit entries in their food diary.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-29:29
//need to enable javascript

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-37:39
/* now find the values individually (name:row#)have to do it by value since they are input fields
used for editing and deleting */


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-63:63
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-76:78
/* click the edit entry button* (each row in table has 14 and edit is 2nd last)
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-82:82
//update entry (need to reget the values since they're now enabled

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-104:104
//now submit it

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-109:109
//now assert everything updated, including totals

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-133:133
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-147:150
/*** Tests that a Patient cannot enter invalid values
* when editing a Food Diary entry.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-158:158
//assert that the original values are there

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-182:182
//second entry

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-206:206
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-219:219
//second entry of totals

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-229:229
//make sure javascript is enabled

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-232:232
//click to edit the first row

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-237:237
//now click to submit the edit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-242:242
//assert nothing changed

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-266:266
//second entry

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-290:290
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-302:302
//second entry of totals

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-313:316
/*** Tests that a user will be presented with a popup before
* completely deleting an entry.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-324:327
/* make sure the values are right to begin withnow find the values individually (name:row#)
have to do it by value since they are input fields
used for editing and deleting */


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-351:351
//get the second day's values

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-376:376
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-389:389
//now click to delete the first entry

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-393:394
/*htmlunitdriver doesn't work with confirms well, and this is thebest workaround there is */


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-398:398
//assert entries and totals updated

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-423:423
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-436:439
/*** Tests that a user can cancel deletion of an entry and that
* nothing will happen.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-447:447
//assert that the original values are there

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-471:471
//second entry

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-495:495
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-508:508
//second entry of totals

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-518:518
//now click to delete the first entry

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-522:523
/*htmlunitdriver doesn't work with confirms well, and this is thebest workaround there is */


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-527:527
//assert that nothing changed

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-551:551
//second entry

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-575:575
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-587:587
//second entry of totals

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-598:601
/*** Tests that a user cannot enter an invalid date
* when editing a food diary entry.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-609:609
//assert that the original values are there

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-633:633
//second entry

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-657:657
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-670:670
//second entry of totals

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-680:680
//make sure javascript is enabled

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-683:683
//click to edit the first row

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-689:689
//now click to submit the edit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-695:695
//assert nothing changed

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-719:719
//second entry

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-743:743
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteFoodDiaryTest.java-755:755
//second entry of totals

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-10:13
/*** Tests that patients can edit and delete entries in their
* sleep diary.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-16:18
/*** Make sure we get the standard data for each call
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-25:27
/*** Test that a user can edit entries in their sleep diary.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-29:29
//need to enable javascript

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-37:39
/* now find the values individually (name:row#)have to do it by value since they are input fields
used for editing and deleting */


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-47:47
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-56:58
/* click the edit entry button* (each row in table has 14 and edit is 2nd last)
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-62:62
//update entry (need to re-get the values since they're now enabled

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-69:69
//now submit it

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-74:74
//now assert everything updated, including totals

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-82:82
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-92:95
/*** Tests that a Patient cannot enter invalid values
* when editing a Sleep Diary entry.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-97:97
//need to enable javascript

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-105:107
/* now find the values individually (name:row#)have to do it by value since they are input fields
used for editing and deleting */


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-115:115
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-124:126
/* click the edit entry button* (each row in table has 14 and edit is 2nd last)
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-130:130
//update entry (need to re-get the values since they're now enabled

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-137:137
//now submit it

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-142:142
//now assert everything updated, including totals

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-150:150
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-159:162
/*** Tests that a user will be presented with a popup before
* completely deleting an entry.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-170:173
/* make sure the values are right to begin withnow find the values individually (name:row#)
have to do it by value since they are input fields
used for editing and deleting */


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-181:181
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-190:190
//now click to delete the first entry

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-193:194
/*htmlunitdriver doesn't work with confirms well, and this is thebest workaround there is */


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-198:198
//assert entries and totals updated (Nightly is now the first entry)

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-206:206
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-213:216
/*** Tests that a user can cancel deletion of an entry and that
* nothing will happen.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-224:227
/* make sure the values are right to begin withnow find the values individually (name:row#)
have to do it by value since they are input fields
used for editing and deleting */


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-235:235
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-244:244
//now click to delete the first entry

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-247:248
/*htmlunitdriver doesn't work with confirms well, and this is thebest workaround there is */


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-252:252
//assert entries and totals updated (Nightly is now the first entry)

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-260:260
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-269:272
/*** Tests that a user cannot enter an invalid date
* when editing a sleep diary entry.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-274:274
//need to enable javascript

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-282:284
/* now find the values individually (name:row#)have to do it by value since they are input fields
used for editing and deleting */


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-292:292
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-301:303
/* click the edit entry button* (each row in table has 14 and edit is 2nd last)
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-307:307
//update entry (need to re-get the values since they're now enabled

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-314:314
//now submit it

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-319:319
//now assert everything updated, including totals

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditAndDeleteSleepDiaryTest.java-327:327
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditApptTest.java-64:64
//should be the last one

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditDemographicsTest.java-20:29
/** Authenticate UAP:
* MID: 8000000009
* Password: uappass1
* Choose Edit Patient.
* Select patient 2 and confirm.
* Change Field:
* Email address: ""
* Confirm and approve the selection
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditDemographicsTest.java-31:31
// login uap

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditDemographicsTest.java-38:38
// choose Edit Patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditDemographicsTest.java-39:39
// choose patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditDemographicsTest.java-43:43
// update email address to be blank

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditDemographicsTest.java-47:47
// Make sure error was thrown

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditDemographicsTest.java-52:63
/** Authenticate UAP:
* MID: 8000000009
* Password: uappass1
* Choose Edit Patient.
* Select patient 2 and confirm.
* Change Field:
* Street address 1: 100 New Address
* City: New Bern
* Zip: 28562
* Confirm and approve the selection
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditDemographicsTest.java-65:65
// login uap

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditDemographicsTest.java-72:72
// choose Edit Patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditDemographicsTest.java-73:73
// choose patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditDemographicsTest.java-77:77
// update street address, city and zip code

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditDemographicsTest.java-90:98
/** Authenticate UAP:
* MID: 8000000009
* Password: uappass1
* Choose Edit Patient.
* Select patient 2 and confirm.
* Change Field Street address 2 to a blank.
* Confirm and approve the selection
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditDemographicsTest.java-100:100
// login uap

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditDemographicsTest.java-107:107
// choose Edit Patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditDemographicsTest.java-108:108
// choose patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditDemographicsTest.java-112:112
// update email address to be blank

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditDemographicsTest.java-116:116
// Make sure the patient can have a blank address two

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditDemographicsTest.java-121:129
/** Authenticate UAP:
* MID: 8000000009
* Password: uappass1
* Choose Edit Patient.
* Select patient 2 and confirm.
* Change phone to xxx-xxx-xxxx
* Confirm and approve the selection
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditDemographicsTest.java-131:131
// login uap

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditDemographicsTest.java-138:138
// choose Edit Patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditDemographicsTest.java-139:139
// choose patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditDemographicsTest.java-143:143
// update email address to be blank

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditDemographicsTest.java-148:148
// Make sure that the form was not validated correctly

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditDemographicsTest.java-154:154
// login as Patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditDemographicsTest.java-159:159
// choose My Demographics

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditDiagnosesTest.java-33:33
// Warning: assertTextPresent may require manual changes

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditDiagnosesTest.java-48:48
// Warning: assertTextPresent may require manual changes

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditDiagnosesTest.java-75:75
// Warning: assertTextPresent may require manual changes

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditLOINCDataHTTPTest.java-27:27
// Create the explicit wait

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditLOINCDataHTTPTest.java-40:40
// Import the LOINC database file

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditLOINCDataHTTPTest.java-48:48
// Check the Edit LOINC page for the updated codes

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditLOINCDataHTTPTest.java-60:60
// Create the explicit wait

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditLOINCDataHTTPTest.java-74:74
// Warning: assertTextNotPresent may require manual changes

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditLOINCDataHTTPTest.java-82:82
// Create the explicit wait

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditLOINCDataHTTPTest.java-103:103
// Create the explicit wait

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditPatientTest.java-24:24
//set up for the start location and driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditPatientTest.java-30:30
//log in processes

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditPatientTest.java-36:36
//make sure that it correctly log-in as HCP

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditPatientTest.java-46:46
//Does the search

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditPatientTest.java-50:50
//check if it on the page correctly

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditPatientTest.java-56:56
//enters a bad date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditPatientTest.java-62:62
//checks for the error message for bad date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditPatientTest.java-73:73
//set up for the start location and driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditPatientTest.java-95:95
//check if its on the correct page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditPatientTest.java-102:102
//clears and enters a email

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditPatientTest.java-107:107
//get the massage that the info has been updated

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditPatientTest.java-113:113
//submits

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditPatientTest.java-116:116
//checks for new email

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditPatientTest.java-127:127
//set up for the start location and driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditPatientTest.java-154:154
//enters bad info for mothers and fathers MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditPatientTest.java-161:161
//gets error message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditPatientTest.java-172:172
//set up for the start location and driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EditPatientTest.java-200:200
//check that its not there

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EmergencyUseCaseTest.java-22:22
//set up for the start location and driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EmergencyUseCaseTest.java-28:28
//log in processes

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EmergencyUseCaseTest.java-35:35
//check that the login correctly as ER

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EmergencyUseCaseTest.java-44:44
//check that it goes to correct page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EmergencyUseCaseTest.java-46:46
//does search

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\EmergencyUseCaseTest.java-49:49
//check page content

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-17:22
/*** Tests the functionality of the new Exercise Diary portion of iTrust. Tests
* that you can add new entries, you can view entries, HCPs with the role of
* trainer can view entries, and error checks that the user enters the
* appropriate data in the appropriate format.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-25:27
/*** Sets up the standard testing data.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-33:37
/*** Tests that a patient can add an entry to an empty Exercise Diary.
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-54:54
// view my exercise diary so we can add a new entry

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-62:62
// now fill in all of the info and submit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-90:90
// Ensure the entry was added.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-107:111
/*** Tests that a patient can add an entry to a non empty exercise diary.
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-118:118
// Get the first values.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-134:134
// Get the second values.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-146:146
// Assert that the totals are correct.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-156:156
// Add a new entry.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-161:161
// Enter new entry.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-180:180
// Make sure the new entry shows up with the old entries.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-219:219
// Assert the totals are correct.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-235:239
/*** Tests that HCPs can view a patients exercise diary.
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-246:246
// search for patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-248:248
// the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-253:253
// different way of viewing it since viewing it through HCP

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-271:275
/*** Tests that HCPs can sort a patients exercise diary.
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-296:296
// search for patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-298:298
// the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-303:303
// Only show May 2013 entries.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-313:313
// different way of viewing it since viewing it through HCP

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-323:327
/*** Tests that HCPs can sort a patients exercise diary.
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-348:348
// search for patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-350:350
// the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-355:355
// Only show May 2013 entries.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-367:367
// different way of viewing it since viewing it through HCP

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-386:390
/*** Tests that HCPs can sort a patients exercise diary.
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-411:411
// search for patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-413:413
// the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-418:418
// Only show May 2013 entries.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-429:429
// different way of viewing it since viewing it through HCP

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-448:453
/*** Tests to ensure that a patient has to enter something for the exercise
* name.
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-466:466
// Leave out the exercise name

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-483:483
// should stay on same page and have error message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-490:495
/*** Tests to ensures users have to enter dates in the correct format
* (mm/dd/yy).
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-508:508
// Enter an improper date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-525:525
// should stay on same page and have error message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-530:535
/*** Tests to ensure that HCPs can view a Patient's Exercise Diary when it is
* empty.
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-542:542
// search for patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-544:544
// the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-553:557
/*** Tests that you are not allowed to set the number of hours to 0.
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-570:570
// now enter 0 for hours

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-587:587
// should stay on same page and have error message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-592:596
/*** Tests to ensure that you cannot enter a negative number of calories.
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-609:609
// now enter negative number for calories

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExerciseDiaryTest.java-626:626
// should stay on same page and have error message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExperiencedLHCPsUseCaseTest.java-28:28
// Create the explicit wait

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExperiencedLHCPsUseCaseTest.java-47:47
// Create the explicit wait

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ExperiencedLHCPsUseCaseTest.java-65:65
// Create the explicit wait

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-13:15
/** This is the Selenium equivalent of FindExpertTest.java
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-18:20
/*** Selenium html unit driver.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-23:25
/*** MID of the test user "Random Person"
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-28:30
/*** Default user password.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-33:35
/*** Build the absolute URL for Find Expert off of the base URL and relative url.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-38:42
/*** Set up for testing by clearing and recreating
* all standard data, then performing UC47
* specific data generation.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-51:53
/*** Remove the UC47 specific data and clear all tables.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-61:61
// login admin

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-67:67
// click on Edit Personnel

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-69:69
// find hcp

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-76:76
//focus

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-78:78
//submit the form

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-89:89
//logout admin

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-93:93
//login patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-99:99
//click on Find an Expert

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-104:104
//Search for surgeon

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-114:121
/*** Test the displayed distances when searching for an expert. According to the iTrust Wiki
* experts should be displayed by hospital location, not by their personal listed address.
*
* EX: A doctor that lives in New York but is a provider for a hospital in Raleigh, NC
* should be displayed as from Raleigh, NC. When a user from Raleigh, NC searches for an
* expert, that doctor should be displayed with a distance of zero miles.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-123:123
// Login as Random User

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-126:126
// Navigate to the Find Expert page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-129:129
// Verify Specialty: All Doctors, ZIP Code: 27606, Distance: All, Sort By: Distance

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-146:146
// Submit the form

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-149:149
// Verify display distances for two of the doctors.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-150:150
// Kelly Doctor: Lives in New York, NY and practices in Raleigh, NC.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-151:151
// Shelly Vang: Lives in Greensboro, NC and practecesin Greensboro, NC.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-153:153
// Get container elements that group doctor information

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-156:156
// Number of doctors found

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-159:159
// Search through the list of doctors

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-162:162
// Get the doctor name

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-166:166
// Get the doctor's displayed distance

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-169:169
// If doctor is Shelly Vang, verify display distance is 62 miles

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-174:174
// If doctor is Kelly Doctor, verify display distance is 0 miles.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-179:179
// If doctor is John Zoidberg, verify distance is unknown (invalid zip)

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-186:186
// Sanity check and verify that both doctors were found in the list.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-187:187
// If neither was found there may be an underlying issue with the feature

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FindExpertTest.java-188:188
// or the structure of the html page may have changed.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-11:16
/*** Tests the functionality of the new Food Diary portion of iTrust.
* Tests that you can add new entries, you can view entries, HCPs with the role
* of nutritionist can view entries, and error checks that the user enters the appropriate
* data in the appropriate format.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-19:21
/*** Sets up the standard testing data.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-27:30
/*** Tests that a patient can add an entry to an empty Food Diary.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-35:35
//view my food diary so we can add a new entry

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-43:43
//now fill in all of the info and submit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-80:82
/*	now find the values individually (name:row#)have to do it by value since they are input fields
used for editing and deleting */


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-108:111
/*** Tests that a patient can add an entry to a non empty food diary.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-118:121
/* make sure the values are right to begin withnow find the values individually (name:row#)
have to do it by value since they are input fields
used for editing and deleting */


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-145:145
//get the second day's values

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-170:170
//now assert that the totals are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-183:183
//go to add a new entry

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-188:188
//enter new entry

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-225:225
//make sure the new entry shows up with the old entries

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-249:249
//get the second day's values

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-274:274
//get the third day's values

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-299:301
/* assert the totals are correct* (7 values per unique date)
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-313:313
//second date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-324:327
/*** Tests that HCPs can view a patients food diary.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-334:334
//search for patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-336:336
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-340:340
//different way of viewing it since viewing it through HCP

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-369:372
/*** Tests that HCPs can sort a patients food diary.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-379:379
//search for patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-381:381
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-385:385
// Only show May 2013 entries.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-395:395
//different way of viewing it since viewing it through HCP

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-412:415
/*** Tests that HCPs can sort a patients food diary.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-422:422
//search for patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-424:424
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-428:428
// Only show May 2013 entries.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-439:439
//different way of viewing it since viewing it through HCP

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-462:465
/*** Tests that HCPs can sort a patients food diary.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-472:472
//search for patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-474:474
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-478:478
// Only show May 2013 entries.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-489:489
//different way of viewing it since viewing it through HCP

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-512:515
/*** Tests to ensure that a patient has to enter something for the food name.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-528:528
//now leave out a food name

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-563:563
//should stay on same page and have error message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-570:574
/*** Tests to ensures users have to enter dates in the correct format
* (mm/dd/yy).
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-587:587
//now enter improper date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-622:622
//should stay on same page and have error message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-629:633
/*** Tests to ensure that HCPs can view a Patient's Food Diary when it is
* empty.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-640:640
//search for patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-642:642
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-650:653
/*** Tests that you are not allowed to set the number of servings to 0.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-666:666
//now enter 0 for servings

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-701:701
//should stay on same page and have error message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-708:711
/*** Tests to ensure that you cannot enter a negative number of calories.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-724:724
//now enter negative number for calories

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\FoodDiaryTest.java-759:759
//should stay on same page and have error message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\GetPatientIDTest.java-15:17
/*** Selenium test conversion for HttpUnit GetPatientIDTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\GetPatientIDTest.java-33:35
/** Tests if back-end "Select Patient" function is connected to front-end JSP
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\GetPatientIDTest.java-53:53
//click on the "Select Patient" button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\GetPatientIDTest.java-60:60
//click on the "Select Patient" button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\GetVisitRemindersTest.java-21:23
/*** Use Case 17, Selenium test conversion for HttpUnit GetVisitRemindersTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\GetVisitRemindersTest.java-35:35
// Implicitly wait at most 2 seconds for each element to load

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\GetVisitRemindersTest.java-40:42
/** Test navigation to iTrust - Visit Reminders page
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\GetVisitRemindersTest.java-63:65
/** Test access to visit reminders for Diagnosed Care Needers
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\GetVisitRemindersTest.java-107:109
/** Test access to visit reminders for Flu Shot Needers
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\GetVisitRemindersTest.java-159:161
/** Test access to visit reminders for Immunization Needers
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\GroupReportTest.java-23:25
/*** Selenium test conversion for HttpUnit GroupReportTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\GroupReportTest.java-41:43
/** Matches acceptance test scenario
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\GroupReportTest.java-77:79
/** Filters by demographic filters
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\GroupReportTest.java-142:144
/** Filters by medical filters
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\GroupReportTest.java-194:196
/** Filters by personnel filters
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\GroupReportTest.java-219:221
/** Test viewing unselected MID
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\GroupReportTest.java-241:243
/** Tests invalid entries for age, solely for code coverage purposes
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\GroupReportTest.java-269:271
/** Test function of pressing the "download" button
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\GroupReportTest.java-290:290
//NOTE: After clicking "Download" button, iTrust is redirecting to home page (unexpected)

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\GroupReportTest.java-291:291
//Existing error in XML download functionality

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\GroupReportTest.java-292:292
//driver.findElement(By.name("download")).submit();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\GroupReportTest.java-297:299
/** Tests downloading XML file
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\GroupReportTest.java-316:316
//This is testing an element that currently does not exist on the JSP

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\GroupReportTest.java-317:317
//in the first place

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\GroupReportTest.java-322:322
//Exception is good

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\GroupReportTest.java-318:326
/*try {
driver.findElement(By.name("Download XML Report"));
} catch(NoSuchElementException e) {
return;
}
fail("Should have thrown NoSuchElementException.");
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\HealthDataChartTest.java-20:22
/*** Selenium test conversion for HttpUnit HealthDataChartTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\HealthDataChartTest.java-39:41
/** Test ability to view line chart for patient weight
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\HealthDataChartTest.java-65:67
/** Test if patient BMI is viewable
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\HealthDataChartTest.java-98:100
/** Test ability to view line chart for patient height
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImmunizationReportTest.java-21:23
/*** Selenium test conversion for HttpUnit ImmunizationReportTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImmunizationReportTest.java-38:40
/** Test Kindergarten-age patient viewing immunization report
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImmunizationReportTest.java-106:108
/** Test data for sixth-grade patient viewing immunization report
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImmunizationReportTest.java-129:129
//Check the eight immunizations received by Natalie Portman

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImmunizationReportTest.java-139:139
//Check logging

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImmunizationReportTest.java-144:146
/** Test data for an adult patient viewing his own immunization report
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImmunizationReportTest.java-161:161
//Check the three immunizations received by Will Smith

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImmunizationReportTest.java-166:166
//Check that no immunizations are required

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImmunizationReportTest.java-169:169
//Check logging

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImmunizationReportTest.java-174:176
/** Test data for patient with immunizations needed
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImmunizationReportTest.java-197:197
//Check logging

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImmunizationReportTest.java-202:204
/** Test immunization of patient with previous Chicken Pox diagnosis
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImmunizationReportTest.java-226:226
//Check that no immunizations are logged as required.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImmunizationReportTest.java-229:229
//Check logging

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImmunizationReportTest.java-234:236
/** Test for patient over maximum vaccine age
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImmunizationReportTest.java-251:251
//Check that no immunizations logged as received

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImmunizationReportTest.java-256:256
//Check logging

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImmunizationReportTest.java-260:262
/** Test HCP viewing patient immunization records
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImmunizationReportTest.java-282:282
//Check that no immunizations logged as received

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImmunizationReportTest.java-287:287
//Check logging

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImmunizationUseCasesTest.java-25:28
/*** Use Cases 9, 11 & 17
* Selenium conversion for HttpUnit ImmunizationUseCasesTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImmunizationUseCasesTest.java-42:44
/** Test viewing immunizations for Bowser Koopa and Princess Peach
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImmunizationUseCasesTest.java-75:77
/** Test viewing immunization records
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImmunizationUseCasesTest.java-120:122
/** Test viewing immunization records with "no data"
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImmunizationUseCasesTest.java-142:144
/** HCP views immunization records of Patient (MID 6)
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImmunizationUseCasesTest.java-169:171
/** HCP views and updates immunizations of Patient (MID 7)
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImportNDCodesTest.java-19:21
/*** Selenium conversion test for HttpUnit ImportNDCodesTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImportNDCodesTest.java-37:39
/** Test that drugs can be updated from a list
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImportNDCodesTest.java-74:76
/** Test that a new list of drugs can update an existing list
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImportNDCodesTest.java-133:135
/** Test the return button
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImportNDCodesTest.java-191:193
/** Test file generator 1
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ImportNDCodesTest.java-208:210
/** Test file generator 2
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\InsuranceNotificationTest.java-12:14
/** The URL for iTrust, change as needed
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\InsuranceNotificationTest.java-15:15
/**ADDRESS*/

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\InsuranceNotificationTest.java-18:18
//MIDs for various people.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\InsuranceNotificationTest.java-27:27
//password for users.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\InsuranceNotificationTest.java-39:39
// turn off htmlunit warnings

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\InsuranceSubmissionTest.java-13:15
/** The URL for iTrust, change as needed
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\InsuranceSubmissionTest.java-16:16
/**ADDRESS*/

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\InsuranceSubmissionTest.java-20:20
//MIDs for various users.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\InsuranceSubmissionTest.java-29:29
//Passwords

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\InsuranceSubmissionTest.java-41:41
// turn off htmlunit warnings

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\iTrustSeleniumTest.java-18:21
/*** There's nothing special about this class other than adding a few handy test utility methods and
* variables. When extending this class, be sure to invoke super.setUp() first.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\iTrustSeleniumTest.java-23:25
/** The URL for iTrust, change as needed
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\iTrustSeleniumTest.java-26:26
/**ADDRESS*/

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\iTrustSeleniumTest.java-28:28
/**gen*/

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\iTrustSeleniumTest.java-31:31
/** Default timeout for Selenium webdriver */

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\iTrustSeleniumTest.java-34:40
/*** Name of the value attribute of html tags.
* Used for getting the value from a form input
* with .getAttribute("value"). Was previously
* .getAttribute(VALUE) before being removed by s
* selenium.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\iTrustSeleniumTest.java-48:57
/*** Helper method for logging in to iTrust
*
* Also creates an explicit WebDriverWait for optional use.
*
* @param username username
* @param password password
* @return {@link WebConversation}
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\iTrustSeleniumTest.java-59:59
// begin at the iTrust home page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\iTrustSeleniumTest.java-62:62
// Implicitly wait at most 2 seconds for each element to load

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\iTrustSeleniumTest.java-66:66
// log in using the given username and password

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\iTrustSeleniumTest.java-80:87
/*** assertLogged
* @param code code
* @param loggedInMID loggedInMID
* @param secondaryMID secondaryMID
* @param addedInfo addedInfo
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\iTrustSeleniumTest.java-93:93
// Selenium on jenkins sometimes has issues finding a log the first time.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\iTrustSeleniumTest.java-94:94
// The proper solution would be to add explicit waits, but it is easier

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\iTrustSeleniumTest.java-95:95
// to wait a second and try again.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\iTrustSeleniumTest.java-121:128
/*** assertLogged
* @param code code
* @param loggedInMID loggedInMID
* @param secondaryMID secondaryMID not used
* @param addedInfo addedInfo
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\iTrustSeleniumTest.java-150:157
/*** assertNotLogged
* @param code code
* @param loggedInMID loggedInMID
* @param secondaryMID secondaryMID
* @param addedInfo addedInfo
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-13:15
/*** Sets up the standard testing data.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-21:24
/*** Tests a patient can create a new label when there
* are no other labels
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-29:29
//go to label management page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-33:33
//add a label name, use default label color - white/#FFFFFF

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-39:39
//table contains text boxes for editting purposes

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-40:40
//so we need to get the value inside the textbox

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-45:47
/*** Tests a patient can edit a label
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-49:49
//need to enable javascript

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-57:57
//add a label name, use default label color - white/#FFFFFF

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-63:63
//edit the label name field and submit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-72:72
//table contains text boxes for editting purposes

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-73:73
//so we need to get the value inside the textbox

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-79:81
/*** Tests a patient can delete a label
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-83:83
//need to enable javascript

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-91:91
//add a "Test" label

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-96:96
//add "Test 2" label

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-106:108
/*** Tests a patient can apply a label to their food diary
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-110:110
//need to enable javascript

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-115:115
//view my food diary so we can add a new entry

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-121:121
//now fill in all of the info and submit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-157:157
//navigate to My Labels page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-162:162
//add a "Test" label

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-168:168
//Select food diary, label, start and end dates and apply the label

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-181:181
//go back to view my food diary

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-185:185
//make sure the label was applied

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-191:193
/*** Tests a patient can apply a label to their exercise diary
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-195:195
//need to enable javascript

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-200:200
//navigate to My Labels page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-205:205
//add a "Test" label

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-211:211
//Select exercise diary, label, start and end dates and apply the label

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-224:224
//go to view my exercise diary

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-228:228
//make sure the label was applied

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-234:236
/*** Tests a patient can apply a label to their sleep diary
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-238:238
//need to enable javascript

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-243:243
//navigate to My Labels page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-248:248
//add a "Test" label

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-254:254
//Select sleep diary, label, start and end dates and apply the label

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-267:267
//go to view my sleep diary

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabelsTest.java-271:271
//make sure the label was applied

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabProceduresTest.java-12:14
/** The URL for iTrust, change as needed
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabProceduresTest.java-15:15
/**ADDRESS*/

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabProceduresTest.java-60:60
//		selectComboValue("loinc", "10666-6", driver);

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LabProceduresTest.java-61:61
//	selectComboValue("labProcPriority", "1", driver);

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LoginTest.java-15:17
/*** Test class for logging into iTrust.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LoginTest.java-20:22
/** The URL for iTrust, change as needed
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LoginTest.java-23:23
/**ADDRESS*/

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LoginTest.java-26:28
/*** Set up for testing.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LoginTest.java-33:33
// turn off htmlunit warnings

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LoginTest.java-39:41
/*** Tear down from testing.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LoginTest.java-46:50
/*** Test the behavior expected when a user enters a non numeric
* string into the username box. iTrust currently excpects
* to see a NumberFormatException.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LoginTest.java-55:55
// log in using the given username and password

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LoginTest.java-64:67
/*** Test the standard login feature. After logging in, a user should end up
* at the itrust home page, and the login should be logged.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LoginTest.java-69:69
// Log in as a patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LoginTest.java-72:72
// Wait until redirected to page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\LoginTest.java-76:76
// Verify Logging

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\MaintainStandardsTest.java-10:12
/** The URL for iTrust, change as needed
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\MaintainStandardsTest.java-13:13
/**ADDRESS*/

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\MaintainStandardsTest.java-23:23
// turn off htmlunit warnings

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ManageHospitalListingTest.java-10:12
/** The URL for iTrust, change as needed
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ManageHospitalListingTest.java-13:13
/**ADDRESS*/

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ManageHospitalListingTest.java-22:22
// turn off htmlunit warnings

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\MessagingUseCaseTest.java-17:19
/** The URL for iTrust, change as needed
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\MessagingUseCaseTest.java-20:20
/**ADDRESS*/

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\MessagingUseCaseTest.java-30:30
// turn off htmlunit warnings

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\MessagingUseCaseTest.java-105:105
//selectComboValue("dlhcp", "9000000003", driver);

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\MonitorAdverseEventTest.java-10:12
/** The URL for iTrust, change as needed
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\MonitorAdverseEventTest.java-13:13
/**ADDRESS*/

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\MonitorAdverseEventTest.java-25:25
//gen.patient2();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\MonitorAdverseEventTest.java-30:30
// turn off htmlunit warnings

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\NDCodeTest.java-10:12
/** The URL for iTrust, change as needed
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\NDCodeTest.java-13:13
/**ADDRESS*/

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\NDCodeTest.java-27:27
// turn off htmlunit warnings

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\NotificationAreaTest.java-12:14
/** The URL for iTrust, change as needed
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\NotificationAreaTest.java-15:15
/**ADDRESS*/

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\NotificationAreaTest.java-25:25
// turn off htmlunit warnings

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\NotificationAreaTest.java-41:41
//String tomorrow = formatter.format(new Date((new Date()).getTime() + 86400000));

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-21:24
/*** test adding an initial record for a patient w/ no prior pregs
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-27:27
// login HCP Kathryn Evans

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-31:31
//find patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-38:38
//click initialize

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-45:45
//fill form and submit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-55:55
//success?

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-64:67
/*** test adding an initial record for a patient w/ 2 prior pregs
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-69:69
// login HCP Kathryn Evans

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-73:73
//find patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-83:83
//click initialize

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-90:90
//enter Data

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-97:97
//submit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-101:101
//check success

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-110:110
// login HCP Kathryn Evans

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-115:115
//find patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-123:123
//click initialize

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-129:129
//enter Data

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-137:137
//prior preg form

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-157:157
//List<WebElement> ops = deliveryType.getOptions();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-176:176
// login HCP Kathryn Evans

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-182:182
//find patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-193:193
//find patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-205:205
// login HCP Kathryn Evans

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-221:221
// login HCP Kathryn Evans

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-226:226
//find patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-233:233
//click initialize

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-260:260
// login HCP Harry Potter

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-264:264
//find patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-278:278
// login HCP Kathryn Evans

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-284:284
//find patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-308:308
// login HCP Kathryn Evans

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-313:313
//find patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-330:330
// login HCP Kathryn Evans

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-335:335
//find patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-340:340
//enable js and go to add office vist

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-346:346
//fill in form and create

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-368:368
// login HCP Kathryn Evans

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-373:373
//find patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-382:382
//WebElement test = wd.findElement(By.id("lmp"));

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-422:422
//find patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-430:430
// login HCP Kathryn Evans

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-435:435
//find patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-461:461
// login HCP Kathryn Evans

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-473:483
/*** initialize patient
* Verify twins not set in initial record
* add office visit without twins checked
* verify twins not set
* edit office visit, check twins
* verify twins set
* edit office visit, uncheck twins
* verify twins not set
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-485:485
// login HCP Kathryn Evans

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-571:581
/*** initialize patient
* verify placenta flag not set
* add office visit, without placenta checked
* verify placenta flag not set
* edit office visit, check placenta
* verify placenta flag set
* edit office visit, uncheck placenta
* verify placenta flag not set
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-583:583
// login HCP Kathryn Evans

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-658:658
// login HCP Kathryn Evans

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-716:716
// login HCP Kathryn Evans

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-772:772
// login HCP Kathryn Evans

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-784:784
//initialize patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-805:805
//set boundary value for abnormal fhr

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-820:820
//make sure abnormal fhr flag not set

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-844:844
// login HCP Kathryn Evans

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-860:860
//WebElement we1 = wd.findElement(By.id("description"));

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-872:872
// login HCP Kathryn Evans

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-888:888
//WebElement we1 = wd.findElement(By.id("description"));

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-903:903
// login HCP Kathryn Evans

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-919:919
//WebElement we1 = wd.findElement(By.id("description"));

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-933:933
// login HCP Kathryn Evans

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-973:973
// login HCP Kathryn Evans

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ObstetricsTest.java-1014:1014
//WebElement we1 = wd.findElement(By.id("description"));

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-19:19
//@Before

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-32:32
//look at my bills

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-37:37
//fill out the information

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-55:55
//submit it and assert that it was logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-65:65
//look at my bills

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-69:69
//fill out the information (it is bad)

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-88:88
//submit the form and confirm it doesn't get put through

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-99:99
//check the first bill

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-107:107
//check the next one

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-117:117
//document an office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-119:119
//search for patient 1 by MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-122:122
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-124:124
//now have to say yes document office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-128:128
//fill out the information

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-138:138
//logout

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-142:142
//login as patient 309

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-147:147
//fill out the info and submit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-174:174
//document an office visit for patient 310

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-176:176
//search for patient 1 by MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-179:179
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-181:181
//now have to say yes document office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-194:194
//logout

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-198:198
//login as patient 310

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-224:224
//check that it has the right info

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-232:232
//check the next one

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-261:261
//now logout

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-267:267
//document an office visit patient 310

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-269:269
//search for patient 1 by MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-272:272
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-274:274
//now have to say yes document office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-278:278
//fill out the info

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-288:288
//logout

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-292:292
//login as 310

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-301:301
//document an office visit for patient 310

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-303:303
//search for patient 1 by MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-306:306
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-308:308
//now have to say yes document office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-319:319
//now logout

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OfficeVisitBillingTest.java-323:323
//login as 310 again

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-11:13
/*** Selenium test cases for the Ophthalmology Office Visit feature in UC83.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-16:18
/*** Sets up the required base data needed for each test case. This includes two HCP's and two patients.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-29:31
/*** Clears the database after each test.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-36:39
/*** Selenium test for UC85 Acceptance Scenario 1. Diagnoses Cataracts
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-41:41
//Login as Brooke Tran

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-45:45
//Click the Add Ophthalmology Office Visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-48:48
//Select Brody Franco as the patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-54:54
//Enable javascript

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-57:57
//fill in form and create

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-85:85
//Verify that we are returned to the Ophthalmology Homepage

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-89:89
//Verify that the action was logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-93:93
//Verify that the newly created office visit is present in the Prior Office Visits list

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-101:104
/*** Selenium test for UC85 Acceptance Scenario 2, tests patient view of Scenario 1
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-106:106
//Set up the outcome of Scenario 1

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-109:109
//Login as Brody Franco

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-113:113
//Click the View Ophthalmology Office Visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-116:116
//Click the proper office visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-119:119
//Verify that the action was logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-122:122
//Verify that the Office Visit it shown

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-136:139
/*** Selenium test for UC85 Acceptance Scenario 3. Diagnoses No disease
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-141:141
//Login as Brooke Tran

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-145:145
//Click the Add Ophthalmology Office Visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-148:148
//Select Brody Franco as the patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-154:154
//Enable javascript

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-157:157
//fill in form and create

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-183:183
//Verify that we are returned to the Ophthalmology Homepage

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-187:187
//Verify that the action was logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-191:191
//Verify that the newly created office visit is present in the Prior Office Visits list

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-195:198
/*** Selenium test for UC83 Acceptance Scenario 4. Edits the visit by removing an old disease and adding 2 more.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-200:200
//Set up the outcome of Scenario 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-203:203
//Login as Brooke Tran

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-207:207
//Click the Ophthalmology Home link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-210:210
//Select Freya Chandler as the patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-216:216
//Click the proper office visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-219:219
//Fill in the correct values and submit the form

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-232:232
//Verify that we are returned to the Ophthalmology Homepage

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-237:237
//Verify that the action was logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-240:240
//Verify that the newly created office visit is present in the Prior Office Visits list

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-244:247
/*** Selenium test for UC85 Acceptance Scenario 5. Tests HCP view of disease diagnosis by Oph HCP
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-249:249
//Set up the outcome of Scenario 1

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-252:252
//Login as Kelly Doctor

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-257:257
//Click the Ophthalmology Home link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-260:260
//Select Brody Franco as the patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-264:264
//Verify that we are returned to the Ophthalmology Homepage

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-268:268
//Click the proper office visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-271:271
//Verify that the action was logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyDiseaseTest.java-274:274
//Verify that the Office Visit is shown

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-12:14
/*** Selenium test cases for the Ophthalmology Office Visit feature in UC83.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-17:19
/*** Sets up the required base data needed for each test case. This includes two HCP's and two patients.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-29:31
/*** Clears the database after each test.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-36:39
/*** Selenium test for UC83 Acceptance Scenario 1.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-41:41
//Login as Brooke Tran

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-45:45
//Click the Add Ophthalmology Office Visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-48:48
//Select Brody Franco as the patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-54:54
//Enable javascript

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-57:57
//fill in form and create

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-83:83
//Verify that we are returned to the Ophthalmology Homepage

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-87:87
//Verify that the action was logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-91:91
//Verify that the newly created office visit is present in the Prior Office Visits list

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-95:98
/*** Selenium test for UC83 Acceptance Scenario 2.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-100:100
//Login as Brooke Tran

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-104:104
//Click the Add Ophthalmology Office Visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-107:107
//Select Freya Chandler as the patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-113:113
//Enable javascript

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-116:116
//fill in form and create

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-138:138
//Verify that our submission was rejected and we are still on the Add Ophthalmology

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-141:141
//Fill in the correct values and submit the form

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-163:163
//Verify that we are returned to the Ophthalmology Homepage

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-168:168
//Verify that the action was logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-171:171
//Verify that the newly created office visit is present in the Prior Office Visits list

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-175:178
/*** Selenium test for UC83 Acceptance Scenario 3.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-180:180
//Set up the outcome of Scenario 1

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-183:183
//Login as Kelly Doctor

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-187:187
//Click the Add Ophthalmology Office Visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-190:190
//Select Brody Franco as the patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-194:194
//Verify that we got redirected to the regular office visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-198:198
//Click the Ophthalmology Home link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-201:201
//Verify that we are returned to the Ophthalmology Homepage

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-205:205
//Click the proper office visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-208:208
//Verify that the action was logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-211:211
//Verify that the Office Visit is shown

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-225:228
/*** Selenium test for UC83 Acceptance Scenario 4.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-230:230
//Set up the outcome of Scenario 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-233:233
//Login as Brooke Tran

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-237:237
//Click the Ophthalmology Home link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-240:240
//Select Freya Chandler as the patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-246:246
//Click the proper office visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-249:249
//Fill in the correct values and submit the form

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-255:255
//Verify that we are returned to the Ophthalmology Homepage

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-260:260
//Verify that the action was logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-263:263
//Verify that the newly created office visit is present in the Prior Office Visits list

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-267:270
/*** Selenium test for UC84 Acceptance Scenario 1.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-272:272
//Set up the outcome of Scenario 1

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-275:275
//Login as Brody Franco

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-279:279
//Click the View Ophthalmology Office Visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-282:282
//Click the proper office visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-285:285
//Verify that the action was logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-288:288
//Verify that the Office Visit it shown

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-301:304
/*** Selenium test for UC84 Acceptance Scenario 2.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-306:306
//Set up the outcome of Scenario 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-309:309
//Login as Freya Chandler

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-313:313
//Click the View Ophthalmology Office Visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-316:316
//Click the proper office visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-319:319
//Verify that the action was logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-322:322
//Verify that the Office Visit it shown

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-333:333
//Simulate the change

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-334:334
//First logout

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-338:338
//Then basically rerun the code for UC83 Acceptance Test 4

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-339:339
//Login as Brooke Tran

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-343:343
//Click the Ophthalmology Home link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-346:346
//Select Freya Chandler as the patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-352:352
//Click the proper office visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-355:355
//Fill in the correct values and submit the form

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-361:361
//Verify that we are returned to the Ophthalmology Homepage

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-366:366
//Verify that the action was logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-369:369
//Then logout

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-373:373
//Re-Login as Freya Chandler

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-377:377
//Click the View Ophthalmology Office Visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-380:380
//Click the proper office visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-383:383
//Verify that the action was logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-386:386
//Verify that the Office Visit it shown

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-398:401
/*** Selenium test for UC84 Acceptance Scenario 3.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-403:403
//Make sure that Brittany Franco is in the system

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-405:405
//Set up the outcome of Scenario 1

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-409:409
//Login as Brody Franco

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-413:413
//Click the View Ophthalmology Office Visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-416:416
//Select Brittany as the dependent

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-422:422
//Click the proper office visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-425:425
//Verify that the action was logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-428:428
//Verify that the Office Visit it shown

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-442:446
/*** Tests to make sure that a patient with multiple dependents is able to view
* the Ophthalmology Office Visits of all their dependents.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-448:448
//Make sure that Brittany Franco is in the system.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-450:450
//Make sure that James Franco is in the system.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-452:452
//Set up the outcome of Scenario 1

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-455:455
//Login as Brody Franco

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-459:459
//Click the View Ophthalmology Office Visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-462:462
//Select James as the dependent

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-468:468
//Verify that no Office Visits are shown.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-472:476
/*** Tests to make sure that a patient with no dependents is not able to select anything
* on the "View Dependents Ophthalmology Office Visit" page.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-478:478
//Login as Freya Chandler

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-482:482
//Click the View Ophthalmology Office Visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-485:485
//Verify that no dependents are shown.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-489:492
/*** Tests the upward boundary of the SPH parameter
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-494:494
//Login as Brooke Tran

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-498:498
//Click the Add Ophthalmology Office Visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-501:501
//Select Freya Chandler as the patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-507:507
//Enable javascript

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-510:510
//fill in form and create

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-532:532
//submit form, and wait so that Jenkin's doesn't screw up

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-534:534
//Verify that we are returned to the Ophthalmology Homepage

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-539:539
//Verify that the action was logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-542:542
//Verify that the newly created office visit is present in the Prior Office Visits list

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-546:549
/*** Tests the lower bound of the SPH parameter
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-551:551
//Login as Brooke Tran

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-555:555
//Click the Add Ophthalmology Office Visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-558:558
//Select Freya Chandler as the patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-564:564
//Enable javascript

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-567:567
//fill in form and create

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-590:590
//Verify that we are returned to the Ophthalmology Homepage

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-595:595
//Verify that the action was logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-598:598
//Verify that the newly created office visit is present in the Prior Office Visits list

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-602:605
/*** Tests what happens when the user puts in a non-number for SPH.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-607:607
//Login as Brooke Tran

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-611:611
//Click the Add Ophthalmology Office Visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-614:614
//Select Freya Chandler as the patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-620:620
//Enable javascript

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-623:623
//fill in form and create

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-645:645
//Verify that our submission was rejected and we are still on the Add Ophthalmology

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-648:648
//Fill in the correct values and submit the form

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-670:670
//Verify that we are returned to the Ophthalmology Homepage

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-675:675
//Verify that the action was logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-678:678
//Verify that the newly created office visit is present in the Prior Office Visits list

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-682:685
/*** Tests what happens when a user puts in a non-integer for the axis.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-687:687
//Login as Brooke Tran

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-691:691
//Click the Add Ophthalmology Office Visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-694:694
//Select Freya Chandler as the patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-700:700
//Enable javascript

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-703:703
//fill in form and create

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-729:729
//Verify that our submission was rejected and we are still on the Add Ophthalmology

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-732:732
//fill in form and create

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-758:758
//Verify that we are returned to the Ophthalmology Homepage

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-763:763
//Verify that the action was logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-766:766
//Verify that the newly created office visit is present in the Prior Office Visits list

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-770:773
/*** Tests what happens when a user puts in a cylinder, but no axis (axis is required if a cylinder is listed for that eye).
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-775:775
//Login as Brooke Tran

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-779:779
//Click the Add Ophthalmology Office Visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-782:782
//Select Freya Chandler as the patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-788:788
//Enable javascript

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-791:791
//fill in form and create

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-815:815
//Verify that our submission was rejected and we are still on the Add Ophthalmology

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-817:817
//Fill in the correct values and submit the form

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-843:843
//Verify that we are returned to the Ophthalmology Homepage

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-848:848
//Verify that the action was logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyOfficeVisitTest.java-851:851
//Verify that the newly created office visit is present in the Prior Office Visits list

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-13:15
/*** Selenium test cases for the Ophthalmology Office Visit Request feature in UC88.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-18:20
/*** Sets up the required base data needed for each test case. This includes two HCP's and two patients.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-31:33
/*** Clears the database after each test.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-38:41
/*** Selenium test for UC88 Acceptance Scenario 1.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-43:43
//Login as Brody Franco

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-47:47
// Create the explicit wait

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-50:50
//Click the Add Ophthalmology Office Visit Request link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-54:54
//fill form

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-71:71
//Verify that the form was accepted

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-75:75
//Click the View Scheduled Ophthalmology Office Visits link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-80:80
//Verify the info in the table

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-84:84
//Click the Read Comment link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-87:87
//Verify the information is present

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-94:97
/*** Selenium test for UC88 Acceptance Scenario 2.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-99:99
//Set up the outcome of Scenario 1

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-102:102
//Login as Brooke Tran

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-106:106
// Create the explicit wait

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-109:109
//Click the View Ophthalmology Office Visit Requests link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-113:113
//Verify the information is present

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-117:117
//Click the Accept link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-122:122
//Click the View Scheduled Ophthalmology Office Visits link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-126:126
//Verify that the info is in the table

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-130:130
//Click the Read Comment link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-133:133
//Verify the information is present

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-139:139
//Then logout

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-143:143
//Login as Brody Franco

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-149:149
//Click the View Scheduled Ophthalmology Office Visits link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-153:153
//Verify the info in the table

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-157:157
//Click the Read Comment link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-160:160
//Verify the information is present

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-168:171
/*** Selenium test for UC88 Acceptance Scenario 3.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-173:173
//Set up the outcome of Scenario 1

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-176:176
//Login as Brooke Tran

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-180:180
// Create the explicit wait

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-183:183
//Click the View Ophthalmology Office Visit Requests link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-187:187
//Verify the information is present

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-191:191
//Click the Reject link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-196:196
//Click the View Scheduled Ophthalmology Office Visits link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-200:200
//Verify that the info is in the table

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-204:204
//Click the Read Comment link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-207:207
//Verify the information is present

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-213:213
//Then logout

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-217:217
//Login as Brody Franco

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-223:223
//Click the View Scheduled Ophthalmology Office Visits link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-227:227
//Verify the info in the table

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-231:231
//Click the Read Comment link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologyScheduleOVTest.java-234:234
//Verify the information is present

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-14:16
/*** Selenium test cases for the Ophthalmology Surgery feature in UC86.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-19:21
/*** Sets up the required base data needed for each test case. This includes two HCP's and two patients.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-32:34
/*** Clears the database after each test.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-39:42
/*** Selenium test for UC86 Acceptance Scenario 1.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-44:44
//Login as Lamar Bridges

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-48:48
//Click the Add Surgical Ophthalmology Office Visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-51:51
//Select Brody Franco as the patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-55:55
// Wait for the page change

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-59:59
//Enable javascript

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-62:62
//fill in form and create

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-92:92
//Verify that we are returned to the Ophthalmology Homepage

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-95:95
//Verify that the action was logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-99:99
//Verify that the newly created office visit is present in the Prior Office Visits list

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-103:106
/*** Selenium test for UC86 Acceptance Scenario 2.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-108:108
//Login as Lamar Bridges

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-112:112
//Click the Add Ophthalmology Office Visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-115:115
//Select Freya Chandler as the patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-119:119
// Wait for the page change

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-123:123
//Enable javascript

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-126:126
//fill in form and create

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-148:148
//Verify that our submission was rejected and we are still on the Add Ophthalmology

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-153:153
//Fill in the correct values and submit the form

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-175:175
//Verify that we are returned to the Ophthalmology Homepage

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-179:179
//Verify that the action was logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-182:182
//Verify that the newly created office visit is present in the Prior Office Visits list

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-186:189
/*** Selenium test for UC86 Acceptance Scenario 3.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-191:191
//Set up the outcome of Scenario 1

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-194:194
//Login as Brooke Tran

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-198:198
//Click the Add Ophthalmology Office Visit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-201:201
//Select Brody Franco as the patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-205:205
//Verify that we got redirected to the regular oph office visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-210:213
/*** Selenium test for UC86 Acceptance Scenario 4.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-215:215
//Set up the outcome of Scenario 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-218:218
//Login as Lamar Bridges

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-222:222
//Click the Ophthalmology Home link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-225:225
//Select Freya Chandler as the patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-236:236
//Fill in the correct values and submit the form

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-242:242
//Verify that we are returned to the Ophthalmology Homepage

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-246:246
//Verify that the action was logged

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OphthalmologySurgeryTest.java-249:249
//Verify that the newly created office visit is present in the Prior Office Visits list

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-9:12
/*** OfficeVisitBasicHealthTest contains http unit tests for editing a patient's basic
* health metrics during an office visit.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-15:18
/*** This is called before each test to set up each one. It clears all the database tables
* and generates a new set of test data.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-25:30
/*** Create an office visit and enter health metrics for a patient that is 5
* months old. This test uses patient Brynn McClain (born May 1, 2013).
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-32:32
//Login as HCP Shelly Vang

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-36:36
//Click Document Office Visit Link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-38:38
//Search for patient 101

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-41:41
//Verify Document Office Visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-43:43
//Click Yes, Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-45:45
//Verify Edit Office Visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-48:48
//Add a new office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-49:49
//Enter 10/01/2013 for the Office Visit Date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-52:52
//Select Central Hospital for the hospital

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-55:55
//Enter "Brynn can start eating rice cereal mixed with breast milk or formula once a day" for Notes

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-58:58
//Click the create button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-61:61
//Verify "Information Successfully Updated" message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-64:64
//Enter Health Metrics

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-65:65
//Enter Weight

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-68:68
//Enter Length

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-71:71
//Enter Head Circumference

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-74:74
//Select household smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-77:77
//Click the Add Record button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-80:80
//Verify "Health information successfully updated." message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-84:90
/*** Create an office visit and enter health metrics for a patient that is 2
* years old. This test uses patient Caldwell Hudson (born September 29, 2011). This
* test also adds a Penicillin prescription and a Streptococcal sore throat diagnosis.
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-92:92
//Login as HCP Shelly Vang

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-96:96
//Click Document Office Visit Link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-98:98
//Search for patient 102

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-101:101
//Verify Document Office Visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-103:103
//Click Yes, Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-105:105
//Verify Edit Office Visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-108:108
//Add a new office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-109:109
//Enter the Office Visit Date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-112:112
//Select Central Hospital for the hospital

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-115:115
//Enter Notes

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-118:118
//Click the create button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-121:121
//Verify "Information Successfully Updated" message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-124:124
//Enter Health Metrics

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-125:125
//Enter Weight

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-128:128
//Enter Length

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-131:131
//Enter Head Circumference

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-134:134
//Select household smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-137:137
//Click the Add Record button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-140:140
//Verify "Health information successfully updated." message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-143:143
//Enter prescription

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-144:144
//Select Penicillin (664662530) for the Medication

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-147:147
//Enter 50 mg for the Dosage

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-150:150
//Enter 10/28/2013 for the Start Date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-153:153
//Enter 11/03/2013 for the End Date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-156:156
//Enter "Take three times a day" for the Instructions

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-159:159
//Click the Add Prescription button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-162:162
//Verify "Prescription information successfully updated." message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-165:165
//Enter Diagnosis

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-166:166
//Select '34.00 - Streptococcal sore throat' for the diagnosis

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-169:169
//Click the Add Diagnosis button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-172:172
//Verify "Diagnosis information successfully updated" message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-176:181
/*** Create an office visit and enter health metrics for a patient that is 5
* years old. This test uses patient Fulton Gray (born October 10, 2008).
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-183:183
//Login as HCP Shelly Vang

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-187:187
//Click Document Office Visit Link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-189:189
//Search for patient 103

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-192:192
//Verify Document Office Visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-194:194
//Click Yes, Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-196:196
//Verify Edit Office Visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-199:199
//Add a new office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-200:200
//Enter the Office Visit Date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-203:203
//Select Central Hospital for the hospital

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-206:206
//Enter Notes

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-209:209
//Click the create button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-212:212
//Verify "Information Successfully Updated" message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-215:215
//Enter Health Metrics

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-216:216
//Enter Weight

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-219:219
//Enter Length

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-222:222
//Enter Blood pressure

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-227:227
//Select household smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-230:230
//Click the Add Record button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-235:240
/*** Create an office visit and enter health metrics for a patient that is 20
* years old. This test uses patient Daria Griffin (born October 25, 1993).
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-242:242
//Login as HCP Shelly Vang

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-246:246
//Click Document Office Visit Link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-248:248
//Search for patient 104

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-251:251
//Verify Document Office Visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-253:253
//Click Yes, Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-255:255
//Verify Edit Office Visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-258:258
//Add a new office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-259:259
//Enter the Office Visit Date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-262:262
//Select Central Hospital for the hospital

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-265:265
//Enter Notes

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-268:268
//Click the create button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-271:271
//Verify "Information Successfully Updated" message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-274:274
//Enter Health Metrics

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-275:275
//Enter Weight

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-278:278
//Enter Length

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-281:281
//Enter Blood pressure

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-286:286
//Select household smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-289:289
//Select Patient smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-292:292
//Enter cholesterol

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-299:299
//Click the Add Record button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-302:302
//Verify "Health information successfully updated." message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-306:311
/*** Create an office visit and enter health metrics for a patient that is 20
* years old. This test uses patient Thane Ross (born January 3, 1989).
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-313:313
//Login as HCP Shelly Vang

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-317:317
//Click Document Office Visit Link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-319:319
//Search for patient 105

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-322:322
//Verify Document Office Visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-324:324
//Click Yes, Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-326:326
//Verify Edit Office Visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-329:329
//Add a new office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-330:330
//Enter the Office Visit Date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-333:333
//Select Central Hospital for the hospital

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-336:336
//Enter Notes

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-339:339
//Click the create button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-342:342
//Verify "Information Successfully Updated" message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-345:345
//Enter Health Metrics

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-346:346
//Enter Weight

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-349:349
//Enter Length

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-352:352
//Enter Blood pressure

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-357:357
//Select household smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-360:360
//Select Patient smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-363:363
//Enter cholesterol

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-370:370
//Click the Add Record button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-373:373
//Verify "Health information successfully updated." message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-379:384
/*** Create an office visit and enter health metrics for a patient that is >20
* years old. This test uses patient Random Person and no patient smoking status
* is entered into the Health Metrics. An invalid error message is displayed.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-386:386
//Login as HCP Kelly Doctor

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-390:390
//Click Document Office Visit Link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-392:392
//Search for patient 1

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-395:395
//Verify Document Office Visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-397:397
//Click Yes, Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-399:399
//Verify Edit Office Visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-402:402
//Add a new office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-403:403
//Enter the Office Visit Date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-406:406
//Select Central Hospital for the hospital

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-409:409
//Enter Notes

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-412:412
//Click the create button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-415:415
//Verify "Information Successfully Updated" message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-418:418
//Enter Health Metrics

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-419:419
//Enter Weight

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-422:422
//Enter Length

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-425:425
//Enter Blood pressure

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-430:430
//Select household smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-433:433
//Enter cholesterol

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-440:440
//Click the Add Record button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-444:444
//Verify "Information not valid" message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-445:445
//Verify "Smoker must be an integer in [0,10]" message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-450:455
/*** Create an office visit and enter health metrics for a patient that is >20
* years old. This test uses patient Random Person and no patient high blood pressure
* is entered into the Health Metrics. An invalid error message is displayed.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-457:457
//Login as HCP Kelly Doctor

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-461:461
//Click Document Office Visit Link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-463:463
//Search for patient 1

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-466:466
//Verify Document Office Visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-468:468
//Click Yes, Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-470:470
//Verify Edit Office Visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-473:473
//Add a new office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-474:474
//Enter the Office Visit Date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-477:477
//Select Central Hospital for the hospital

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-480:480
//Enter Notes

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-483:483
//Click the create button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-486:486
//Verify "Information Successfully Updated" message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-489:489
//Enter Health Metrics

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-490:490
//Enter Weight

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-493:493
//Enter Length

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-496:496
//Enter Blood pressure

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-501:501
//Select household smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-504:504
//Select Patient smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-507:507
//Enter cholesterol

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-514:514
//Click the Add Record button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-517:517
//Verify "Information not valid" message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-518:518
//Verify "Systolic blood pressure must be an integer in [0,999]" message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-523:529
/*** Create an office visit and enter health metrics for a patient that is >20
* years old. This test uses patient Random Person and invalid characters are
* entered to measure HDL cholesterol into the Health Metrics. An invalid
* error message is displayed.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-531:531
//Login as HCP Kelly Doctor

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-535:535
//Click Document Office Visit Link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-537:537
//Search for patient 1

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-540:540
//Verify Document Office Visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-542:542
//Click Yes, Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-544:544
//Verify Edit Office Visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-547:547
//Add a new office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-548:548
//Enter the Office Visit Date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-551:551
//Select Central Hospital for the hospital

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-554:554
//Enter Notes

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-557:557
//Click the create button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-560:560
//Verify "Information Successfully Updated" message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-563:563
//Enter Health Metrics

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-564:564
//Enter Weight

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-567:567
//Enter Length

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-570:570
//Enter Blood pressure

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-575:575
//Select household smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-578:578
//Select Patient smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-581:581
//Enter cholesterol

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-588:588
//Click the Add Record button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-591:591
//Verify "Information not valid" message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-592:592
//Verify "Cholesterol HDL must be an integer in [0,89]" message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-598:604
/*** Create an office visit for a patient that is >20 years old. This test
* uses patient Random Person. The date of the Office Visit is set to an
* invalid date (Leap Day of 2014) and the date is automatically adjusted
* to account for this.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-606:606
//Login as HCP Kelly Doctor

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-610:610
//Click Document Office Visit Link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-612:612
//Search for patient 1

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-615:615
//Verify Document Office Visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-617:617
//Click Yes, Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-619:619
//Verify Edit Office Visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-622:622
//Add a new office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-623:623
//Enter the Office Visit Date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-626:626
//Select Central Hospital for the hospital

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-629:629
//Enter Notes

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-632:632
//Click the create button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-635:635
//Verify "Information Successfully Updated" message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-638:638
//Verify that date changed for to March 1st, 2014.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-642:647
/*** Create an office visit and enter health metrics for a patient that is under 3
* years old. This test uses patient Brynn McClain. No head circumference is entered
* and an invalid message is displayed.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-649:649
//Login as HCP Kelly Doctor

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-653:653
//Click Document Office Visit Link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-655:655
//Search for patient 101

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-658:658
//Verify Document Office Visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-660:660
//Click Yes, Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-662:662
//Verify Edit Office Visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-665:665
//Add a new office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-666:666
//Enter the Office Visit Date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-669:669
//Select Central Hospital for the hospital

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-672:672
//Enter Notes

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-675:675
//Click the create button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-678:678
//Verify "Information Successfully Updated" message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-681:681
//Enter Health Metrics

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-682:682
//Enter Weight

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-685:685
//Enter Length

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-688:688
//Enter Head Circumference

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-691:691
//Select household smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-694:694
//Click the Add Record button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-698:698
//Verify "Information not valid" message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\OVBasicHealthTest.java-699:699
//Verify "Head Circumference must be greater than 0" message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-18:20
/*** setUp
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-35:35
// search for patient 1 by MID.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-37:37
// the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-41:44
/*** testAcceptanceScenario1
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-51:51
// click Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-53:53
// search for patient 1 by MID.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-55:55
// the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-60:60
// click Yes, Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-64:64
// add a new office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-73:73
// Check that it was created

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-76:76
// Add instructions

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-83:83
// check updated page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-91:98
/*** When a user enters a URL to a page for patient specific instructions,
* the system should strip leading whitepsace before validating. This
* is a convenience for users who may have accidentally copied whitespace
* along with the URL. Whitespace characters are not considered safe
* as part of the URL specification.
* @see <a href="http://www.ietf.org/rfc/rfc1738.txt">URL Spec</a>
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-104:104
// click Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-106:106
// search for patient 1 by MID.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-108:108
// the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-113:113
// click Yes, Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-117:117
// add a new office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-126:126
// Check that it was created

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-129:129
// Add instructions

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-136:136
// check updated page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-144:151
/*** When a user enters a URL to a page for patient specific instructions,
* the system should strip trailing whitepsace before validating. This
* is a convenience for users who may have accidentally copied whitespace
* along with the URL. Whitespace characters are not considered safe
* as part of the URL specification.
* @see <a href="http://www.ietf.org/rfc/rfc1738.txt">URL Spec</a>
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-157:157
// click Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-159:159
// search for patient 1 by MID.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-161:161
// the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-166:166
// click Yes, Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-170:170
// add a new office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-179:179
// Check that it was created

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-182:182
// Add instructions

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-189:189
// check updated page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-197:200
/*** testAcceptanceScenario2
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-211:211
// click Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-214:214
// select the patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-215:215
// search for patient 1 by MID.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-217:217
// the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-222:222
// Select the office visit from yesterday

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-227:227
// Verify instructions are visible

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-232:232
// Click the remove link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-240:240
// verify the instructions have been deleted

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-246:249
/*** testAcceptanceScenario3
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-260:260
// click Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-263:263
// select the patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-264:264
// search for patient 5 by MID.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-266:266
// the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-269:269
// Select the office visit from yesterday

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-281:281
// check updated page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-289:292
/*** testAcceptanceScenario4
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-301:301
// click Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-304:304
// select the patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-305:305
// search for patient 1 by MID.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-307:307
// the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-311:311
// click Yes, Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-316:316
// add a new office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-326:326
// Check that it was created

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-329:329
// Add instructions

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-336:336
// check updated page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-343:346
/*** testAcceptanceScenario5
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-356:356
// click Patient Specific Instructions

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-386:386
// verify information in patient instructions table

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-395:395
// verify link address

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-400:403
/*** testLinkToOfficeVisit
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-411:411
// click Patient Specific instructions

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-416:416
// Follow link to office visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-421:424
/*** testMissingField
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-433:433
// click Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-436:436
// select the patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-437:437
// search for patient 2 by MID.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-439:439
// the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-443:443
// click Yes, Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-448:448
// add a new office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-457:457
// Check that it was created

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-460:460
// Add instructions, but with a field missing

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-466:466
// check for error page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-469:469
// check that form fields still contain prior values

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-474:477
/*** testTooManyCharacters
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-486:486
// click Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-489:489
// select the patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-490:490
// search for patient 2 by MID.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-492:492
// the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-496:496
// click Yes, Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-501:501
// add a new office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-509:509
// Check that it was created

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-512:512
// Add instructions, but with the name is too long

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-519:519
// check for error page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-522:522
// check that form fields still contain prior values

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-528:531
/*** testModifiedDate
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-541:541
// click Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-544:544
// select the patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-545:545
// search for patient 1 by MID.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-547:547
// the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-550:550
// Select the office visit from yesterday

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-555:555
// Verify instructions are visible

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-558:558
// Click the edit link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-565:565
// check that the form now contains the values we're editing

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-578:578
// Verify instructions are visible

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-580:580
// verify the table is the same size as before

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-584:584
// verify that the comments have changed

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-588:591
/*** testSecondEntry
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-601:601
// click Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-604:604
// select the patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-605:605
// search for patient 1 by MID.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-607:607
// the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-610:610
// Select the office visit from yesterday

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-623:623
// Verify instructions are visible

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientInstructionsUseCaseTest.java-630:630
// verify the table has one more row then before

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientsWithExpiringPrescriptionsTest.java-16:18
/*** Tests potential prescriptions renewals
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientsWithExpiringPrescriptionsTest.java-46:50
/** An equivalence class test for a patient who should appear on the list.
* (Designated Tester Arehart, special-diagnosis-history, prescription expires in 5 days)
* The prescriptions were NOT made on the same visit as a special-diagnosis.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientsWithExpiringPrescriptionsTest.java-69:72
/** An equivalence class test for a patient who should NOT appear on the list.
* (Designated Tester Arehart, special-diagnosis-history, prescription expires in 10 days)
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientsWithExpiringPrescriptionsTest.java-87:91
/** A boundary-value test for a patient who should appear on the list.
* (Designated Tester Arehart, special-diagnosis-history, prescription expires in 7 days)
* Diagnosed with 493.99
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientsWithExpiringPrescriptionsTest.java-109:112
/** A boundary-value test for a patient who should NOT appear on the list.
* (Designated Tester Arehart, special-diagnosis-history, prescription expires in 8 days)
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientsWithExpiringPrescriptionsTest.java-129:132
/** An equivalence class test for a patient who should NOT appear on the list.
* (Designated Tester Arehart, NOT special-diagnosis-history, prescription expires in 5 days)
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientsWithExpiringPrescriptionsTest.java-148:153
/** A boundary-value test for a patient who should appear on the list.
* (Designated Tester Arehart, special-diagnosis-history, prescription expires today)
* Diagnosed with 459.99 (This is the closest possible to 460 because the table uses
*  decimal(5,2) )
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientsWithExpiringPrescriptionsTest.java-172:175
/** A boundary-value test for a patient who should NOT appear on the list.
* (Designated Tester Arehart, special-diagnosis-history, prescription expired yesterday)
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientsWithExpiringPrescriptionsTest.java-192:195
/** A boundary-value test for a patient who should appear on the list.
* (Designated Tester Arehart, special-diagnosis-history, prescription expires today)
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientsWithExpiringPrescriptionsTest.java-217:220
/** A boundary-value test for a patient who should appear on the list.
* (Designated Tester Gandalf Stormcrow)
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientsWithExpiringPrescriptionsTest.java-250:254
/*** Asserts that the text is on the page
* @param text
* @param driver
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PatientsWithExpiringPrescriptionsTest.java-261:265
/*** Asserts that the text is not on the page. Does not pause for text to appear.
* @param text
* @param driver
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PendingApptTest.java-14:16
/*** Use Case 42
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PendingApptTest.java-111:115
/*** Asserts that the text is on the page
* @param text
* @param driver
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PendingApptTest.java-122:126
/*** Asserts that the text is not on the page. Does not pause for text to appear.
* @param text
* @param driver
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-17:19
/*** Use Case 10
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-35:39
/*** testEditPatient
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-57:61
/*** testInvalidPatientDates
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-83:87
/*** testInvalidPatientBirthDates
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-110:114
/*** testRepresent
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-132:132
// Clicking on a representee's name takes you to their records

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-144:148
/*** testAllergy
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-164:164
// Add allergy

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-172:176
/*** testAllergy2
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-192:192
// Add allergy

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-200:204
/*** testEditSmokingStatus
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-206:206
// Login

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-215:215
// Click Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-222:222
// Choose patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-228:228
// Click Yes, Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-230:230
// Verify Edit Office Visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-233:233
// Click the create button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-236:236
// Verify "Information Successfully Updated" message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-240:240
// Create Health Metrics Record

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-262:262
// Verify "Health information successfully updated." message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-266:266
// Verify create health metrics log

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-268:268
// Change the smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-275:275
// Verify "Health information successfully updated." message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-277:277
// Verify edit health metrics log

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-282:286
/*** testAddAdditionalDemographics1
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-322:326
/*** testAddAdditionDemographicss2
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-363:367
/*** testAddAdditionDemographicss3
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-403:407
/*** testAddDupAllergy
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-423:423
// Selects Patient Trend Setter

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-435:435
// Add Penicillin Allergy again

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-439:439
// This is the error that should appear when this allergy is added a

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-440:440
// second time.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-445:449
/*** testAddAllergyPrevRX
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-462:462
// Selects Patient Trend Setter

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-467:467
// Verify Edit Office Visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-474:474
// Create new OV on date 01/01/2012

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-492:492
// Add Penicillin RX, 60mg, 01/01/2012 - 01/31/2012, thrice daily w/

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-493:493
// food

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-499:499
// PHR Info

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-504:504
// Add Penicillin Allergy (will be firstFound on today's date)

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-506:506
// No error should appear when this allergy is added.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-511:515
/*** testAddAllergyFutRX
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-529:529
// Select Anakin Skywalker, this seemed to be easier than what the

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-530:530
// acceptance tests did.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-535:538
/** Since we don't worry about preconditions and it takes us straight to
* the correct page anyway, we can skip a lot of stuff here.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-541:541
// Add M-minene Allergy (will be firstFound on today's date)

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-545:545
// This is the error that should appear when this allergy is added.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-550:554
/*** testAddAllergyExistRX
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-567:567
// Selects Patient Trend Setter

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-572:572
// Verify Edit Office Visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-579:579
// Create new OV on date 02/01/2012

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-600:600
// Add Lantus RX, 100mg, 02/01/2012 - 08/01/2012, once daily

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-606:606
// PHR Info

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-611:611
// Add Lantus Allergy (will be firstFound on today's date)

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-615:615
// This is the error that should appear when this allergy is added.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-630:634
/*** Asserts that the text is on the page
* @param text
* @param driver
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonalHealthRecordsUseCaseTest.java-641:645
/*** Asserts that the text is not on the page. Does not pause for text to appear.
* @param text
* @param driver
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonnelTest.java-20:20
/**ADDRESS*/

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonnelTest.java-23:26
/*** testViewPrescriptionRecords
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonnelTest.java-29:29
// Create a new instance of the html unit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonnelTest.java-30:30
// Notice that the remainder of the code relies on the interface,

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonnelTest.java-31:31
// not the implementation.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonnelTest.java-34:34
//And now use this to visit iTrust

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonnelTest.java-41:41
//Find the text input element by its name

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonnelTest.java-47:47
//Check to make sure this is the correct page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonnelTest.java-50:50
//Click on All Patients

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonnelTest.java-56:56
//Click on Andy Programmer

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonnelTest.java-62:62
//Go to prescription report page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonnelTest.java-67:67
//Check fields to make sure they are correct

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonnelTest.java-82:82
//Close the driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonnelUseCaseTest.java-18:18
/**ADDRESS*/

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonnelUseCaseTest.java-21:24
/*** testAddER
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonnelUseCaseTest.java-26:26
// Create a new instance of the html unit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonnelUseCaseTest.java-27:27
// Notice that the remainder of the code relies on the interface,

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonnelUseCaseTest.java-28:28
// not the implementation.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonnelUseCaseTest.java-31:31
//And now use this to visit iTrust

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonnelUseCaseTest.java-34:34
//driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonnelUseCaseTest.java-38:38
//Find the text input element by its name

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonnelUseCaseTest.java-44:44
//Check to make sure this is the correct page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PersonnelUseCaseTest.java-51:51
//quit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PHIRecordTest.java-29:29
// Implicitly wait at most 2 seconds for each element to load

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PHIRecordTest.java-41:41
//search for patient 1 by MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PHIRecordTest.java-44:44
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PHIRecordTest.java-46:46
//we should now be on the document office visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PHIRecordTest.java-50:50
//click the Yes, document office visit button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PHIRecordTest.java-113:113
//assertLogged(TransactionType.CREATE_BASIC_HEALTH_METRICS, 9000000000L, 2L, "");//assertLogged not working here...

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-20:20
/**ADDRESS*/

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-23:32
/** 	Preconditions: Patient 2 is in the system and has authenticated successfully.
*  HCP 9000000000 is in the system with address 4321 My Road St, PO BOX 2, CityName, NY, 12345-1234 and physician type Surgeon.
*  Patient 2 has had 2 office visits with HCP 9000000000, and no other office visits are in the system.
*  TakeSatisfactionSurveySuccess and TakeSatisfactionSurveySuccess2 have passed successfully.
*  1. Patient 2 chooses to view satisfaction survey results.
*  2. Patient 2 inputs Surgeon for physician type and zip code 12377.
*  3. Submit.
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-34:34
// Create a new instance of the html unit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-35:35
// Notice that the remainder of the code relies on the interface,

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-36:36
// not the implementation.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-39:39
//And now use this to visit iTrust

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-46:46
//Find the text input element by its name

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-52:52
//Check to make sure this is the correct page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-71:71
//quit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-80:80
// Create a new instance of the html unit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-81:81
// Notice that the remainder of the code relies on the interface,

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-82:82
// not the implementation.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-85:85
//And now use this to visit iTrust

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-92:92
//Find the text input element by its name

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-97:97
//Check to make sure this is the correct page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-117:117
//quit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-127:127
// Create a new instance of the html unit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-128:128
// Notice that the remainder of the code relies on the interface,

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-129:129
// not the implementation.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-132:132
//And now use this to visit iTrust

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-139:139
//Find the text input element by its name

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-145:145
//Check to make sure this is the correct page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-172:172
//quit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-179:179
// Create a new instance of the html unit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-180:180
// Notice that the remainder of the code relies on the interface,

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-181:181
// not the implementation.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-184:184
//And now use this to visit iTrust

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-191:191
//Find the text input element by its name

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-197:197
//Check to make sure this is the correct page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-211:211
//quit the driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-218:218
// Create a new instance of the html unit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-219:219
// Notice that the remainder of the code relies on the interface,

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-220:220
// not the implementation.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-223:223
//And now use this to visit iTrust

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-230:230
//Find the text input element by its name

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-236:236
//Check to make sure this is the correct page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-248:248
//quit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-255:255
// Create a new instance of the html unit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-256:256
// Notice that the remainder of the code relies on the interface,

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-257:257
// not the implementation.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-260:260
//And now use this to visit iTrust

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-267:267
//Find the text input element by its name

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-273:273
//Check to make sure this is the correct page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-286:286
//quit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-291:291
// Create a new instance of the html unit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-292:292
// Notice that the remainder of the code relies on the interface,

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-293:293
// not the implementation.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-296:296
//And now use this to visit iTrust

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-303:303
//Find the text input element by its name

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-309:309
//Check to make sure this is the correct page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-319:319
//quit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-324:324
// Create a new instance of the html unit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-325:325
// Notice that the remainder of the code relies on the interface,

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-326:326
// not the implementation.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-329:329
//And now use this to visit iTrust

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-336:336
//Find the text input element by its name

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-342:342
//Check to make sure this is the correct page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-356:356
//quit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-361:361
// Create a new instance of the html unit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-362:362
// Notice that the remainder of the code relies on the interface,

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-363:363
// not the implementation.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-366:366
//And now use this to visit iTrust

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-373:373
//Find the text input element by its name

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-379:379
//Check to make sure this is the correct page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-391:391
//quit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-396:396
// Create a new instance of the html unit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-397:397
// Notice that the remainder of the code relies on the interface,

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-398:398
// not the implementation.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-401:401
//And now use this to visit iTrust

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-408:408
//Find the text input element by its name

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-414:414
//Check to make sure this is the correct page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-426:426
//quit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-431:431
// Create a new instance of the html unit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-432:432
// Notice that the remainder of the code relies on the interface,

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-433:433
// not the implementation.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-436:436
//And now use this to visit iTrust

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-443:443
//Find the text input element by its name

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-449:449
//Check to make sure this is the correct page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PhysicianSatisfactionUseCaseTest.java-461:461
//quit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionDateTest.java-25:25
/**ADDRESS*/

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionDateTest.java-28:31
/*** testeditOVPPrescription
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionDateTest.java-33:33
// Create a new instance of the html unit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionDateTest.java-34:34
// Notice that the remainder of the code relies on the interface,

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionDateTest.java-35:35
// not the implementation.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionDateTest.java-38:38
//And now use this to visit iTrust

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionDateTest.java-45:45
//Find the text input element by its name

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionDateTest.java-51:51
//Check to make sure this is the correct page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionDateTest.java-72:72
//assertEquals("Information not valid", driver.findElement(By.xpath("//div[@id='iTrustContent']/div[4]/div/h2")).getText());

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionDateTest.java-76:76
//quit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-25:27
/**
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-29:29
// Create instance of the web driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-32:32
// Navigate to iTrust

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-35:35
// Login

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-43:43
// Check if logged in

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-47:47
// Select Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-50:50
// Search for patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-54:54
// Select the visit for 06/10/2007

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-58:58
// Select the prescription for Tetracycline

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-61:61
// Check the current table values

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-66:66
// Update the prescription data

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-73:73
// Check if the prescription updated

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-76:76
//Duplicate entry in table, so finding wrong entry

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-77:77
//assertEquals("10mg", driver.findElement(By.xpath("//table[@id='prescriptionsTable']/tbody/tr[3]/td[2]")).getText());

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-78:78
//assertEquals("Take thrice daily", driver.findElement(By.xpath("//table[@id='prescriptionsTable']/tbody/tr[3]/td[4]")).getText());

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-81:81
// Close the driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-87:87
// Create instance of the web driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-90:90
// Navigate to iTrust

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-93:93
// Login

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-100:100
// Check if logged in

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-104:104
// Select Prescription Records from the menu

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-105:105
//driver.findElement(By.xpath("//div[@id='iTrustMenu']/div/div[3]/div/h2")).click();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-109:109
// View current patient's records

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-112:112
// Check for Prioglitazone in the table and select it

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-117:117
// Check prescription information

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-122:122
// Close the driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-132:132
// Create an instance of the html unit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-135:135
//Visit the iTrust home page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-138:138
// Get the page title

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-141:141
// Login

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-148:148
// Check if logged in

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-152:152
// Click on the My Diagnoses option

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-157:157
// Select Acute Lycanthropy

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-161:161
// Close the driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-167:167
// Create instance of the web driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-170:170
// Navigate to iTrust

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-173:173
// Login

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-180:180
//Check if logged in

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-184:184
//Select My Expired Prescription Reports from the menu

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-187:187
// Select the Tetracycline prescription

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-191:191
// Check the values in the prescription table

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInstructionsTest.java-197:197
// Close the driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInteractionAndAllergyTest.java-36:36
// driver.findElement(By.linkText("HCP 1")).click();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInteractionAndAllergyTest.java-72:72
// driver.findElement(By.linkText("HCP 1")).click();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInteractionAndAllergyTest.java-112:112
// driver.findElement(By.linkText("HCP 1")).click();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInteractionAndAllergyTest.java-137:137
// Make sure this didn't get prescribed

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInteractionAndAllergyTest.java-151:151
// driver.findElement(By.linkText("HCP 1")).click();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInteractionAndAllergyTest.java-176:176
// Second assigning

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInteractionAndAllergyTest.java-196:196
// From old test.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInteractionAndAllergyTest.java-209:209
// driver.findElement(By.linkText("HCP 1")).click();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInteractionAndAllergyTest.java-220:220
// assertLogged(TransactionType.OFFICE_VISIT_VIEW, 9000000000L, 2L,

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInteractionAndAllergyTest.java-221:221
// "Office visit");

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInteractionAndAllergyTest.java-257:257
// From old test

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInteractionAndAllergyTest.java-270:270
// driver.findElement(By.linkText("HCP 1")).click();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInteractionAndAllergyTest.java-282:282
// assertLogged(TransactionType.OFFICE_VISIT_VIEW, 9000000000L, 2L,

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInteractionAndAllergyTest.java-283:283
// "");

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInteractionAndAllergyTest.java-311:311
// driver.findElement(By.linkText("HCP 1")).click();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionInteractionAndAllergyTest.java-343:343
// driver.findElement(By.linkText("HCP 1")).click();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionRefactoringUseCaseTest.java-38:38
// driver.findElement(By.linkText("HCP 1")).click();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionRefactoringUseCaseTest.java-40:40
// System.out.println(driver.getTitle());

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionRefactoringUseCaseTest.java-50:50
// System.out.println("Title: "+driver.getTitle());

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionRefactoringUseCaseTest.java-75:75
// driver.findElement(By.linkText("Remove")).click();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionRefactoringUseCaseTest.java-76:76
// driver.findElement(By.linkText("Logout")).click();Ss

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionRefactoringUseCaseTest.java-87:87
// driver.findElement(By.linkText("HCP 1")).click();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionRefactoringUseCaseTest.java-120:124
/*** Test adding a prescription, no allergy/interaction
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionRefactoringUseCaseTest.java-133:133
// driver.findElement(By.linkText("HCP 1")).click();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionRefactoringUseCaseTest.java-159:159
// assertTrue(driver.getPageSource().contains("information successfully updated"));

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionRefactoringUseCaseTest.java-170:170
// driver.findElement(By.linkText("HCP 1")).click();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionRefactoringUseCaseTest.java-205:205
// driver.findElement(By.linkText("HCP 1")).click();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionRefactoringUseCaseTest.java-245:245
// driver.findElement(By.linkText("HCP 1")).click();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionRefactoringUseCaseTest.java-262:262
// driver.findElement(By.linkText("Logout")).click();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionRefactoringUseCaseTest.java-272:272
// driver.findElement(By.linkText("HCP 1")).click();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionRefactoringUseCaseTest.java-298:298
// driver.findElement(By.linkText("HCP 1")).click();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionRefactoringUseCaseTest.java-309:309
// driver.findElement(By.name("notes")).sendKeys(

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\PrescriptionRefactoringUseCaseTest.java-310:310
// "Showing signs of dehydration");

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-1:3
/*** ReferralsTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-16:17
/***/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-19:19
// Create a new instance of the html unit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-22:25
/*** setting up required web driver
* @throws java.lang.Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-32:32
//navigating to iTrust home page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-36:38
/** testing for creating new referral
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-66:66
//we should go back to edit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-68:68
//check if it contain the provided comment

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-74:76
/** testing for delete exciting referral
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-87:87
//checking for edit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-92:92
//going back to referrals page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-96:98
/** testing for modifying exciting referral
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-120:120
//we should go back to edit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-122:122
//check if it contain the provided comment

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-127:129
/** testing for viewing sent referral to HCP
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-155:155
//// original sort is by time stamp (descending)

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-159:161
/** testing for viewing referral edit by HCP
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-170:170
//HCP viewing sent referrals

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-173:173
//HCP in editing page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-176:176
//going back to viewing page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-180:182
/** testing for viewing referral with details by patient
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-192:192
//Patient in "My Referrals"

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-196:196
//driver.findElement(By.xpath("(//a[contains(text(),'View')])[5]")).click();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-198:198
//checking for record

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-203:205
/** testing sending message to HCP by patient
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-215:215
//needs to be finished

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-220:222
/** testing viewing referral list by HCP
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-233:233
//checking for records

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-240:242
/** testing viewing referral form by HCP
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReferralsTest.java-253:253
//needs to be finished

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReportAdverseImmuEventTest.java-30:33
/*** Test adverse event reporting.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReportAdverseImmuEventTest.java-45:45
//driver.get(baseUrl + "/iTrust/auth/forwardUser.jsp");

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReportAdverseImmuEventTest.java-46:46
//driver.findElement(By.linkText("Patient 1")).click();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ReportAdverseImmuEventTest.java-49:49
//I have no idea where this link actually is on the page.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\RequestRecordsReleaseTest.java-13:17
/** RequestRecordsReleaseTest contains http unit tests for requesting and viewing
* patient records release requests via a patient, HCP, or UAP role.
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\RequestRecordsReleaseTest.java-20:20
// Create a new instance of the html unit driver

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\RequestRecordsReleaseTest.java-30:30
//go to iTrust home page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\RequestRecordsReleaseTest.java-36:38
/** Adding new record using patient 102
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\RequestRecordsReleaseTest.java-46:46
//used for drop down selection

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\RequestRecordsReleaseTest.java-64:64
//testing if the new record successfully added

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\RequestRecordsReleaseTest.java-70:72
/** Adding a new record without patient signature
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\RequestRecordsReleaseTest.java-96:96
//testing if a new record not added

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\RequestRecordsReleaseTest.java-102:104
/** testing for adding new record without filling the required field
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\RequestRecordsReleaseTest.java-124:126
/** testing to view approved request by the patient
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\RequestRecordsReleaseTest.java-148:151
/** testing for HCP approve a request
* HCP:9000000000
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\RequestRecordsReleaseTest.java-168:171
/** testing for HCP denies a request
* HCP: 9000000000
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\RequestRecordsReleaseTest.java-188:191
/** Testing for UAP denies a request
* UAP: 8000000009
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\RequestRecordsReleaseTest.java-208:211
/** testing for UAP viewing approved request
* UAP: 8000000009
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\RequestRecordsReleaseTest.java-229:232
/** testing for invalid input SQL injection
* UAP: 8000000009
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SearchUserTest.java-31:31
// Create the explicit wait

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SearchUserTest.java-86:86
//assertEquals("iTrust - Please Select a Patient", driver.getTitle());

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-17:22
/*** Tests the functionality of the new Sleep Diary portion of iTrust. Tests
* that you can add new entries, you can view entries, HCPs with the role of
* trainer can view entries, and error checks that the user enters the
* appropriate data in the appropriate format.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-25:27
/*** Sets up the standard testing data.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-33:35
/*** Sanity check.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-40:44
/*** Tests that a patient can add an entry to an empty Sleep Diary.
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-60:60
// View my sleep diary so we can add a new entry

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-68:68
// Fill in all of the info and submit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-81:81
// Ensure the entry was added.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-92:96
/*** Tests that a patient can add an entry to a non empty sleep diary.
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-103:103
// Get the first values.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-111:111
// Get the second values.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-119:119
// Assert that the totals are correct.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-127:127
// Add a new entry.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-132:132
// Enter new entry.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-145:145
// Make sure the new entry shows up with the old entries.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-167:167
// Assert the totals are correct.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-179:183
/*** Tests that HCPs can view a patients sleep diary.
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-190:190
// search for patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-192:192
// the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-197:197
// different way of viewing it since viewing it through HCP

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-209:213
/*** Tests that HCPs can sort a patients sleep diary.
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-232:232
// search for patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-234:234
// the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-239:239
// Only show May 2013 entries.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-249:249
// different way of viewing it since viewing it through HCP

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-257:261
/*** Tests that HCPs can sort a patients sleep diary.
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-280:280
// search for patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-282:282
// the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-287:287
// Only show May 2013 entries.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-299:299
// different way of viewing it since viewing it through HCP

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-316:320
/*** Tests that HCPs can sort a patients sleep diary.
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-339:339
// search for patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-341:341
// the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-346:346
// Only show May 2013 entries.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-358:358
// different way of viewing it since viewing it through HCP

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-375:380
/*** Tests to ensures users have to enter dates in the correct format
* (mm/dd/yy).
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-393:393
// Enter an improper date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-404:404
// should stay on same page and have error message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-410:415
/*** Tests to ensure that HCPs can view a Patient's Sleep Diary when it is
* empty.
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-422:422
// search for patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-424:424
// the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-433:437
/*** Tests that you are not allowed to set the number of hours to 0.
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-450:450
// now enter 0 for hours

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SleepDiaryTest.java-461:461
// should stay on same page and have error message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SurveyUseCaseTest.java-7:9
/*** Use Case 24
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SurveyUseCaseTest.java-20:35
/** Precondition:
* Patient 2 and HCP 9000000000 are in the system.
* Patient 2 had an office visit with HCP 9000000000 on 6/10/2007.
* Patient 2 has successfully authenticated.
* Description:
* Patient 2 chooses to view his records.
* Patient 2 clicks a link next to his office visit on 6/10/2007 to take satisfaction survey.
* He inputs the following information and submits:
* 15 minutes
* 10 minutes
* 3
* 5
* Expected Results:
* The survey answers are stored and the event is logged.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SurveyUseCaseTest.java-57:57
// make sure survey cannot be taken again

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SurveyUseCaseTest.java-63:78
/** Precondition:
* Patient 2 and HCP 9000000000 are in the system.
* Patient 2 had an office visit with HCP 9000000000 on 6/10/2007.
* Patient 2 has successfully authenticated.
* Description:
* Patient 2 chooses to view his records.
* Patient 2 clicks a link next to his office visit on 6/10/2007 to take satisfaction survey.
* He inputs the following information and submits:
* [none]
* 10 minutes
* 3
* [none]
* Expected Results:
* The survey answers are stored and the event is logged.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SurveyUseCaseTest.java-98:98
// make sure survey cannot be taken again

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SurveyUseCaseTest.java-104:113
/** Precondition:
* Patient 2 and HCP 9000000000 are in the system.
* Patient 2 had an office visit with HCP 9000000000 on 6/10/2007.
* Patient 2 has successfully authenticated.
* Description:
* Patient 2 chooses to view his records.
* Patient 2 clicks a link next to his office visit on 6/10/2007 to take satisfaction survey.
* Patient 2 changes his mind and decides to cancel his input.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SurveyUseCaseTest.java-128:128
// patient changes his mind and cancels his input

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\SurveyUseCaseTest.java-135:135
// make sure survey CAN still be taken.  This will throw an exception if the survey is not available

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-13:15
/*** Use Case 34
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-18:20
/*** setUp
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-27:30
/*** testAddPatientsToMonitor
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-32:32
// login HCP

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-37:37
//Click Edit Patient List

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-42:42
// Allow Blood Pressure, Weight, and Pedometer

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-54:57
/*** testRemovePatientsToMonitor
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-59:59
//Add patient 1 to HCP 9000000000's monitoring list

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-61:61
// login HCP

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-66:66
//Click Edit Patient List

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-78:81
/*** testReportPatientStatus
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-83:83
//Add patient 1 to HCP 9000000000's monitoring list

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-85:85
// login Patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-90:90
//Click Report Status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-102:105
/*** testReportPatientWeightAndPedometer
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-107:107
//Add patient 1 to HCP 9000000000's monitoring list

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-110:110
// login Patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-115:115
//Click Report Status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-127:130
/*** testViewMonitoringList
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-132:132
//Sets up all preconditions listed in acceptance test

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-134:134
// login HCP

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-141:141
//Verify all data

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-154:154
//Highlighting for abnormal data

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-178:178
//Highlighting for abnormal data

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-184:187
/*** testViewWeightAndPedometerReports
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-189:189
//Sets up all preconditions listed in acceptance test

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-191:191
// login HCP

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-197:197
//Verify all data

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-209:209
//Highlighting for abnormal data

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-214:217
/*** testUAPReportPatientStatus
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-240:243
/*** testRepresentativeReportPatientStatus
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-253:253
//have to use JS

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-264:267
/*** testRepresentativeReportWeight
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-269:269
//Add patient 1 to HCP 9000000000's monitoring list

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-270:270
//Also add three reports

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-272:272
// login Patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-277:277
//Click Report Status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-281:281
//have to use JS

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-293:296
/*** testUAPReportPatientPedometerReading
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-298:298
//Add patient 1 to HCP 9000000000's monitoring list

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-299:299
//Also add three reports

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-302:302
// login Patient

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-307:307
//Click Report Status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-310:310
//have to use JS

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-322:325
/*** testUAPAddPatientToMonitorTest
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-333:333
//search patient with mid 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-344:347
/*** testUAPAddHCPMonitor
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-355:355
//search patient with mid 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-363:363
//go to reporting page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-374:374
//logout

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-378:378
//log back in

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-393:396
/*** testUAPAddReportDeleteCannotReport
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-399:399
//log in to iTrust

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-404:404
//add Patient 2 to reporting list

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-407:407
//search patient with mid 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-415:415
//go to reporting page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-425:425
//remove Patient 2 from reporting list

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-433:433
// Test for UC34

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-434:437
/*** testWeightHighlighting
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-457:457
//Highlighting for abnormal data

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-462:462
// Test for UC34

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-463:466
/*** testDetailedExternalData
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-491:491
// First entry:

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-497:497
// Second entry:

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-503:503
// Third entry:

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-512:512
// Test for UC34

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\TelemonitoringUseCaseTest.java-513:516
/*** testReportPatientHeight
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadCDCFilesTest.java-29:29
// input tag is under the form of importCDC

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadCDCFilesTest.java-32:32
// upload the file by its absolute path

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadCDCFilesTest.java-42:42
// Current page should contain a message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadCDCFilesTest.java-44:44
// System.out.println(currentPage.getText());

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadCDCFilesTest.java-58:58
// input tag is under the form of importCDC

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadCDCFilesTest.java-61:61
// upload the file by its absolute path

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadCDCFilesTest.java-71:71
// Current page should contain a message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadCDCFilesTest.java-73:73
// System.out.println(currentPage.getText());

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadCDCFilesTest.java-87:87
// input tag is under the form of importCDC

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadCDCFilesTest.java-90:90
// upload the file by its absolute path

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadCDCFilesTest.java-100:100
// Current page should contain a message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadCDCFilesTest.java-102:102
// System.out.println(currentPage.getText());

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadCDCFilesTest.java-116:116
// input tag is under the form of importCDC

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadCDCFilesTest.java-119:119
// upload the file by its absolute path

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadCDCFilesTest.java-129:129
// Current page should contain a message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadCDCFilesTest.java-131:131
// System.out.println(currentPage.getText());

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadCDCFilesTest.java-145:145
// input tag is under the form of importCDC

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadCDCFilesTest.java-148:148
// upload the file by its absolute path

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadCDCFilesTest.java-158:158
// Current page should contain a message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadCDCFilesTest.java-160:160
// System.out.println(currentPage.getText());

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadCDCFilesTest.java-166:166
//test file for weight

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadCDCFilesTest.java-183:183
//test file for height

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadCDCFilesTest.java-232:232
//dirty file to test the return on bad file formats.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadPatientFileTest.java-7:9
/*** Tests the functionality of the Upload Patient File page in iTrust
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadPatientFileTest.java-12:12
//Not sure what this is for, the Sel IDE just made it, might delete

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadPatientFileTest.java-24:27
/*** Tests the patient file upload with a valid file that should be successful
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadPatientFileTest.java-30:30
//This logs us into iTrust and returns the HtmlUnitDriver for use in this case

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadPatientFileTest.java-33:33
//Make sure we were able to log in

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadPatientFileTest.java-40:40
//These testing files already exist in iTrust, so we just need to specify the path to them

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadPatientFileTest.java-50:53
/*** Tests the patient file upload with a file that has a missing email field
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadPatientFileTest.java-64:64
//These testing files already exist in iTrust, so we just need to specify the path to them

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadPatientFileTest.java-74:77
/*** Tests the file upload with a file that has an invalid field.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadPatientFileTest.java-88:88
//These testing files already exist in iTrust, so we just need to specify the path to them

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadPatientFileTest.java-99:102
/*** Tests the file upload with a file that has mismatched fields.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadPatientFileTest.java-111:111
//These testing files already exist in iTrust, so we just need to specify the path to them

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadPatientFileTest.java-123:126
/*** Tests the file upload with a file is empty
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadPatientFileTest.java-135:135
//These testing files already exist in iTrust, so we just need to specify the path to them

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadPatientFileTest.java-146:149
/*** Tests the file upload with a file that has duplicate fields
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadPatientFileTest.java-158:158
//These testing files already exist in iTrust, so we just need to specify the path to them

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadPatientFileTest.java-169:172
/*** Tests the file upload with a file that is a different type and has binary data
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\UploadPatientFileTest.java-181:181
//These testing files already exist in iTrust, so we just need to specify the path to them

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewAccessLogTest.java-39:39
//This logs us into iTrust and returns the HtmlUnitDriver for use in this case

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewAccessLogTest.java-57:57
//This logs us into iTrust and returns the HtmlUnitDriver for use in this case

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewAccessLogTest.java-77:77
// clear operational profile

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewAccessLogTest.java-80:80
//This logs us into iTrust and returns the HtmlUnitDriver for use in this case

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewAccessLogTest.java-101:101
// clear operational profile

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewAccessLogTest.java-104:104
//This logs us into iTrust and returns the HtmlUnitDriver for use in this case

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewAccessLogTest.java-120:120
//This logs us into iTrust and returns the HtmlUnitDriver for use in this case

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewAccessLogTest.java-135:135
//The rest of the original test was commented out

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewAccessLogTest.java-142:142
//This logs us into iTrust and returns the HtmlUnitDriver for use in this case

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewAccessLogTest.java-174:174
//This logs us into iTrust and returns the HtmlUnitDriver for use in this case

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewAccessLogTest.java-181:181
//new Select(driver.findElement(By.id("logMIDSelectMenu"))).selectByVisibleText("Dare Devil");

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewAccessLogTest.java-183:183
//There is no way to read all text on the page through Selenium

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewAccessLogTest.java-202:202
//This logs us into iTrust and returns the HtmlUnitDriver for use in this case

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewAccessLogTest.java-206:206
//Check the text currently in the drop down box to ensure it is not "Devil's Advocate"

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewAccessLogTest.java-219:219
//This logs us into iTrust and returns the HtmlUnitDriver for use in this case

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewAccessLogTest.java-239:239
//now logout

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewAccessLogTest.java-244:244
//This logs us into iTrust and returns the HtmlUnitDriver for use in this case

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewAccessLogTest.java-264:264
//logout

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewAccessLogTest.java-269:269
//This logs us into iTrust and returns the HtmlUnitDriver for use in this case

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewAccessLogTest.java-301:301
//This logs us into iTrust and returns the HtmlUnitDriver for use in this case

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewAccessLogTest.java-317:317
//This logs us into iTrust and returns the HtmlUnitDriver for use in this case

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewAllPatientsUseCaseTest.java-24:24
// This logs us into iTrust and returns the HtmlUnitDriver for use in

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewAllPatientsUseCaseTest.java-25:25
// this case

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewAllPatientsUseCaseTest.java-28:28
// Make sure we were able to log in

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-13:15
/*** Test Diagnosis Trends / Epidemics page
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-19:21
/*** Sets up the test. Clears the tables then adds necessary data
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-31:40
/** Authenticate PHA
* MID 7000000001
* Password: pw
* Choose "Diagnosis Trends"
* Enter Fields:
* ICDCode: 72.00
* ZipCode: 27695
* StartDate: 06/28/2011, EndDate: 09/28/2011
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-41:44
/*** testViewDiagnosisTrends_PHAView1
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-59:59
//assertFalse(isElementPresent(By.id("diagnosisStatisticsTable")));

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-76:76
//assertTrue(isElementPresent(By.id("diagnosisStatisticsTable")));

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-78:78
/* I know this is a stupid assert. This is how it was originally */

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-84:94
/** Authenticate PHA
* MID 7000000001
* Password: pw
* Choose "Epidemics"
* Enter Fields:
* Diagnosis: 84.50 Malaria
* ZipCode: 12345
* StartDate: 1/23/12
* Threshold: [leave blank]
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-95:98
/*** testViewDiagnosisTrendsEpidemic_InvalidThreshold
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-120:126
/** Authenticate HCP MID 9000000008 Password: pw Choose "Diagnosis Trends"
* Enter Fields: ICDCode: 487.00 ZipCode: 27695 StartDate: 08/28/2011,
* EndDate: 09/28/2011 Document new office visit Add new diagnosis (487.00)
* Choose "Diagnosis Trends" Enter Fields: ICDCode: 487.00 ZipCode: 27695
* StartDate: 08/28/2011, EndDate: 09/28/2011
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-127:131
/*** testViewDiagnosisTrends_LHCPObserveIncrease
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-136:136
// Click Diagnosis Trends

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-142:142
// View Trend

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-160:160
// Click Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-164:164
// Search and choose patient 25

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-165:165
//search for patient 25 by MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-168:168
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-174:174
// Click "Yes, Document Office Visit"

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-195:195
// View Trend again

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-216:220
/** Authenticate HCP MID 9000000008 Password: pw Choose "Diagnosis Trends"
* Enter Fields: ICDCode: 487.00 ZipCode: 276 StartDate: 08/28/2011,
* EndDate: 09/28/2011
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-221:225
/*** testViewDiagnosisTrends_InvalidZip
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-229:229
// Click Diagnosis Trends

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-234:234
// View Trend

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-252:261
/** Authenticate HCP
* MID 9000000008
* Password: pw
* Choose "Diagnosis Trends"
* Enter Fields:
* ICDCode: 84.50
* ZipCode: 27519
* StartDate: 09/28/2011, EndDate: 08/28/2011
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-262:265
/*** testViewDiagnosisTrends_InvalidDates
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-269:269
// Click Diagnosis Trends

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-275:275
// View Trend

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-293:306
/** Authenticate HCP
* MID 9000000008
* Password: pw
* Choose "Diagnosis Trends"
* Enter Fields:
* ICDCode: 487.00
* ZipCode: 27695
* StartDate: 08/28/2011, EndDate: 09/28/2011
* Enter Fields:
* ICDCode: 487.00
* ZipCode: 27606
* StartDate: 08/28/2011, EndDate: 09/28/2011
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-307:310
/*** testViewDiagnosisTrends_SameRegionCount
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-314:314
// Click Diagnosis Trends

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-319:319
// View Trend

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-352:361
/** Authenticate HCP
* MID 9000000000
* Password: pw
* Choose "Diagnosis Trends"
* Enter Fields:
* ICDCode: 84.50
* ZipCode: 27519
* StartDate: 09/28/2011, EndDate: 09/28/2011
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-362:365
/*** testViewDiagnosisTrends_SameDateStartEnd
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-369:369
// Click Diagnosis Trends

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-374:374
// View Trend

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-395:404
/** Authenticate HCP
* MID 9000000008
* Password: pw
* Choose "Diagnosis Trends"
* Enter Fields:
* ICDCode: 487.00
* ZipCode: 27607
* StartDate: 08/28/2011, EndDate: 09/28/2011
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-405:408
/*** testViewDiagnosisTrends_RegionNotLess
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-412:412
// Click Diagnosis Trends

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-417:417
// View Trend

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-437:446
/** Authenticate HCP
* MID 9000000008
* Password: pw
* Choose "Diagnosis Trends"
* Enter Fields:
* ICDCode: ""
* ZipCode: 27695
* StartDate: 08/28/2011, EndDate: 09/28/2011
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-447:450
/*** testViewDiagnosisTrends_NoDiagnosisSelected
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-454:454
// Click Diagnosis Trends

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-459:459
// View Trend

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-476:479
/*** viewDiagnosisEpidemics_NoEpidemicRecords
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-483:483
// Click Diagnosis Trends

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-488:488
// View Trend

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-506:509
/*** viewDiagnosisEpidemics_YesEpidemic
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-515:515
// Click Diagnosis Trends

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-520:520
// View Trend

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-535:538
/*** viewDiagnosisEpidemics_NoEpidemic
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-543:543
// Click Diagnosis Trends

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewDiagnosisStatisticsTest.java-548:548
// View Trend

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewEmergencyReportTest.java-37:37
// This logs us into iTrust and returns the HtmlUnitDriver for use in

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewEmergencyReportTest.java-38:38
// this case

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewEmergencyReportTest.java-47:47
//logout

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewExpiredPrescriptionsTest.java-56:56
// click on My Expired Prescription Reports

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewExpiredPrescriptionsTest.java-79:79
// click on My Expired Prescription Reports

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewExpiredPrescriptionsTest.java-103:103
// click on My Expired Prescription Reports

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-14:16
/*** Selenium tests for ViewHealthRecordsHistory
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-20:23
/*** Sets up the test environment
* @throws java.lang.Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-28:28
//Generate standard data

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-32:35
/*** testOfficeVisit4MonthOldViewHealthMetrics
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-38:38
//Login as HCP Shelly Vang

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-42:42
//Click Document Office Visit Link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-45:45
//Search for Brynn McClain (MID 101)

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-48:48
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-50:50
//Verify Document Office Visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-52:52
//Click Yes, Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-54:54
//Verify Edit Office Visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-57:57
//Add a new office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-58:58
//Enter 10/01/2013 for the Office Visit Date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-61:61
//Select Central Hospital for the hospital

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-63:63
//Enter "Brynn can start eating rice cereal mixed with breast milk or formula once a day" for Notes

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-66:66
//Click the create button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-69:69
//Verify "Information Successfully Updated" message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-72:72
//Enter Health Metrics

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-73:73
//Enter 22.3 in for Length

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-76:76
//Enter 16.5 lbs for Weight

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-79:79
//Enter 16.1 in for Head Circumference

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-82:82
//Select '1 - non-smoking household' for household smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-84:84
//Click the Add Record button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-87:87
//Verify "Health information successfully updated." message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-90:90
//Click Basic Health Information link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-94:94
//Verify Basic Health Information page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-97:97
//Verify adult health record table displays

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-101:101
//Verify the table has the provided information: Header, field descriptions, 1 row of health records

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-104:104
//Verify table contents

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-105:105
//Row 1 values

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-106:106
//Office visit date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-108:108
//Patient length

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-110:110
//Patient weight

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-112:112
//Patient head circumference

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-114:114
//Patient household smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-118:121
/*** testOfficeVisit24YrOldViewHealthMetrics
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-124:124
//Login as Patient Thane Ross (MID 105)

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-128:128
//Click View My Records link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-132:132
//Verify Basic Health Information page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-135:135
//Verify adult health record table displays

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-139:139
//Check that the table has 3 rows

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-141:141
//Office visit date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-143:143
//Patient height

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-145:145
//Patient weight

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-147:147
//Patient BMI

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-149:149
//Check weight status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-151:151
//Patient blood pressure

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-153:153
//Patient smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-155:155
//Patient household smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-157:157
//Patient HDL levels

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-159:159
//Patient LDL levels

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-161:161
//Patient triglycerides

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-165:168
/*** testOfficeVisit20YrOldViewHealthMetrics
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-171:171
//Login as HCP Shelly Vang

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-175:175
//Click Basic Health Information link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-178:178
//Search for Daria Griffin (MID 104)

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-181:181
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-184:184
//Verify Basic Health Information page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-187:187
//Verify adult health record table displays

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-193:193
//Check that the table has 3 rows

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-195:195
//Verify table contents

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-197:197
//Row 1 values

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-198:198
//Office visit date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-200:200
//Patient length

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-202:202
//Patient weight

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-204:204
//Patient BMI

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-206:206
//Weight status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-208:208
//Patient blood pressure

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-210:210
//Patient smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-212:212
//Patient household smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-214:214
//Patient HDL levels

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-216:216
//Patient LDL levels

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-218:218
//Patient triglycerides

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-222:222
//Row 2 values

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-223:223
//Office visit date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-225:225
//Patient length

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-227:227
//Patient weight

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-229:229
//Patient BMI

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-231:231
//Weight status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-233:233
//Patient blood pressure

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-235:235
//Patient smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-237:237
//Patient household smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-239:239
//Patient HDL levels

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-241:241
//Patient LDL levels

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-243:243
//Patient triglycerides

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-246:246
//Row 3 values

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-247:247
//Office visit date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-249:249
//Patient length

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-251:251
//Patient weight

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-253:253
//Patient BMI

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-255:255
//Weight status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-257:257
//Patient head circumference

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-259:259
//Patient smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-261:261
//Patient household smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-263:263
//Patient HDL levels

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-265:265
//Patient LDL levels

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-267:267
//Patient triglycerides

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-271:274
/*** testDeletedHealthRecord
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-277:277
//Login as HCP Kelly Doctor

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-281:281
//Click Document Office Visit Link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-284:284
//Search for Random Person (MID 1)

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-287:287
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-289:289
//Verify Document Office Visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-291:291
//Click Yes, Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-293:293
//Verify Edit Office Visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-296:296
//Add a new office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-297:297
//Enter 10/01/2013 for the Office Visit Date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-300:300
//Select Central Hospital for the hospital

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-302:302
//Enter "Random has consumed unknown seed 32912" for Notes

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-305:305
//Click the create button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-309:309
//Verify "Information Successfully Updated" message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-311:311
//Enter Health Metrics

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-312:312
//Enter 74 in for Height

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-315:315
//Enter 165.8 lbs for Weight

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-318:318
//Enter 110/75 mmHg for Blood Pressure

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-323:323
//Select '1 - non-smoking household' for Household Smoking Status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-325:325
//Select '3 - Former smoker' for Patient Smoking Status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-327:327
//Enter 68 for HDL

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-330:330
//Enter 107 for LDL

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-333:333
//Enter 162 for Triglycerides

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-336:336
//Click Update Record

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-339:339
//Verify "Health information successfully updated." message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-343:343
//Remove health record

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-347:347
//Click Basic Health Information link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-350:350
//Verify Basic Health Information page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-356:356
//Verify the table has the provided information: Header, field descriptions, 1 row of health records

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-358:358
//Verify table contents

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-360:360
//Row 1 values

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-361:361
//Office visit date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-363:363
//Patient length

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-365:365
//Patient weight

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-367:367
//Patient BMI

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-369:369
//Weight status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-371:371
//Patient blood pressure

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-373:373
//Patient smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-375:375
//Patient household smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-377:377
//Patient HDL levels

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-379:379
//Patient LDL levels

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-381:381
//Patient triglycerides

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-383:383
//By personnel Kelly Doctor

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-387:390
/*** testOfficeVisitDateIsBirthDate
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-393:393
//Login as HCP Shelly Vang

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-397:397
//Click Document Office Visit Link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-400:400
//Search for Random Person (MID 1)

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-403:403
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-406:406
//Verify Document Office Visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-408:408
//Click Yes, Document Office Visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-410:410
//Verify Edit Office Visit page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-413:413
//Add a new office visit

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-414:414
//Enter 05/01/2016 for the Office Visit Date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-417:417
//Select Central Hospital for the hospital

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-419:419
//Enter "Brynn is growing into a beautiful sunflower" for Notes

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-422:422
//Click the create button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-425:425
//Verify "Information Successfully Updated" message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-428:428
//Enter Health Metrics

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-429:429
//Enter 42.8 in for Height

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-432:432
//Enter 41.2 lbs for Weight

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-435:435
//Enter 123/64 mmHg for Blood Pressure

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-440:440
//Select '1 - non-smoking household' for Household Smoking Status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-442:442
//Click the Add Record button

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-445:445
//Verify "Health information successfully updated." message

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-448:448
//Click Basic Health Information link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-451:451
//Verify Basic Health Information page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-454:454
//Verify youth health record table displays

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-458:458
//Verify the table has the provided information: Header, field descriptions, 1 row of health records

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-460:460
//Verify table contents

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-462:462
//Row 1 youth values

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-463:463
//Office visit date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-465:465
//Patient length

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-467:467
//Patient weight

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-469:469
//Patient blood pressure

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-471:471
//Patient household smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-475:478
/*** testHCPLoggingAction
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-481:481
//Login as HCP Shelly Vang

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-485:485
//Click Basic Health Information link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-488:488
//Search for patient MID 102

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-491:491
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-493:493
//Verify Basic Health Information page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-496:496
//Log out as Shelly Vang

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-501:501
//Log in as MID 102

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-504:504
//Make sure HCP action is appears in Your Activity Feed

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-509:512
/*** testViewHealthMetricsByHCP
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-515:515
//Login as HCP Shelly Vang

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-519:519
//Click Basic Health Information link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-522:522
//Search for Caldwell Hudson (MID 102)

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-525:525
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-527:527
//Verify Basic Health Information page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-530:530
//Verify baby health record table displays

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-538:538
//Verify the table has the provided information: Header, field descriptions, 3 rows of health records

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-541:541
//Verify table contents

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-543:543
//Row 1 values

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-544:544
//Office visit date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-546:546
//Patient length

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-548:548
//Patient weight

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-550:550
//Patient head circumference

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-552:552
//Patient household smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-555:555
//Row 2 values

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-556:556
//Office visit date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-558:558
//Patient length

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-560:560
//Patient weight

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-562:562
//Patient head circumference

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-564:564
//Patient household smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-567:567
//Row 3 values

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-568:568
//Office visit date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-570:570
//Patient length

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-572:572
//Patient weight

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-574:574
//Patient head circumference

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-576:576
//Patient household smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-579:579
//Row 4 values

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-580:580
//Office visit date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-582:582
//Patient length

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-584:584
//Patient weight

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-586:586
//Patient head circumference

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-588:588
//Patient household smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-591:591
//Row 5 values

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-592:592
//Office visit date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-594:594
//Patient length

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-596:596
//Patient weight

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-598:598
//Patient head circumference

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-600:600
//Patient household smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-604:607
/*** testOfficeVisit5YrOldViewHealthMetrics
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-610:610
//Login as HCP Shelly Vang

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-614:614
//Click Basic Health Information link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-617:617
//Search for Fulton Gray (MID 103)

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-620:620
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-622:622
//Verify Basic Health Information page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-625:625
//Verify youth health record table displays

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-631:631
//Verify the table has the provided information: Header, field descriptions, 3 rows of health records

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-634:634
//Verify table contents

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-636:636
//Row 1 youth values

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-637:637
//Office visit date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-639:639
//Patient length

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-641:641
//Patient weight

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-643:643
//Patient blood pressure

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-645:645
//Patient household smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-648:648
//Row 2 youth values

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-649:649
//Office visit date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-651:651
//Patient length

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-653:653
//Patient weight

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-655:655
//Patient blood pressure

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-657:657
//Patient household smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-661:661
//Row 1 baby values

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-662:662
//Office visit date

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-664:664
//Patient length

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-666:666
//Patient weight

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-668:668
//Patient head circumference

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-670:670
//Patient household smoking status

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-674:677
/*** testNoHealthRecordsExistByHCP
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-680:680
//Login as HCP Shelly Vang

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-684:684
//Click Basic Health Information link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-687:687
//Search for Brynn McClain (MID 101)

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-690:690
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-692:692
//Verify Basic Health Information page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-695:695
//Verify that message displays to user

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-699:702
/*** testNoHealthRecordsExistByPatient
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-705:705
//Login as Patient Brynn McClain (MID 101)

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-709:709
//Click View My Records link

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-712:712
//Verify Basic Health Information page

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewHealthRecordsHistoryTest.java-715:715
//Verify that message displays to user

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewMyProvidersTest.java-11:13
/*** Test class for the viewVisitedHCPs.jsp
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewMyProvidersTest.java-25:28
/*** testViewMyProviders1
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewMyProvidersTest.java-43:43
// Only Kelly Doctor should be listed now.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewMyProvidersTest.java-46:46
// Gandalf Stormcrow is no longer listed.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewMyProvidersTest.java-50:53
/*** testViewMyProviders2
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewMyProvidersTest.java-69:69
// Only Kelly Doctor should be listed now.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewMyProvidersTest.java-72:72
// Gandalf Stormcrow is no longer listed.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewMyProvidersTest.java-76:79
/*** TableElement a helper class for Selenium test htmlunitdriver retrieving
* data from tables.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewMyProvidersTest.java-84:88
/*** Constructor.
* This object will help user to get data from each cell of the table.
* @param tableElement The table WebElement.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewMyProvidersTest.java-100:105
/*** Get data from given row and column cell.
* @param row (start from 0)
* @param column(start from 0)
* @return The WebElement in that given cell.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewMyRecordsTest.java-26:31
/** Authenticate Patient
* MID: 2
* Password: pw
* Choose option View My Records
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewMyRecordsTest.java-32:35
/*** testViewRecords3
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewMyRecordsTest.java-51:56
/** Authenticate Patient
* MID: 4
* Password: pw
* Choose option View My Records
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewMyRecordsTest.java-57:60
/*** testViewRecords4
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewMyRecordsTest.java-70:76
/** Authenticate Patient
* MID: 2
* Password: pw
* Choose option View My Records
* Choose to view records for mid 1, the person he represents.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewMyRecordsTest.java-77:80
/*** testViewRecords5
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewMyRecordsTest.java-92:92
// check to make sure you are viewing patient 1's records

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewMyReportRequestsTest.java-31:31
//search for patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewMyReportRequestsTest.java-34:34
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewMyReportRequestsTest.java-52:55
/*** TableElement a helper class for Selenium test htmlunitdriver retrieving
* data from tables.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewMyReportRequestsTest.java-59:63
/*** Constructor.
* This object will help user to get data from each cell of the table.
* @param tableElement The table WebElement.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewMyReportRequestsTest.java-65:65
// TODO Auto-generated constructor stub

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewMyReportRequestsTest.java-74:79
/*** Get data from given row and column cell.
* @param row (start from 0)
* @param column(start from 0)
* @return The WebElement in that given cell.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewPatientsUseCaseTest.java-14:16
/*** Use Case 28
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewPatientsUseCaseTest.java-28:40
/** Precondition:
* LHCP 9000000000 and Patients 1-4 are in the database
* Office Visits 11, 902-911, 111, and 1 are in the database.
* LHCP 9000000000 has authenticated successfully.
* Description:
* 1. LHCP clicks on "View All Patients" link.
* Expected Results:
* A list of the following should be displayed:
* Andy Programmer, 344 Bob Street Raleigh NC 27607, 2007-06-10.
* Care needs, 1247 Noname Dr Suite 106 Raleigh NC 27606, 2005-10-10.
* Random Person, 1247 Noname Dr Suite 106 Raleigh NC 27606, 2005-10-10.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewPatientsUseCaseTest.java-41:44
/*** testViewLHCPPatients
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewPatientsUseCaseTest.java-53:53
//System.out.println(driver.getPageSource());

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewPatientsUseCaseTest.java-75:78
/*** TableElement a helper class for Selenium test htmlunitdriver retrieving
* data from tables.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewPatientsUseCaseTest.java-82:86
/*** Constructor.
* This object will help user to get data from each cell of the table.
* @param tableElement The table WebElement.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewPatientsUseCaseTest.java-96:101
/*** Get data from given row and column cell.
* @param row (start from 0)
* @param column(start from 0)
* @return The WebElement in that given cell.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewRecordsUseCaseTest.java-8:10
/*** Use Case 9
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewRecordsUseCaseTest.java-23:23
// Login

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewRecordsUseCaseTest.java-25:25
// Records page contains patient information

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewRecordsUseCaseTest.java-42:42
// Login

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewRecordsUseCaseTest.java-47:47
// Clicking on a representee's name takes you to their records

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewRecordsUseCaseTest.java-54:54
// Login

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\ViewRecordsUseCaseTest.java-64:81
/** Precondition:
* Patient 2 and all his data have been loaded into iTrust
* Patient 2 has successfully authenticated
* Description:
* 1. Patient 2 chooses to view his records
* 2. Chooses link to office visit "6/10/2007"
* Expected Result:
* The following data should be displayed: Office Visit Details Date: 06/10/2007
*   HCP: Kelly Doctor (9000000000)
*   Diagnoses
*   ICD Code	Description
*   No Diagnoses for this visit
*   Medications
*   No Medications on record
*   Procedures
*   No Procedures on record
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\WardTest.java-14:16
/*** WardTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\WardTest.java-27:27
//gen.insertwards();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\WardTest.java-28:28
//gen.hcp0();

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\WardTest.java-33:33
//6. Heart Doctor will assign 3 patients to the cardiac ward. If Heart Doctor tries to assign yet another, an error will be displayed static the ward is full.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\WardTest.java-34:37
/*** testhcpaddremovepatient
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\WardTest.java-47:47
//select patient 1

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\WardTest.java-50:50
//the button to click should have the text of the MID

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\WardTest.java-55:58
/*** testadminaddremoveward
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\WardTest.java-70:70
//check make sure table is gone

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\WardTest.java-77:77
//5. Admin will assigned "Heart Doctor (Heart Surgeon)" to the cardiac ward and "Baby Doctor (Pediatrician)" to the two pediatric wards.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\WardTest.java-78:78
//  If the admin assigns the wrong doctor to the wrong ward, an error will be displayed.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\WardTest.java-79:79
//changed baby doctor to kelly doctor because testdata is already present

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\WardTest.java-80:83
/*** testadminassignhcp
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\WardTest.java-92:92
// ERROR: Caught exception [ERROR: Unsupported command [addSelection | name=HCPtoAdd | label=Kelly Doctor]]

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\WardTest.java-97:97
// ERROR: Caught exception [ERROR: Unsupported command [addSelection | name=HCPtoRemove | label=Kelly Doctor]]

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\WardTest.java-100:100
//4. Admin will create a three test wards to Central Hospital, and proceed some related operations on it, such as creating testing rooms.

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\WardTest.java-101:104
/*** testaddwardtohospital
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\selenium\WardTest.java-134:134
// ERROR: Caught exception [ERROR: Unsupported command [addSelection | name=HCPtoAdd | label=Shelly Vang]]

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\WardTest.java-143:143
// ERROR: Caught exception [ERROR: Unsupported command [addSelection | name=HCPtoAdd | label=Shelly Vang]]

iTrust_v21\test\edu\ncsu\csc\itrust\selenium\WardTest.java-148:148
//Check if all wards have been created and rooms.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ActivityFeedActionTest.java-68:71
/*** Verifies that certain transactions from the DLHCP are hidden in the activity feed per use case 43.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddDrugListActionTest.java-1:3
/*** Tests AddDrugListAction for importing NDC information.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddDrugListActionTest.java-24:26
/** Four lines selected from the text download of the fall 2011 version of the FDA NDC database
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddDrugListActionTest.java-44:46
/*** Sets up defaults
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewObstetricsActionTest.java-45:45
//make a patient bean for testing flag functionality

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewObstetricsActionTest.java-67:67
//make an obstetrics bean (note that these dates don't have to be correctly calculated)

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewObstetricsActionTest.java-81:81
//make a bean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewObstetricsActionTest.java-137:137
//make a flag bean for testing flag functionality

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewObstetricsActionTest.java-150:150
//make a health record bean for testing Abnormal weight change flag

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewObstetricsActionTest.java-168:168
//add the health record for our patient

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewObstetricsActionTest.java-172:172
//add the bean TODO actually set flags before this

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewObstetricsActionTest.java-179:179
//now do view things

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewObstetricsActionTest.java-182:182
//first get a single record (OID = 1)

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewObstetricsActionTest.java-186:186
//then get all records by (MID = 1)

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewObstetricsActionTest.java-191:191
//now, edit one of the beans

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewObstetricsActionTest.java-196:196
//and get it again

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewObstetricsActionTest.java-199:199
//test the update fhr flag function

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewObstetricsActionTest.java-203:203
//test flag functionality

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewObstetricsActionTest.java-216:216
//a null obstetrics bean to test exceptions

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewObstetricsActionTest.java-219:219
//test that trying to add a null bean throws an ITrustException

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewObstetricsActionTest.java-227:227
//test that trying to add a null bean throws an ITrustException

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewOphthalmologyOVActionTest.java-39:39
//Create a valid bean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewOphthalmologyOVActionTest.java-58:58
//Create another valid bean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewOphthalmologyOVActionTest.java-73:73
//Create another valid bean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewOphthalmologyOVActionTest.java-90:90
//Create another valid bean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewOphthalmologyOVActionTest.java-107:107
//Create another valid bean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewOphthalmologyOVActionTest.java-126:126
//Add the beans

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewOphthalmologyOVActionTest.java-133:133
//Now test the view

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewOphthalmologyOVActionTest.java-153:153
//Now test the view for a Patient viewing their own records

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewOphthalmologyOVActionTest.java-158:158
//Now test the view for a Patient viewing a Dependent's records

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewOphthalmologyScheduleOVActionTest.java-57:57
//Won't happen

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewOphthalmologyScheduleOVActionTest.java-72:72
//Won't happen

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewOphthalmologyScheduleOVActionTest.java-87:87
//Won't happen

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewOphthalmologyScheduleOVActionTest.java-102:102
//Won't happen

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewOphthalmologyScheduleOVActionTest.java-117:117
//Won't happen

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewOphthalmologyScheduleOVActionTest.java-122:122
//Add the beans

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewOphthalmologyScheduleOVActionTest.java-129:129
//Now test the view

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewOphthalmologyScheduleOVActionTest.java-146:146
//Now test the view for a Patient viewing their own records

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewOphthalmologyScheduleOVActionTest.java-151:151
//Now test the view for a Patient viewing a Dependent's records

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewOphthalmologySurgeryActionTest.java-38:38
//Create a valid bean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewOphthalmologySurgeryActionTest.java-59:59
//Create another valid bean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewOphthalmologySurgeryActionTest.java-76:76
//Create another valid bean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewOphthalmologySurgeryActionTest.java-95:95
//Create another valid bean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewOphthalmologySurgeryActionTest.java-111:111
// Surgery and notes aren't required

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewOphthalmologySurgeryActionTest.java-113:113
//Create another valid bean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewOphthalmologySurgeryActionTest.java-131:131
//Add the beans

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewOphthalmologySurgeryActionTest.java-138:138
//Now test the view

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddEditViewOphthalmologySurgeryActionTest.java-155:155
// Patients don't have to be able to view their surgical records, per documentation

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddERespActionTest.java-1:3
/*** Tests for AddPatientAction
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddERespActionTest.java-22:24
/*** Sets up defaults
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddERespActionTest.java-33:36
/*** Tests adding a new ER
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddExerciseEntryActionTest.java-19:22
/*** Tests adding exercise entries to the exercise diary
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddExerciseEntryActionTest.java-47:49
/*** Clears all of the tables.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddExerciseEntryActionTest.java-54:57
/*** Tests that a patient can add a new exercise entry to an empty diary.
* Log in as the patient Random Person who has no prior exercise entries.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddExerciseEntryActionTest.java-99:102
/*** Tests that a patient can add a new exercise entry to a diary that already
* has some entries in it.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddExerciseEntryActionTest.java-163:165
/*** Tests that dates must be entered in the correct format.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddExerciseEntryActionTest.java-180:186
/*** Tests that dates in the future cannot be entered in.
* Eventually this test will fail because I am hardcoding in the date.
* However, since it is in the future 100 years, I do not expect this to be
* a problem (I spent about 30 minutes trying to use the Calendar class to
* add one day to today's date, but I could'nt get it to format correctly).
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddExerciseEntryActionTest.java-201:204
/*** Ensures that only breakfast, lunch, dinner, or snack is allowed
* as the exercise type
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddExerciseEntryActionTest.java-219:221
/*** Test that the name of the exercise cannot be null or empty
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddExerciseEntryActionTest.java-245:247
/*** Test that the number of hours worked must be a positive number
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddExerciseEntryActionTest.java-267:270
/*** Test that the number of calories cannot be negative.
* @throws ITrustException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddExerciseEntryActionTest.java-283:283
//now try to make them negative

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddExerciseEntryActionTest.java-296:298
/*** Test with an evil factory
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddFoodEntryActionTest.java-19:22
/*** Tests adding food entries to the food diary
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddFoodEntryActionTest.java-50:52
/*** Clears all of the tables.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddFoodEntryActionTest.java-57:60
/*** Tests that a patient can add a new food entry to an empty diary.
* Log in as the patient Derek Morgan who has no prior food entries.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddFoodEntryActionTest.java-101:104
/*** Tests that a patient can add a new food entry to a diary that already
* has some entries in it.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddFoodEntryActionTest.java-162:164
/*** Tests that dates must be entered in the correct format.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddFoodEntryActionTest.java-179:185
/*** Tests that dates in the future cannot be entered in.
* Eventually this test will fail because I am hardcoding in the date.
* However, since it is in the future 100 years, I do not expect this to be
* a problem (I spent about 30 minutes trying to use the Calendar class to
* add one day to today's date, but I could'nt get it to format correctly).
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddFoodEntryActionTest.java-200:203
/*** Ensures that only breakfast, lunch, dinner, or snack is allowed
* as the meal type
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddFoodEntryActionTest.java-218:220
/*** Test that the name of the food cannot be null or empty
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddFoodEntryActionTest.java-244:246
/*** Test that the number of servings must be a positive number
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddFoodEntryActionTest.java-266:269
/*** Test that the number of calories cannot be negative.
* @throws ITrustException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddFoodEntryActionTest.java-282:282
//now try to make them negative

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddFoodEntryActionTest.java-295:297
/*** Tests that the grams of fat per serving cannot be negative
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddFoodEntryActionTest.java-310:310
//now try to make them negative

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddFoodEntryActionTest.java-324:327
/*** Test that the number of sodium cannot be negative.
* @throws ITrustException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddFoodEntryActionTest.java-340:340
//now try to make them negative

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddFoodEntryActionTest.java-354:356
/*** Tests that the grams of fat per serving cannot be negative
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddFoodEntryActionTest.java-369:369
//now try to make them negative

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddFoodEntryActionTest.java-384:387
/*** Test that the number of sugars cannot be negative.
* @throws ITrustException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddFoodEntryActionTest.java-400:400
//now try to make them negative

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddFoodEntryActionTest.java-414:416
/*** Tests that the grams of fiber per serving cannot be negative
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddFoodEntryActionTest.java-429:429
//now try to make them negative

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddFoodEntryActionTest.java-443:445
/*** Tests that the grams of protein per serving cannot be negative
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddFoodEntryActionTest.java-458:458
//now try to make them negative

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddFoodEntryActionTest.java-472:474
/*** Test with an evil factory
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddHCPActionTest.java-1:7
/*** Tests AddHCPAction in that the validator is checked and the proper DAOs are hit.
*
* This tests is an example of using Mock Objects. If you haven't covered this in class (yet, or at all), then
* disregard this class. If you are trying to learn about unit testing with Mock Objects, this is a great
* class to start with.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddHCPActionTest.java-22:24
/*** Sets up defaults
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddHCPActionTest.java-27:27
// Step 0. Initialize the mocks and other necessary objects.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddHCPActionTest.java-29:29
// Step 1. Initialize any other classes we need.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddHCPActionTest.java-38:43
/*** Tests adding a new HCP
*
* @throws Exception
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddHCPActionTest.java-45:45
// Step 2. For each test, set up the expectations of what will be called (started in initMocks)

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddHCPActionTest.java-49:49
// Step 3. Exit recording mode, go into playback mode

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddHCPActionTest.java-52:52
// Step 3. Actually run the method under test, checking its return value

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddHCPActionTest.java-57:57
// Step 4. Verify the mocks were hit as you expected

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddLTActionTest.java-1:7
/*** Tests AddHCPAction in that the validator is checked and the proper DAOs are hit.
*
* This tests is an example of using Mock Objects. If you haven't covered this in class (yet, or at all), then
* disregard this class. If you are trying to learn about unit testing with Mock Objects, this is a great
* class to start with.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddLTActionTest.java-22:24
/*** Sets up defaults
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddLTActionTest.java-27:27
// Step 0. Initialize the mocks and other necessary objects.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddLTActionTest.java-29:29
// Step 1. Initialize any other classes we need.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddLTActionTest.java-38:43
/*** Tests adding a new LT
*
* @throws Exception
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddLTActionTest.java-45:45
// Step 2. For each test, set up the expectations of what will be called (started in initMocks)

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddLTActionTest.java-49:49
// Step 3. Exit recording mode, go into playback mode

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddLTActionTest.java-52:52
// Step 3. Actually run the method under test, checking its return value

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddLTActionTest.java-57:57
// Step 4. Verify the mocks were hit as you expected

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddPatientActionTest.java-1:3
/*** Tests for AddPatientAction
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddPatientActionTest.java-20:22
/*** Sets up defaults
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddPatientActionTest.java-32:35
/*** Tests adding a new patient
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddPatientActionTest.java-39:39
//Add a dependent

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddPatientActionTest.java-48:48
//Add a non-dependent

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddPatientFileActionTest.java-15:18
/*** Tests adding a patient file
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddPatientFileActionTest.java-29:34
/*** Test when you have valid data
* @throws CSVFormatException
* @throws AddPatientFileException
* @throws FileNotFoundException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddPatientFileActionTest.java-47:52
/*** Tests with invalid data
* @throws CSVFormatException
* @throws AddPatientFileException
* @throws FileNotFoundException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddPatientFileActionTest.java-65:70
/*** Test adding a duplicate field
* @throws CSVFormatException
* @throws AddPatientFileException
* @throws FileNotFoundException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddPatientFileActionTest.java-88:93
/*** Tests with an invalid header
* @throws CSVFormatException
* @throws AddPatientFileException
* @throws FileNotFoundException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddPatientFileActionTest.java-111:116
/*** Tests when you have a required field missing
* @throws CSVFormatException
* @throws AddPatientFileException
* @throws FileNotFoundException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddPHAActionTest.java-1:7
/*** Tests AddHCPAction in that the validator is checked and the proper DAOs are hit.
*
* This tests is an example of using Mock Objects. If you haven't covered this in class (yet, or at all), then
* disregard this class. If you are trying to learn about unit testing with Mock Objects, this is a great
* class to start with.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddPHAActionTest.java-24:26
/*** Sets up defaults
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddPHAActionTest.java-39:44
/*** Tests adding a new PHA
*
* @throws Exception
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddRemoteMonitoringDataActionTest.java-11:13
/*** AddRemoteMonitoringDataActionTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddRemoteMonitoringDataActionTest.java-28:31
/*** testAddRemoteMOnitoringData
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddRemoteMonitoringDataActionTest.java-44:47
/*** testAddRemoteMonitoringDataUAP
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddRemoteMonitoringDataActionTest.java-63:66
/*** testAddRemoteMonitoringDataGlucoseOnly
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddRemoteMonitoringDataActionTest.java-77:80
/*** testAddRemoteMonitoringDataGlucoseOnlyUAP
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddRemoteMonitoringDataActionTest.java-94:97
/*** testAddRemoteMonitoringDataBloodPressureOnly
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddRemoteMonitoringDataActionTest.java-109:112
/*** testAddRemoteMonitoringDataBloodPressureOnlyUAP
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddRemoteMonitoringDataActionTest.java-127:130
/*** testAddRemoteMonitoringWeightDataOnly
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddRemoteMonitoringDataActionTest.java-141:144
/*** testAddRemoteMonitoringPedometerReadingDataOnly
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddRemoteMonitoringDataActionTest.java-155:158
/*** testAddRemoteMonitoringExternalDataOnly
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddRemoteMonitoringDataActionTest.java-170:173
/*** testAddRemoteMonitoringHeightWeightDataOnly
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddRemoteMonitoringDataActionTest.java-185:188
/*** testAddBadRemoteMonitoringData
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddRemoteMonitoringDataActionTest.java-197:197
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddRemoteMonitoringDataActionTest.java-208:208
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddRemoteMonitoringDataActionTest.java-219:219
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddRemoteMonitoringDataActionTest.java-230:230
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddRemoteMonitoringDataActionTest.java-266:269
/*** testAddBadRemoteMonitoringWerightData
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddRemoteMonitoringDataActionTest.java-282:285
/*** testAddBadRemoteMonitoringPedometerReadingData
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddRemoteMonitoringDataActionTest.java-298:301
/*** testRepresentativeReportStatus
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddRemoteMonitoringDataActionTest.java-313:316
/*** testAddBadRemoteMonitoringGlucoseLevelData
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddSleepEntryActionTest.java-19:22
/*** Tests adding sleep entries to the sleep diary
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddSleepEntryActionTest.java-42:44
/*** Clears all of the tables.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddSleepEntryActionTest.java-49:52
/*** Tests that a patient can add a new sleep entry to an empty diary.
* Log in as the patient Random Person who has no prior sleep entries.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddSleepEntryActionTest.java-87:90
/*** Tests that a patient can add a new sleep entry to a diary that already
* has some entries in it.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddSleepEntryActionTest.java-136:138
/*** Tests that dates must be entered in the correct format.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddSleepEntryActionTest.java-153:159
/*** Tests that dates in the future cannot be entered in.
* Eventually this test will fail because I am hardcoding in the date.
* However, since it is in the future 100 years, I do not expect this to be
* a problem (I spent about 30 minutes trying to use the Calendar class to
* add one day to today's date, but I could'nt get it to format correctly).
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddSleepEntryActionTest.java-174:177
/*** Ensures that only breakfast, lunch, dinner, or snack is allowed
* as the sleep type
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddSleepEntryActionTest.java-192:194
/*** Test that the number of hours worked must be a positive number
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddSleepEntryActionTest.java-214:216
/*** Test with an evil factory
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddUAPActionTest.java-1:3
/*** Tests for AddUAPAction
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddUAPActionTest.java-20:22
/*** Sets up defaults
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\AddUAPActionTest.java-31:34
/*** Tests adding a new UAP
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ChronicDiseaseRiskActionTest.java-30:30
//The test for the Chronic Disease mediator will assert the rest of these

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DeclareHCPActionTest.java-58:58
// Assert the transaction

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DeclareHCPActionTest.java-67:67
// Assert the transaction

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DeleteExerciseEntryActionTest.java-19:23
/*** Tests that a user can add and delete entries in his
* exercise diary. Entries are known by their id.
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DeleteExerciseEntryActionTest.java-49:51
/*** Clears all of the tables.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DeleteExerciseEntryActionTest.java-56:60
/*** Tests that an appropriate message is displayed if a user
* tries to delete from an empty diary (it will be the same
* as trying to delete with the wrong id)
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DeleteExerciseEntryActionTest.java-75:77
/*** Tests that a user can delete a exercise entry he just added.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DeleteExerciseEntryActionTest.java-95:97
/*** Tests that a user cannot delete a exercise entry from another user.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DeleteExerciseEntryActionTest.java-118:120
/*** Tests deleting from an evil database.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DeleteFoodEntryActionTest.java-20:24
/*** Tests that a user can add and delete entries in his
* food diary. Entries are known by their id.
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DeleteFoodEntryActionTest.java-39:39
//gen.uc68(); //uc68 is now a part of standardData

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DeleteFoodEntryActionTest.java-55:57
/*** Clears all of the tables.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DeleteFoodEntryActionTest.java-62:66
/*** Tests that an appropriate message is displayed if a user
* tries to delete from an empty diary (it will be the same
* as trying to delete with the wrong id)
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DeleteFoodEntryActionTest.java-81:83
/*** Tests that a user can delete a food entry he just added.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DeleteFoodEntryActionTest.java-103:105
/*** Tests that a user cannot delete a food entry from another user.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DeleteFoodEntryActionTest.java-121:123
/*** Tests deleting from an evil database.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DeleteSleepEntryActionTest.java-19:23
/*** Tests that a user can add and delete entries in his
* sleep diary. Entries are known by their id.
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DeleteSleepEntryActionTest.java-45:47
/*** Clears all of the tables.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DeleteSleepEntryActionTest.java-52:56
/*** Tests that an appropriate message is displayed if a user
* tries to delete from an empty diary (it will be the same
* as trying to delete with the wrong id)
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DeleteSleepEntryActionTest.java-71:73
/*** Tests that a user can delete a sleep entry he just added.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DeleteSleepEntryActionTest.java-91:93
/*** Tests that a user cannot delete a sleep entry from another user.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DeleteSleepEntryActionTest.java-114:116
/*** Tests deleting from an evil database.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DesignateNutritionistActionTest.java-33:36
/*** Patient Derek Morgan has Spencer Reid
* as his designated nutritionist and no entries in food table
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DesignateNutritionistActionTest.java-38:38
//spencer reid viewaction to make sure she can view it now

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DesignateNutritionistActionTest.java-53:53
//now has no nutritionist, so reid should not be able to view it

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DesignateNutritionistActionTest.java-62:65
/*** Derek Morgan has Spencer Reid as nutritionist
* and chooses to make her his nutritionist
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DesignateNutritionistActionTest.java-67:67
//spencer reid viewaction to make sure she can view it now

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DesignateNutritionistActionTest.java-82:82
//should still be able to view diary

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DesignateNutritionistActionTest.java-90:93
/*** login as a patient without a designated nutritionist,
* and add one
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DesignateNutritionistActionTest.java-95:95
//spencer reid viewaction to make sure she can view it now

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DesignateNutritionistActionTest.java-119:121
/*** Try to add as a nutritionist a non HCP
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DesignateNutritionistActionTest.java-132:134
/*** Try to add as nutritionist an hcp that isn't a nutritionist
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DesignateNutritionistActionTest.java-145:147
/*** Test that it returns the right number of nutritionist specialists.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DesignateNutritionistActionTest.java-153:153
//first one

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DesignateNutritionistActionTest.java-156:156
//second one

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DesignateNutritionistActionTest.java-159:159
//third one

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DesignateNutritionistActionTest.java-167:169
/*** Test switching to a new nutritionist
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DesignateNutritionistActionTest.java-171:171
//spencer reid viewaction to make sure she can view it now

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DesignateNutritionistActionTest.java-190:190
//change nutritionist to ben matlock

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DesignateNutritionistActionTest.java-196:196
//now make sure matlock can see

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DesignateNutritionistActionTest.java-211:213
/*** Test with an evil factory
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DesignateNutritionistActionTest.java-226:228
/*** Test with an evil factory
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DesignateNutritionistActionTest.java-241:243
/*** Test with an evil factory
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DrugInteractionActionTest.java-39:42
/*** testDeleteInteraction
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DrugInteractionActionTest.java-49:52
/*** testGetInteractions
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DrugInteractionActionTest.java-63:66
/*** testGetInteractions2
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DrugInteractionActionTest.java-83:86
/*** testReportSameDrugsInteraction
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DrugInteractionActionTest.java-93:96
/*** testReportAlreadyAdded
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\DrugInteractionActionTest.java-109:112
/*** testEvilDAOFactory
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditApptActionTest.java-76:76
//success!

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditApptActionTest.java-83:83
//success!

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditApptActionTest.java-87:90
/*** testGetName
* @throws ITrustException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditApptActionTest.java-96:101
/*** testEditAppt
* @throws DBException
* @throws SQLException
* @throws FormValidationException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditApptActionTest.java-140:143
/*** testEditApptConflict
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditApptActionTest.java-166:171
/*** testEvilFactory
* @throws DBException
* @throws SQLException
* @throws FormValidationException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditApptActionTest.java-180:180
//this should pass if DBexception is thrown

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditApptActionTest.java-187:187
//this should pass if DBexception is thrown

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditApptActionTest.java-192:192
//this should pass if DBexception is thrown

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditApptTypeTest.java-73:73
//Exception is good.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditDiagnosesActionTest.java-34:34
// An EditDiagnosesAction without an ovID returns an empty list.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditDiagnosesActionTest.java-72:72
// It can also be retrieved for an undefined office visit

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditExerciseEntryActionTest.java-19:22
/*** Tests different abilities for editing a exercise entry.
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditExerciseEntryActionTest.java-48:50
/*** Clears all of the tables.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditExerciseEntryActionTest.java-55:58
/*** Tests that nothing happens when a user tries to udpate
* a nonexistent exercise entry. Random Person (1) has no entries.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditExerciseEntryActionTest.java-73:75
/*** Tests that a user can edit their own exercise entries.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditExerciseEntryActionTest.java-102:104
/*** Tests that users cannot edit other people exercise entries
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditExerciseEntryActionTest.java-130:132
/*** Test that you can add an entry and then turn around and edit it.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditExerciseEntryActionTest.java-171:174
/*** Tests that the information included still has to be correct and pass
* the same validation as adding a new one
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditExerciseEntryActionTest.java-197:199
/*** Test with an evil factory
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditFoodEntryActionTest.java-19:22
/*** Tests different abilites for editing a food entry.
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditFoodEntryActionTest.java-37:37
//gen.uc68(); //uc68 is now a part of standardData

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditFoodEntryActionTest.java-53:55
/*** Clears all of the tables.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditFoodEntryActionTest.java-60:63
/*** Tests that nothing happens when a user tries to udpate
* a nonexistent food entry. Derek Morgan (333) has no entries.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditFoodEntryActionTest.java-78:80
/*** Tests that a user can edit his own food entries.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditFoodEntryActionTest.java-104:106
/*** Tests that users cannot edit other people food entries
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditFoodEntryActionTest.java-129:131
/*** Test that you can add an entry and then turn around and edit it.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditFoodEntryActionTest.java-186:189
/*** Tests that the information included still has to be correct and pass
* the same validation as adding a new one
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditFoodEntryActionTest.java-209:211
/*** Test with an evil factory
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditHealthHistoryActionTest.java-79:79
// Note that we don't need to check the returned values here - see the DAO test, AddPHRTest

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditHealthHistoryActionTest.java-132:132
//Correct form data

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditImmunizationsActionTest.java-34:34
// An EditImmunizationsAction without an ovID returns an empty list.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditImmunizationsActionTest.java-75:75
// It can also be retrieved for an undefined office visit

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditLabProceduresActionTest.java-15:17
/*** EditLabProceduresActionTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditLabProceduresActionTest.java-31:34
/*** testGetLabProcedures
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditLabProceduresActionTest.java-44:44
// An EditLabProceduresAction without an ovID returns an empty list.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditLabProceduresActionTest.java-49:52
/*** testGetLabProcedure
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditLabProceduresActionTest.java-60:63
/*** testAddLabProcedure
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditLabProceduresActionTest.java-76:79
/*** testEditLabProcedure
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditLabProceduresActionTest.java-94:97
/*** testDeleteLabProcedure
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditLabProceduresActionTest.java-105:108
/*** testGetLabProcedureCodes
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditLabProceduresActionTest.java-114:114
// It can also be retrieved for an undefined office visit

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditLabProceduresActionTest.java-120:123
/*** testAutoAssignLabTech
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditLabProceduresActionTest.java-125:125
//setup: assign lab procs to techs

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditLabProceduresActionTest.java-126:126
//the lab tech with the least amount of work should get the assignment

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditLabProceduresActionTest.java-129:132
/*** testGetLabTechs
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditLabProceduresActionTest.java-146:149
/*** testGetLabTechName
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditLabProceduresActionTest.java-156:159
/*** testGetLabTechQueueSize
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditLabProceduresActionTest.java-168:171
/*** testGetLabTechQueueSizeByPriority
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditOfficeVisitActionTest.java-19:21
/*** Test all office visit by doctors
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditOfficeVisitActionTest.java-44:46
/*** testOVID
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditOfficeVisitActionTest.java-56:58
/*** testEvilDatabase
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditOfficeVisitActionTest.java-72:74
/*** testOVDoesntExist
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditOfficeVisitActionTest.java-83:86
/** Test Hospital location*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditOfficeVisitActionTest.java-88:88
// NOTE: may have to fix this... use different pid and ovid.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditOfficeVisitActionTest.java-92:92
// First comes hospitals associated with the HCP in alphabetical order.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditOfficeVisitActionTest.java-93:93
// Then comes all other hospitals in alphabetical order.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditOfficeVisitActionTest.java-103:106
/*** Test patient office visit
* @throws ITrustException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditOfficeVisitActionTest.java-118:118
//UC60

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditOfficeVisitActionTest.java-123:125
/*** testUpdateInformationEmptyForm
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditOfficeVisitActionTest.java-132:132
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditOfficeVisitActionTest.java-136:139
/*** Test if patient information is updated
* @throws FormValidationException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditOfficeVisitActionTest.java-147:147
//UC60

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditOfficeVisitActionTest.java-156:159
/*** testUpdateInformationSemicolon
* @throws FormValidationException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditOfficeVisitActionTest.java-169:172
/*** testUpdateInformationOctothorpe
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditOfficeVisitActionTest.java-187:190
/*** testUpdateInformationNewOfficeVisit
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditOfficeVisitActionTest.java-211:214
/*** testMakeEmailApp
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditOPDiagnosesTest.java-27:27
//Test actions related to getting Diagnoses

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditOPDiagnosesTest.java-36:36
// An EditDiagnosesAction without an ovID returns an empty list.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditOPDiagnosesTest.java-41:41
//test adding various sorts of diagnosis.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditOPDiagnosesTest.java-85:85
// It can also be retrieved for an undefined office visit

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPatientActionTest.java-85:85
//test passes, exception should have been thrown

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPatientActionTest.java-93:93
//test passes, exception should have been thrown

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPatientActionTest.java-135:135
//Check that patient 2 is not a dependent

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPatientActionTest.java-138:138
//Change patient 2's dependency status

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPatientActionTest.java-142:142
//Check that patient 2 is a dependent

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPatientActionTest.java-147:147
//2 represents 1, but not 4

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPatientActionTest.java-150:150
//Add patient 4 to be represented by patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPatientActionTest.java-154:154
//Ensure the representatives were added correctly

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPatientActionTest.java-157:157
//Make patient 2 a dependent

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPatientActionTest.java-160:160
//Assert that no more patients are represented by patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPatientActionTest.java-163:163
//Check patient 2's dependency status

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPatientActionTest.java-167:167
//Make patient 2 not a dependent

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPatientActionTest.java-170:170
//Check that patient 2 is not a dependent

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPatientInstructionsActionTest.java-30:30
// Without an Office visit ID, this should return an empty list.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPatientInstructionsActionTest.java-35:38
/*** testAddPatientInstructions
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPatientInstructionsActionTest.java-40:40
// Without an Office visit ID, this should throw.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPatientInstructionsActionTest.java-49:49
// Try adding patient specific instructions.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPatientInstructionsActionTest.java-62:65
/*** testEditPatientInstructions
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPatientInstructionsActionTest.java-67:67
// Without an Office visit ID, this should throw.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPatientInstructionsActionTest.java-76:76
// Try editing patient specific instructions.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPatientInstructionsActionTest.java-87:90
/*** testDeletePatientInstructions
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPatientInstructionsActionTest.java-92:92
// Without an Office visit ID, this should throw.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPatientInstructionsActionTest.java-101:101
// Try deleting patient specific instructions.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPatientInstructionsActionTest.java-110:113
/*** testValidate
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPatientInstructionsActionTest.java-115:115
// Without an Office visit ID, this should throw.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPatientInstructionsActionTest.java-124:124
// Try validating patient specific instructions.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPHRActionTest.java-41:41
// I know it's bad form to have two test in one, but it's so we don't have to redo the database

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPHRActionTest.java-52:52
// Check that the correct call was made - more thorough assertions are in the DAO tests

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPHRActionTestTwo.java-1:3
/***
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPHRActionTestTwo.java-12:16
/***
* This test class test EditPHRAction, specifically adding allergies.
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPHRActionTestTwo.java-31:38
/*** Test method for {@link edu.ncsu.csc.itrust.action.EditPHRAction#updateAllergies(long, java.lang.String)}.
*
*
* This method tests that a warning is shown for a future prescription.
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPHRActionTestTwo.java-41:41
//result = actionPHR.updateAllergies(100L, "483012382"); //Adds M-minene

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPHRActionTestTwo.java-46:53
/*** Test method for {@link edu.ncsu.csc.itrust.action.EditPHRAction#updateAllergies(long, java.lang.String)}.
*
*
* This method tests that no warning is shown.
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPHRActionTestTwo.java-56:56
//result = actionPHR.updateAllergies(100L, "483013420"); //Adds M-maxene

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPHRActionTestTwo.java-61:67
/*** Test method for {@link edu.ncsu.csc.itrust.action.EditPHRAction#updateAllergies(long, java.lang.String)}.
*
* This method tests that a warning is shown when adding a duplicate allergy.
*
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPHRActionTestTwo.java-70:70
//actionPHR.updateAllergies(100L, "483013420"); //Adds M-maxene

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPHRActionTestTwo.java-71:71
//result = actionPHR.updateAllergies(100L, "483013420"); //Adds M-maxene again

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPrescriptionsActionTest.java-17:20
/*** Test Prescription actions
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPrescriptionsActionTest.java-34:37
/*** Test edit prescription
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPrescriptionsActionTest.java-48:51
/*** Test getPrescription
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPrescriptionsActionTest.java-63:63
// An EditPrescriptionAction without an ovID returns an empty list.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPrescriptionsActionTest.java-68:71
/*** Test if prescription have been added for scenario 1
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPrescriptionsActionTest.java-90:93
/*** Test prescription for scenario 2
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPrescriptionsActionTest.java-113:116
/*** Test add prescription for scenario 3
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPrescriptionsActionTest.java-134:137
/*** Test add prescription for scenario 4
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPrescriptionsActionTest.java-187:190
/*** Test if prescription has been deleted
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPrescriptionsActionTest.java-205:208
/*** Test Medication
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPrescriptionsActionTest.java-214:214
// It can also be retrieved for an undefined office visit

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPrescriptionsActionTest.java-220:223
/*** testFormToBean
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPrescriptionsActionTest.java-242:245
/*** testAddPrescription_Allergy
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPrescriptionsActionTest.java-272:275
/*** testAddPrescription_AllergyOverride
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPrescriptionsActionTest.java-302:305
/*** testAddPrescription_AllergyFuture
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPrescriptionsActionTest.java-330:333
/*** testAddPrescription_Intercation
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPrescriptionsActionTest.java-343:343
//Nexium, which interacts with aspirin

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditPrescriptionsActionTest.java-355:355
//aspirin, which interacts with nexium

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditProceduresActionTest.java-12:18
/*** Test procedure actions
* testAddProcedure
* test Edit Procedure
* test delete Procedure
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditProceduresActionTest.java-41:41
// An EditPrescriptionAction without an ovID returns an empty list.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditProceduresActionTest.java-46:49
/*** testAddProcedure
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditProceduresActionTest.java-60:63
/*** testEditProcedure
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditProceduresActionTest.java-76:79
/*** testDeleteProcedure
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditProceduresActionTest.java-87:90
/*** testGetProcedureCodes
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditProceduresActionTest.java-96:96
// It can also be retrieved for an undefined office visit

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditReferralsActionTest.java-29:29
// An EditPrescriptionAction without an ovID returns an empty list.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditRepresentativesActionTest.java-96:98
/*** Tests that non patients cannot add representatives
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditSingleReferralActionTest.java-29:29
// helper method

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditSingleReferralActionTest.java-41:41
// When adding a referral, it should appear in the database, and

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditSingleReferralActionTest.java-42:42
// messages should be sent to the associated users.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditSingleReferralActionTest.java-49:49
// Ensure no referral messages exist for any user.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditSingleReferralActionTest.java-57:57
// construct the referral

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditSingleReferralActionTest.java-66:66
// send the referral

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditSingleReferralActionTest.java-69:69
// get stored referral

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditSingleReferralActionTest.java-80:80
// check the contents of the bean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditSingleReferralActionTest.java-85:85
// check that messages were sent

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditSingleReferralActionTest.java-97:97
// get existing referral and edit it

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditSingleReferralActionTest.java-101:101
// save modified referral

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditSingleReferralActionTest.java-103:103
// retrieve referral and see that it has been modified

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditSingleReferralActionTest.java-114:114
// get existing referral

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditSingleReferralActionTest.java-117:117
// delete referral

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditSingleReferralActionTest.java-119:119
// trying to retrieve deleted referral should return null

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditSingleReferralActionTest.java-122:122
// part 2: check that messages were sent

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditSleepEntryActionTest.java-19:22
/*** Tests different abilities for editing a sleep entry.
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditSleepEntryActionTest.java-44:46
/*** Clears all of the tables.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditSleepEntryActionTest.java-51:54
/*** Tests that nothing happens when a user tries to udpate
* a nonexistent sleep entry. Random Person (1) has no entries.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditSleepEntryActionTest.java-69:71
/*** Tests that a user can edit their own sleep entries.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditSleepEntryActionTest.java-98:100
/*** Tests that users cannot edit other people sleep entries
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditSleepEntryActionTest.java-126:128
/*** Test that you can add an entry and then turn around and edit it.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditSleepEntryActionTest.java-161:164
/*** Tests that the information included still has to be correct and pass
* the same validation as adding a new one
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\EditSleepEntryActionTest.java-187:189
/*** Test with an evil factory
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\FindExpertActionTest.java-32:35
/*** Tests that you can find all of the experts you should
* be able to
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\FindExpertActionTest.java-48:48
//Test a single result

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\FindExpertActionTest.java-53:53
//tests compares two PersonnelBeans from the CustomComparator class using the compare method

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\FindExpertActionTest.java-59:61
/*** Tests that you can filter out the hospitals
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\FindExpertActionTest.java-86:88
/*** Tests that you can find hospitals by their specialty
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GenerateCalendarActionTest.java-74:77
/*** testGetConflicts
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GenerateCalendarActionTest.java-135:138
/*** testGetOfficeVisitsTable
* @throws ITrustException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GenerateCalendarActionTest.java-148:151
/*** testGetLabProceduresTable
* @throws ITrustException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-17:19
/*** GetVisitRemindersActionTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-30:33
/*** testNormalReturn
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-35:35
//Test that no exceptions are thrown on method call

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-36:36
//check valid data returns

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-38:38
//Login as kelly doctor

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-45:48
/*** testGetVisitReminders_AlivePatients
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-59:62
/*** testGetVisitReminders_DeadPatients
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-73:76
/*** testGetVisitReminders_Diagnosed_OldAndRecentVisit
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-82:82
//Patient had a visit over a year ago. Make sure that he isn't given a reminder for this year

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-83:83
//since he also had a visit 3 months ago.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-87:90
/*** testGetVisitReminders_CorrectDateOfRecentVisit
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-112:115
/*** testNoSubAction
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-117:117
//Test that standardData creates an initial 3 visit reminders

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-119:119
//Login as kelly doctor

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-122:122
//Returns reminders for NoRecords Has, Bad Horse, Care Needs, and Random Person

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-126:129
/*** testGetReminderType
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-131:131
//Test that Enum->String translation works properly

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-133:133
//Login as kelly doctor

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-140:143
/*** testBadReminderType
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-145:145
//Test that a null ReminderType is not allowed

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-146:146
//Check other failure inputs

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-148:148
//Login as kelly doctor

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-158:161
/*** testTestHPV
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-163:163
//add boundary tests

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-165:165
//Login as kelly doctor

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-180:183
/*** testTestHepA
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-185:185
//add boundary tests

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-187:187
//Login as kelly doctor

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-196:199
/*** testTestVaricella
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-201:201
//add boundary tests

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-203:203
//Login as kelly doctor

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-212:215
/*** testTestMeasles
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-217:217
//add boundary tests

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-219:219
//Login as kelly doctor

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-228:231
/*** testTestPolio
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-233:233
//add boundary tests

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-235:235
//Login as kelly doctor

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-247:250
/*** testTestPneumo
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-252:252
//add boundary tests

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-254:254
//Login as kelly doctor

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-268:271
/*** testTestHaemoFlu
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-273:273
//add boundary tests

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-275:275
//Login as kelly doctor

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-287:290
/*** testTestDipTet
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-292:292
//add boundary tests

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-294:294
//Login as kelly doctor

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-314:317
/*** testTestRotaVirus
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-319:319
//add boundary tests

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-321:321
//Login as kelly doctor

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-333:336
/*** testTestHepB
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-338:338
//add boundary tests

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GetVisitRemindersActionTest.java-340:340
//Login as kelly doctor

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GroupReportGeneratorActionTest.java-30:32
/*** testGenerateReport
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\GroupReportGeneratorActionTest.java-53:55
/*** testParseFilters
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\LabelActionTest.java-18:20
/*** Tests adding sleep entries to the sleep diary
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\LabelActionTest.java-41:43
/*** Clears all of the tables.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\LabelActionTest.java-48:52
/*** Tests that a patient can add a new label.
* Log in as the patient Random Person who has no prior labels.
* @throws FormValidationException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\LabelActionTest.java-72:76
/*** Tests that a patient can add a new label.
* Log in as the patient Random Person who has no prior labels.
* @throws FormValidationException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\LabelActionTest.java-102:106
/*** Tests that a patient can add a new label.
* Log in as the patient Random Person who has no prior labels.
* @throws FormValidationException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\LabelActionTest.java-127:130
/*** Tests that a patient can add a new label.
* Log in as the patient Random Person who has no prior labels.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\LabelActionTest.java-142:145
/*** Tests that a patient can add a new label.
* Log in as the patient Random Person who has no prior labels.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\LabelActionTest.java-157:161
/*** Tests that a patient can add a new label.
* Log in as the patient Random Person who has no prior labels.
* @throws FormValidationException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\LabelActionTest.java-170:174
/*** Tests that a patient can add a new label.
* Log in as the patient Random Person who has no prior labels.
* @throws FormValidationException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\LabelActionTest.java-185:188
/*** Tests that a patient can add a new label.
* Log in as the patient Random Person who has no prior labels.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\LabProcLTActionTest.java-153:156
/*** testSubmiteResults
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\LabProcLTActionTest.java-182:185
/*** testSubmitReceived
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\LabProcLTActionTest.java-206:209
/*** testSetToTesting
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\LabProcLTActionTest.java-230:233
/*** testGetLabProc
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\LabProcLTActionTest.java-257:260
/*** testSubmiteResultsWronIDNumberFormat
* @throws FormValidationException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\LabProcLTActionTest.java-267:270
/*** testSudmitReceivedWrongIDNubmerFormat
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\LabProcLTActionTest.java-277:280
/*** testSubmitResultsEvilFactory
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-16:18
/*** ManageHospitalAssignmentsActionTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-52:55
/*** testAssignHCPToHospital
* @throws ITrustException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-63:65
/*** testAssignHCPToHospitalEvil
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-77:80
/*** testAssignDuplicate
* @throws ITrustException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-91:94
/*** testRemovePersonnelAssignmentToHospital
* @throws ITrustException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-101:104
/*** testRemoveNonAssigned
* @throws ITrustException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-109:113
/*** testRemoveAll
* @throws ITrustException
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-123:125
/*** testRemoveAllEvil
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-132:132
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-137:140
/*** testRemoveAllUnassigned
* @throws ITrustException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-145:147
/*** testCheckHCPIDBadMID
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-153:153
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-157:160
/*** testCheckHCPID
* @throws ITrustException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-165:167
/*** testCheckHCPIDStringMID
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-173:173
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-177:179
/*** testCheckHCPIDEvil
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-186:186
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-190:193
/*** testGetAvailableHospitals
* @throws ITrustException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-198:200
/*** testGetAvailableHospitalsBadMID
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-206:206
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-210:212
/*** testGetAssignedHospitalsBadMID
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-218:218
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-222:224
/*** testAssignHCPToHospitalBadID
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-230:230
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-234:236
/*** testRemoveHCPtoHospitalBADID
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-242:242
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-246:248
/*** testRemoveHCPAssignmentsBadID
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-254:254
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-258:264
/*** New Method to check and make sure LTs only have 1 hospital
*
* @throws ITrustException
* @throws IOException
* @throws SQLException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-273:276
/*** This method checks to make sure checkLTHospital method can correctly handle
* and illegal MID.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ManageHospitalAssignmentsActionTest.java-282:282
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\MyDiagnosisActionTest.java-35:35
// further testing should be done in the patientDAO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\PatientRoomAssignmentActionTest.java-12:13
/***/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\PatientRoomAssignmentActionTest.java-28:31
/*** testassignPatient
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\PrescriptionReportActionTest.java-95:95
// use the office visit DAO test to verify that all of the correct info is taken

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ReportAdverseEventActionTest.java-19:21
/*** ReportAdverseEventActionTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ReportAdverseEventActionTest.java-47:51
/*** testSendOneMail
* @throws ITrustException
* @throws FormValidationException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ReportAdverseEventActionTest.java-63:67
/*** testSendTwoMailh
* @throws ITrustException
* @throws FormValidationException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ReportAdverseEventActionTest.java-89:93
/*** testEmailAvalanche
* @throws ITrustException
* @throws FormValidationException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ReportAdverseEventActionTest.java-113:115
/*** testBadEvent
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ReportAdverseEventActionTest.java-133:138
/*** testWorseEvent
* @throws ITrustException
* @throws FormValidationException
* @throws SQLException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ReportAdverseEventActionTest.java-151:155
/*** testAddReport
* @throws ITrustException
* @throws SQLException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ReportAdverseEventActionTest.java-166:166
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\RequestRecordsReleaseActionTest.java-35:35
//Try running the test with a non existent patient

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\RequestRecordsReleaseActionTest.java-41:41
//Insert a good request

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\RequestRecordsReleaseActionTest.java-54:54
//Insert a bad request form without a digital signature

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\RequestRecordsReleaseActionTest.java-67:67
//Insert a bad request form that has not been filled

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\RequestRecordsReleaseActionTest.java-78:78
//Insert a bad request form completely unfilled except for the digital signature

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\RequestRecordsReleaseActionTest.java-91:91
//Get the initial amount of release requests for the patient

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\RequestRecordsReleaseActionTest.java-106:106
//Insert 1 record first

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\RequestRecordsReleaseActionTest.java-108:108
//Get new list of release requests and check that the size has incremented by 1

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\RequestRecordsReleaseActionTest.java-112:112
//Insert another record

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\RequestRecordsReleaseActionTest.java-114:114
//Get new list of release requests and check that the size has incremented by 1

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\RequestRecordsReleaseActionTest.java-122:122
//Attempt to insert a good request form

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\RequestRecordsReleaseActionTest.java-135:135
//Attempt to get the patient's records release requests

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\RequestRecordsReleaseActionTest.java-138:138
//Attempt to get the patient's name

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\RequestRecordsReleaseActionTest.java-141:141
//Attempt to get a hospital's name

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\RequestRecordsReleaseActionTest.java-144:144
//Attempt to get all patient hospitals

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\RequestRecordsReleaseActionTest.java-147:147
//Attempt to get the patient's list of represented patients

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\RequestRecordsReleaseActionTest.java-155:155
//Get hospital name for hospital id 1

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\RequestRecordsReleaseActionTest.java-158:158
//Fail if there is a DBException

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\RequestRecordsReleaseActionTest.java-161:161
//Test that the name the action method gets is the same

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\RequestRecordsReleaseActionTest.java-164:164
//Clear the db tables

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\RequestRecordsReleaseActionTest.java-168:168
//Fail if there is an exception

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\RequestRecordsReleaseActionTest.java-172:172
//Test that a blank string is returned if there is no hospital with the given id

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ReviewsActionTest.java-19:21
/*** Verify the effectiveness of the ReviewsAction class.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ReviewsActionTest.java-23:23
/** constant id's for testing */

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ReviewsActionTest.java-32:35
/*** Set up for the rest of the tests
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ReviewsActionTest.java-62:64
/*** Tests that when a ReviewsBean is added it truly is valid.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ReviewsActionTest.java-74:76
/*** Test to make sure that you are able to get a correct ReviewsBean.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ReviewsActionTest.java-79:79
//check to make sure that the list size is the same

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ReviewsActionTest.java-88:90
/*** Test to make sure that you are able to get a correct Rating for average rating.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ReviewsActionTest.java-100:102
/*** Test to ensure you can get a physician
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ReviewsActionTest.java-116:118
/*** Tests that a patient can rate his physician
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\SearchUsersActionTest.java-15:17
/*** SearchUsersActionTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\SearchUsersActionTest.java-29:31
/*** testSearchForPatienstWithName
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\SearchUsersActionTest.java-38:40
/*** testSearchForPatietnsWithName2
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\SearchUsersActionTest.java-47:49
/*** testSearchForPatientsWithName3
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\SearchUsersActionTest.java-56:58
/*** testFuzzySearchForPatient1
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\SearchUsersActionTest.java-65:67
/*** testFuzzySearchForPatient2
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\SearchUsersActionTest.java-74:76
/*** testFuzzySearchForPatient3
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\SearchUsersActionTest.java-89:91
/*** testFuzzySearchForPatientDeactivatedOverride
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\SearchUsersActionTest.java-98:100
/*** testSearchForPersonnelWithName
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\SearchUsersActionTest.java-107:109
/*** testSearchForPersonnelWithName2
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\SearchUsersActionTest.java-116:118
/*** testSearchForPersonnelWithName3
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\SearchUsersActionTest.java-131:134
/*** testZeroPatients
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\SearchUsersActionTest.java-152:154
/*** testFuzzySearchForExpert
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateHospitalListActionTest.java-11:13
/*** UpdateHospitalListActionTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateHospitalListActionTest.java-32:34
/*** KILLS-- M FAIL: edu.ncsu.csc.itrust.action.UpdateHospitalListAction:35: changed return value (areturn)
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateHospitalListActionTest.java-44:44
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateHospitalListActionTest.java-48:50
/*** KILLS-- M FAIL: edu.ncsu.csc.itrust.action.UpdateHospitalListAction:49: changed return value (areturn)
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateHospitalListActionTest.java-60:60
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateHospitalListActionTest.java-71:74
/*** testAddHospital
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateHospitalListActionTest.java-84:87
/*** Kills: M FAIL: edu.ncsu.csc.itrust.action.UpdateHospitalListAction:27: CP[64] "added hospital " ->
* "___jumble___" M FAIL: edu.ncsu.csc.itrust.action.UpdateHospitalListAction:27: 0L -> 1L
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateHospitalListActionTest.java-97:100
/*** testAddDuplicate
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateHospitalListActionTest.java-112:115
/*** testUpdatreICDInformation
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateHospitalListActionTest.java-127:130
/*** testUpdateNonExistent
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateHospitalListActionTest.java-139:142
/*** testAddAddress
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateHospitalListActionTest.java-154:157
/*** testUpdateAddress
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateICDCodeListActionTest.java-11:13
/*** UpdateICDCodeListActionTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateICDCodeListActionTest.java-28:30
/*** testEvilFactory
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateICDCodeListActionTest.java-40:40
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateICDCodeListActionTest.java-48:48
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateICDCodeListActionTest.java-56:59
/*** testAddICDCode
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateICDCodeListActionTest.java-71:74
/*** testAddICDCodeURL
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateICDCodeListActionTest.java-87:90
/*** testAddDuplicate
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateICDCodeListActionTest.java-103:106
/*** testUpdateICDInformation0
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateICDCodeListActionTest.java-120:123
/*** testUpdateNonExistent
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateICDCodeListActionTest.java-132:135
/*** testUpdateNonExistentAllCodes
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateICDCodeListActionTest.java-145:148
/*** testDiagnosisBeanStringConstructor
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateLabProcListActionTest.java-17:19
/*** UpdateLabProcListActionTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateLabProcListActionTest.java-39:42
/*** testEvilFactory
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateLabProcListActionTest.java-68:71
/*** testAddICDCode
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateLabProcListActionTest.java-87:90
/*** testAddDuplicate
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateLabProcListActionTest.java-113:116
/*** testUpdateICDInformation0
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateLabProcListActionTest.java-132:135
/*** testUpdateNonExistent
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateLabProcListActionTest.java-148:151
/*** testParseLOINCFile
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateLabProcListActionTest.java-170:173
/*** testParseLOINCFile2
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateLabProcListActionTest.java-188:191
/*** testParseLOINCFileIgnore
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateLabProcListActionTest.java-208:211
/*** testParseLOINCFileReplace
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateLabProcListActionTest.java-228:231
/*** testParseBadLOINCFile
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateLabProcListActionTest.java-242:245
/*** testParseInvalidLOINCFile
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateLabProcListActionTest.java-256:259
/*** testParseInvalidLOINCFile2
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateNDCodeListActionTest.java-13:15
/*** UpdateNDCodeListActionTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateNDCodeListActionTest.java-34:36
/*** testEvilFactory
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateNDCodeListActionTest.java-47:47
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateNDCodeListActionTest.java-55:55
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateNDCodeListActionTest.java-63:63
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateNDCodeListActionTest.java-74:77
/*** testAddNDCode
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateNDCodeListActionTest.java-87:91
/*** testAddDuplicate
* @throws DBException
* @throws FormValidationException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateNDCodeListActionTest.java-103:106
/*** testUpdateNDInformation0
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateNDCodeListActionTest.java-118:121
/*** testUpdateNonExistent
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateNDCodeListActionTest.java-130:133
/*** testRemoveNDCode
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateNDCodeListActionTest.java-146:149
/*** testRemoveNonExistent
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateORCListActionTest.java-14:16
/*** UpdateORCListActionTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateORCListActionTest.java-35:37
/*** testEvilFacotry
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateORCListActionTest.java-48:48
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateORCListActionTest.java-56:56
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateORCListActionTest.java-68:71
/*** testAddORCode
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateORCListActionTest.java-77:77
/* DO NOT REMOVE! This must be stored in a variable. DO NO QUESTION THE JAVA! */

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateORCListActionTest.java-85:89
/*** testAddDuplicate
* @throws DBException
* @throws FormValidationException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateORCListActionTest.java-106:109
/*** testUpdateNDInformation0
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateORCListActionTest.java-122:125
/*** testUpdateNonExistent
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateReasonCodeListActionTest.java-13:15
/*** UpdateReasonCodeListActionTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateReasonCodeListActionTest.java-34:36
/*** testEvilFactory
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateReasonCodeListActionTest.java-47:47
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateReasonCodeListActionTest.java-55:55
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateReasonCodeListActionTest.java-66:69
/*** testAddNDCode
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateReasonCodeListActionTest.java-79:83
/*** testAddDuplicate
* @throws DBException
* @throws FormValidationException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateReasonCodeListActionTest.java-95:98
/*** testUpdateNDInformation0
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UpdateReasonCodeListActionTest.java-110:113
/*** testUpdateNonExistent
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UploadReferenceTablesActionTest.java-20:22
/*** UploadReferenceTablesActionTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UploadReferenceTablesActionTest.java-34:36
/*** setUp
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UploadReferenceTablesActionTest.java-47:50
/*** testStoreWeightStats
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UploadReferenceTablesActionTest.java-57:57
//If an exception is thrown fail the test

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UploadReferenceTablesActionTest.java-61:61
//Store the weight

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UploadReferenceTablesActionTest.java-64:64
//Check that the stats actually stored

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UploadReferenceTablesActionTest.java-73:76
/*** testStoreHeightStats
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UploadReferenceTablesActionTest.java-83:83
//If an exception is thrown fail the test

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UploadReferenceTablesActionTest.java-87:87
//Store the height

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UploadReferenceTablesActionTest.java-90:90
//Check that the stats actually stored

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UploadReferenceTablesActionTest.java-99:102
/*** testStoreHeadCircStats
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UploadReferenceTablesActionTest.java-109:109
//If an exception is thrown fail the test

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UploadReferenceTablesActionTest.java-113:113
//Store the head circumference

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UploadReferenceTablesActionTest.java-116:116
//Check that the stats actually stored

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UploadReferenceTablesActionTest.java-125:128
/*** testStoreBMIStats
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UploadReferenceTablesActionTest.java-135:135
//If an exception is thrown fail the test

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UploadReferenceTablesActionTest.java-139:139
//Store the bmi

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UploadReferenceTablesActionTest.java-142:142
//Check that the stats actually stored

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UploadReferenceTablesActionTest.java-151:153
/*** testEvilFactory
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UploadReferenceTablesActionTest.java-161:161
//If an exception is thrown fail the test

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\UploadReferenceTablesActionTest.java-165:165
//Attempt to store the bmi

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewAdverseEventActionTest.java-12:14
/*** ViewAdverseEventActionTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewAdverseEventActionTest.java-29:32
/*** testGetAdverseEvent
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewAdverseEventActionTest.java-38:41
/*** testGetUnremovedAdverseEventsByCode
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewAdverseEventActionTest.java-51:54
/*** testGetNameForCode
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewDiagnosisStatisticsActionTest.java-108:108
//This should be thrown

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewExerciseEntryActionTest.java-18:21
/*** Tests for viewing a patient's exercise diary
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewExerciseEntryActionTest.java-28:31
/*** Clears all of the tables, gets the standard data,
* and includes the data for use cases 68 and 69
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewExerciseEntryActionTest.java-39:41
/*** Clears all of the tables
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewExerciseEntryActionTest.java-46:51
/*** Log in as the HCP Duyu Ivanlyft who does have the specialty of
* trainer, so she should be able to view exercise entries. View
* the Exercise Entries for Patient Random Person who has some
* exercise entries already in their diary.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewExerciseEntryActionTest.java-60:60
//now that we know we have 2 of them, make sure they are the

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewExerciseEntryActionTest.java-61:61
//right ones

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewExerciseEntryActionTest.java-76:76
//now check the totals

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewExerciseEntryActionTest.java-91:94
/*** Test that HCP's that are not specialists in nutrition are unable to
* view Exercise Diary Entries.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewExerciseEntryActionTest.java-98:98
//log in as Doctor Kelly

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewExerciseEntryActionTest.java-110:112
/*** Test that a patient can view their exercise diary.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewExerciseEntryActionTest.java-121:121
//now that we know we have 2 of them,

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewExerciseEntryActionTest.java-122:122
//make sure they are the right ones

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewExerciseEntryActionTest.java-137:137
//now check the totals

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewExerciseEntryActionTest.java-151:153
/*** Ensures a patient can still view their exercise diary even when it is empty.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewExerciseEntryActionTest.java-165:168
/*** Ensures HCPs with specialty of trainer can still view a exercise diary
* even when the exercise diary is empty.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewExerciseEntryActionTest.java-180:182
/*** Ensure patients can't view the exercise diary of other patients.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewExerciseEntryActionTest.java-195:197
/*** Testing that we can get the diary when we are searching for range of dates
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewExerciseEntryActionTest.java-205:205
//now that we know we have 1 of them, make sure they are the

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewExerciseEntryActionTest.java-206:206
//right ones

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewExerciseEntryActionTest.java-215:215
//now check the totals

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewExerciseEntryActionTest.java-228:230
/*** Test bounded diary with bad dates
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewExerciseEntryActionTest.java-247:249
/*** Test with a bad factory
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewExerciseEntryActionTest.java-262:264
/*** Test with a bad factory
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewExerciseEntryActionTest.java-277:279
/*** Test with a bad factory
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewExerciseEntryActionTest.java-290:292
/*** Test with a bad factory
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewExerciseEntryActionTest.java-303:305
/*** Try to get a bounded exercise diary of other patient.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewExerciseEntryActionTest.java-320:322
/*** Try to get a bounded exercise diary totals of other patient.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewExerciseEntryActionTest.java-337:339
/*** Enter in start date after end date
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewExerciseEntryActionTest.java-356:358
/*** Enter in start date after end date for the totals
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-18:21
/*** Tests for viewing a patient's food diary
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-27:30
/*** Clears all of the tables, gets the standard data,
* and includes the data for use cases 68 and 69
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-38:40
/*** Clears all of the tables
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-45:50
/*** Log in as the HCP Spencer Reid who does have the specialty of
* nutritionist, so she should be able to view food entries. View
* the Food Entries for Patient Jennifer Jareau who has some
* food entries already in her diary.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-59:59
//now that we know we have 2 of them, make sure they are the

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-60:60
//right ones

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-87:87
//now check the totals

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-105:108
/*** Test that HCP's that are not specialists in nutrition are unable to
* view Food Diary Entries.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-112:112
//log in as Doctor Kelly

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-124:126
/*** Test that a patient can view his food diary.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-135:135
//now that we know we have 2 of them,

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-136:136
//make sure they are the right ones

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-163:163
//now check the totals

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-179:181
/*** Ensures a patient can still view his food diary even when it is empty.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-193:196
/*** Ensures HCPs with specialty of nutritionist can still view a food diary
* even when the food diary is empty.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-208:210
/*** Ensure patients can't view the food diary of other patients.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-223:225
/*** Test getting a bounded food diary
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-228:228
//aaron has multiple days

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-246:246
//now get the totals

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-265:267
/*** Test start date after end date
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-284:286
/*** Test start date after end date
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-303:305
/*** Ensure patients can't view the bounded food diary of other patients.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-320:322
/*** Ensure patients can't view the bounded food diary of other patients.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-337:339
/*** Test bounded diary with bad dates
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-356:358
/*** Test bounded diary totals with bad dates
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-375:377
/*** Try to view it as a nutritionist that isn't designated
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-390:392
/*** Try to view it as a nutritionist that isn't designated
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-405:407
/*** Try to view it as a nutritionist that isn't designated
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-422:424
/*** Try to view it as a nutritionist that isn't designated
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-439:441
/*** Test with evil factory
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-454:456
/*** Test with evil factory
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-469:471
/*** Test with evil factory
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewFoodEntryActionTest.java-486:488
/*** Test with evil factory
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-115:115
//Check all values contained in the normal bean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-146:146
//Get the weight associated with the health record and convert into kg

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-148:148
//Get the patient's gender

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-155:155
//Get the patient's age

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-158:158
//If the patient's birthdate equals the office visit date,

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-159:159
//the patient's age is 0 months

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-162:162
//Otherwise add 0.5 to the patient's age in months

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-167:167
//Get the L, M, and S values

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-172:172
//Calculate the z score

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-175:175
//If L is 0 then calculate the z score differently

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-191:191
//Get the height associated with the health record and convert into cm

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-193:193
//Get the patient's gender

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-200:200
//Get the patient's age

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-203:203
//If the patient's birthdate equals the office visit date,

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-204:204
//the patient's age is 0 months

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-207:207
//Otherwise add 0.5 to the patient's age in months

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-212:212
//Get the L, M, and S values

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-217:217
//Calculate the z score

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-220:220
//If L is 0 then calculate the z score differently

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-236:236
//Get the head circumference associated with the health record and convert into cm

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-238:238
//Get the patient's gender

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-245:245
//Get the patient's age

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-248:248
//If the patient's birthdate equals the office visit date,

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-249:249
//the patient's age is 0 months

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-252:252
//Otherwise add 0.5 to the patient's age in months

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-257:257
//Get the L, M, and S values

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-262:262
//Calculate the z score

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-265:265
//If L is 0 then calculate the z score differently

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-281:281
//Get the bmi associated with the health record

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-283:283
//Get the patient's gender

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-290:290
//Get the patient's age

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-293:293
//If the patient's birthdate equals the office visit date,

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-294:294
//the patient's age is 0 months

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-297:297
//Otherwise add 0.5 to the patient's age in months

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-302:302
//Get the L, M, and S values

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-307:307
//Calculate the z score

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewHealthRecordsHistoryActionTest.java-310:310
//If L is 0 then calculate the z score differently

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewImmunizationReportActionTest.java-31:31
//Adam Sandler - all required immunizations plus some

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewImmunizationReportActionTest.java-39:39
//Adam Sandler - kindergarten immunizations

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewImmunizationReportActionTest.java-50:50
//Charlie Chaplin - adult immunizations

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewImmunizationReportActionTest.java-61:61
//Adam Sandler - No immunizations needed

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewImmunizationReportActionTest.java-66:66
//Christina Aguillera - Prior diagnosis

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewImmunizationReportActionTest.java-71:71
//Charlie Chaplin - Age limit

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewImmunizationReportActionTest.java-81:81
//Kelly Doctor (MID 9000000000)

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewImmunizationReportActionTest.java-85:85
//Shelly Vang (MID 8000000001)

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewImmunizationReportActionTest.java-88:88
//Nonexistent HCP (MID 2020202020)

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMacronutrientsActionTest.java-18:21
/*** Tests for viewing a patient's food diary
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMacronutrientsActionTest.java-27:30
/*** Clears all of the tables, gets the standard data,
* and includes the data for use cases 68 and 69
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMacronutrientsActionTest.java-38:40
/*** Clears all of the tables
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyAccessLogActionTest.java-72:72
// note: the actual bounding is not done here, see the DAO test

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyAccessLogActionTest.java-94:97
/*** Verifies that none of the transactions returned in the access log are the patient's DLHCP per use case 8
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyMessagesActionTest.java-19:21
/*** ViewMyMessagesActionTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyMessagesActionTest.java-47:51
/*** testGetAllMyMessages
* @throws SQLException
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyMessagesActionTest.java-57:57
// Should send a message and recheck later.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyMessagesActionTest.java-60:63
/*** testGetPatientName
* @throws ITrustException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyMessagesActionTest.java-68:71
/*** testGetPersonnelName
* @throws ITrustException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyMessagesActionTest.java-76:80
/*** testGetAllMyMessagesTimeAscending
* @throws DBException
* @throws SQLException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyMessagesActionTest.java-90:94
/*** testGetAllMyMessagesNameAscending
* @throws DBException
* @throws SQLException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyMessagesActionTest.java-106:106
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyMessagesActionTest.java-110:114
/*** testGetAllMyMessagesNameDescending
* @throws DBException
* @throws SQLException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyMessagesActionTest.java-126:126
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyMessagesActionTest.java-130:134
/*** testGetAllMySentMessages
* @throws DBException
* @throws SQLException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyMessagesActionTest.java-142:146
/*** testGetAllMyMessagesFromTimeAscending
* @throws DBException
* @throws SQLException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyMessagesActionTest.java-156:160
/*** testGetAllMyMessagesFromNameAscending
* @throws DBException
* @throws SQLException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyMessagesActionTest.java-172:172
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyMessagesActionTest.java-176:180
/*** testGetAllMyMessagesFromNameDescending
* @throws DBException
* @throws SQLException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyMessagesActionTest.java-192:192
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyMessagesActionTest.java-196:201
/*** testUpdateRead
* @throws ITrustException
* @throws SQLException
* @throws FormValidationException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyMessagesActionTest.java-210:214
/*** testAddMessage
* @throws SQLException
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyMessagesActionTest.java-227:232
/*** testFilterMessages
* @throws SQLException
* @throws ITrustException
* @throws ParseException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyMessagesActionTest.java-240:244
/*** testGetUnreadCount
* @throws DBException
* @throws SQLException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyMessagesActionTest.java-250:253
/*** testLinkedToReferral
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyMessagesActionTest.java-258:262
/*** testGetCCdMessages
* @throws DBException
* @throws SQLException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyMessagesActionTest.java-267:270
/*** testThrowsExceptions
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyRecordsActionTest.java-262:262
//Test 9/30/2013. Patient's birthday is 5/01/13

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyRecordsActionTest.java-265:265
//Change test date to a year after the patient's birthdate

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyRemoteMonitoringListActionTest.java-13:15
/*** ViewMyRemoteMonitoringListActionTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyRemoteMonitoringListActionTest.java-29:32
/*** testGetPatientData
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyRemoteMonitoringListActionTest.java-90:93
/*** testGetPatientDataByDate
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyRemoteMonitoringListActionTest.java-123:126
/*** testGetPatientDataByType
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyRemoteMonitoringListActionTest.java-147:150
/*** testIllegalGetPatientDataByDate1
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyRemoteMonitoringListActionTest.java-158:158
//Here to remove warning about data not being read

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyRemoteMonitoringListActionTest.java-161:161
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewMyRemoteMonitoringListActionTest.java-165:168
/*** testGetPatientName
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewOfficeVisitActionTest.java-15:17
/*** Test All doctor office visit
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewOfficeVisitActionTest.java-32:35
/*** Test view office visit
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewOfficeVisitActionTest.java-52:52
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewPatientOfficeVisitHistoryActionTest.java-13:15
/*** ViewPatientOfficeVisitHistoryActionTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewPatientOfficeVisitHistoryActionTest.java-29:32
/*** testGetPersonnel
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewPatientOfficeVisitHistoryActionTest.java-38:41
/*** testGetPatients
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewPatientReferralsActionTest.java-1:3
/***
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewPatientReferralsActionTest.java-19:21
/*** ViewPatientReferralsActionTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewPatientReferralsActionTest.java-38:41
/*** Test method for {@link edu.ncsu.csc.itrust.action.ViewPatientReferralsAction#getReferrals(java.lang.String, edu.ncsu.csc.itrust.enums.SortDirection)}.
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewPatientReferralsActionTest.java-92:92
//illegal sort direction, expecting an error

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewPatientReferralsActionTest.java-103:106
/*** Test method for {@link edu.ncsu.csc.itrust.action.ViewPatientReferralsAction#getReferralsForPatientUnread()}.
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewPatientReferralsActionTest.java-120:123
/*** Test method for {@link edu.ncsu.csc.itrust.action.ViewPatientReferralsAction#getReferralByID(int)}.
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewPatientReferralsActionTest.java-139:142
/*** Test method for {@link edu.ncsu.csc.itrust.action.ViewPatientReferralsAction#updateReferral(edu.ncsu.csc.itrust.beans.ReferralBean)}.
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewPatientReferralsActionTest.java-176:179
/*** Test method for {@link edu.ncsu.csc.itrust.action.ViewPatientReferralsAction#getOVDate(long)}.
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewReceivingReferralsActionTest.java-1:3
/***
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewReceivingReferralsActionTest.java-17:19
/*** ViewReceivingReferralsActionTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewReceivingReferralsActionTest.java-36:39
/*** Test method for {@link edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction#getReferralsForReceivingHCP()}.
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewReceivingReferralsActionTest.java-63:66
/*** Test method for {@link edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction#getReferralsForReceivingHCPUnread()}.
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewReceivingReferralsActionTest.java-79:82
/*** Test method for {@link edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction#getReferralByID(int)}.
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewReceivingReferralsActionTest.java-98:101
/*** Test method for {@link edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction#updateReferral(edu.ncsu.csc.itrust.beans.ReferralBean)}.
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewReceivingReferralsActionTest.java-133:136
/*** Test method for {@link edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction#getOVDate(long)}.
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-38:38
//Get the current amount of release requests for the hospital

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-41:41
//Add a RecordsReleaseBean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-58:58
//There should be no DBException

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-61:61
//Assert that one more records release bean is returned

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-64:64
//Add a record release request from a different hospital

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-69:69
//There should be no DBException

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-72:72
//Assert that the same amount of records release beans are returned

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-75:75
//Attempt to get the release requests as an uap

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-79:79
//Attempt to get the release requests as a non hcp or uap user

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-105:105
//Add a RecordsReleaseBean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-121:121
//Get a records release bean for patient 102

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-124:124
//There should be no DBException

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-127:127
//Get the request id

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-130:130
//Approve the records release

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-132:132
//Make sure that the records release status is properly updated

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-136:136
//There should be no DBException

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-141:141
//Attempt to approve a request that is not in pending status

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-146:146
//Add a RecordsReleaseBean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-162:162
//Get a records release bean for patient 102

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-165:165
//There should be no DBException

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-168:168
//Get the request id

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-171:171
//Deny the records release

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-173:173
//Make sure that the records release status is properly updated

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-177:177
//There should be no DBException

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-182:182
//Attempt to deny a request that is not in pending status

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-189:189
//Create and add a new RecordsReleaseBean to test with

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-205:205
//Get a records release bean for patient 102

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-208:208
//There should be no DBException

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-212:212
//Attempt to approve and deny a release request

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-216:216
//Attempt to get all hospitals and ensure an empty list is returned

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-219:219
//Attempt to get a patient name with a dirty factory

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-222:222
//Attempt to get a hospital name with a dirty factory

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-225:225
//Attempt to get a list of requested health records with a dirty factory

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-228:228
//Attempt to get a doctor's name with a dirty factory

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-235:235
//Try running the test with a non existent patient

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-243:243
//Get hospital name for hospital id 1

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-246:246
//Fail if there is a DBException

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-249:249
//Test that the name the action method gets is the same

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-252:252
//Clear the db tables

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-256:256
//Fail if there is an exception

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-260:260
//Test that a blank string is returned if there is no hospital with the given id

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-268:268
//Create a list of requests

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-274:274
//Add a non pending release

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-283:283
//Add a RecordsReleaseBean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-297:297
//Assert that the method returns a list with at least one hospital

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-301:301
//Check that the all the health records are from hospital 1

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-310:310
//If a DBException occurs fail

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-316:316
//Get Kelly Doctor's name

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewRecordsReleaseActionTest.java-318:318
//Get Shelly Vang's name

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewSleepEntryActionTest.java-18:21
/*** Tests for viewing a patient's sleep diary
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewSleepEntryActionTest.java-28:31
/*** Clears all of the tables, gets the standard data,
* and includes the data for use cases 68 and 69
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewSleepEntryActionTest.java-39:41
/*** Clears all of the tables
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewSleepEntryActionTest.java-46:51
/*** Log in as the HCP Duyu Ivanlyft who does have the specialty of
* trainer, so she should be able to view sleep entries. View
* the Sleep Entries for Patient Random Person who has some
* sleep entries already in their diary.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewSleepEntryActionTest.java-60:60
//now that we know we have 2 of them, make sure they are the

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewSleepEntryActionTest.java-61:61
//right ones

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewSleepEntryActionTest.java-72:72
//now check the totals

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewSleepEntryActionTest.java-85:87
/*** Test that a patient can view their sleep diary.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewSleepEntryActionTest.java-96:96
//now that we know we have 2 of them,

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewSleepEntryActionTest.java-97:97
//make sure they are the right ones

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewSleepEntryActionTest.java-108:108
//now check the totals

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewSleepEntryActionTest.java-120:122
/*** Ensures a patient can still view their sleep diary even when it is empty.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewSleepEntryActionTest.java-134:137
/*** Ensures HCPs with specialty of trainer can still view a sleep diary
* even when the sleep diary is empty.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewSleepEntryActionTest.java-149:151
/*** Ensure patients can't view the sleep diary of other patients.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewSleepEntryActionTest.java-164:166
/*** Testing that we can get the diary when we are searching for range of dates
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewSleepEntryActionTest.java-175:175
//now that we know we have 1 of them, make sure they are the

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewSleepEntryActionTest.java-176:176
//right ones

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewSleepEntryActionTest.java-182:182
//now check the totals

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewSleepEntryActionTest.java-195:197
/*** Test bounded diary with bad dates
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewSleepEntryActionTest.java-214:216
/*** Test with a bad factory
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewSleepEntryActionTest.java-229:231
/*** Test with a bad factory
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewSleepEntryActionTest.java-244:246
/*** Test with a bad factory
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewSleepEntryActionTest.java-257:259
/*** Test with a bad factory
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewSleepEntryActionTest.java-270:272
/*** Try to get a bounded exercise diary of other patient.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewSleepEntryActionTest.java-287:289
/*** Try to get a bounded exercise diary totals of other patient.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewSleepEntryActionTest.java-304:306
/*** Enter in start date after end date
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewSleepEntryActionTest.java-323:325
/*** Enter in start date after end date for the totals
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewSurveyResultsActionTest.java-37:37
// difference

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewSurveyResultsActionTest.java-50:50
// difference

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewVisitedHCPsActionTest.java-14:17
/*** Test class for the ViewVisitedHCPsAction class.
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewVisitedHCPsActionTest.java-36:36
// Get all visited HCPs without any filtering.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewVisitedHCPsActionTest.java-47:47
// Get all visited HCPs without any filtering.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewVisitedHCPsActionTest.java-62:62
// Get all visited HCPs without any filtering. (The empty strings are

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewVisitedHCPsActionTest.java-63:63
// ignored.)

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewVisitedHCPsActionTest.java-75:75
// Get all visited HCPs without any filtering. (The nulls are ignored.)

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewVisitedHCPsActionTest.java-87:87
// Filter on last name and specialty.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewVisitedHCPsActionTest.java-95:95
// Filter on last name only.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewVisitedHCPsActionTest.java-104:104
// Filter on specialty only.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\action\ViewVisitedHCPsActionTest.java-114:114
// Filter on zip only.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\BillingBeanLoaderTest.java-49:49
//this just sets the value for a method call (kinda hard coding I assume)

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\BillingBeanLoaderTest.java-102:102
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\DistanceComparatorTest.java-21:24
/*** Test comparing the distances
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\DistanceComparatorTest.java-32:34
/*** Gets all of the standard data and initializes 2 zipcode actions
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\DistanceComparatorTest.java-46:48
/*** Tests comparing two things
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\DistanceComparatorTest.java-56:56
// TODO Auto-generated catch block

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\DistanceComparatorTest.java-73:75
/*** Tests when we have an evil factory we get an exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\DistanceComparatorTest.java-84:84
// TODO Auto-generated catch block

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\DistanceComparatorTest.java-101:104
/*** Tests that we get an error when we drop the tables
* and try to compare stuff
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\FlagsLoaderTest.java-22:24
/*** Test of the ReviewsBeanLoader, for creating/building a ReviewsBean
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\FlagsLoaderTest.java-43:43
//unused currently

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\FlagsLoaderTest.java-47:50
/*** Test the ReviewsBeanLoader's loadList() method
* @throws SQLException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\FlagsLoaderTest.java-58:60
/*** Test the ReviewsBeanLoader loadSingle() method.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\FlagsLoaderTest.java-64:64
//set-up the ResultSet

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\FlagsLoaderTest.java-69:69
//load the bean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\FlagsLoaderTest.java-71:71
//check all fields in bean are loaded properly

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\FlagsLoaderTest.java-80:82
/*** Tests the ReviewsBeanLoader loadParameter() method.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\HCPVisitBeanTest.java-50:50
// The order of the following statements is important.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\HospitalBeanTest.java-6:7
/***/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\HospitalBeanTest.java-10:13
/*** testHospitalBean
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\HospitalBeanTest.java-23:26
/*** testFullConstrcutor
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\LabelBeanTest.java-6:8
/*** Test for LabelBean
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\LabelBeanTest.java-10:12
/*** Test for a bean.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\LabelLoaderTest.java-42:42
//this just sets the value for a method call (kinda hard coding I assume)

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\LabelLoaderTest.java-55:55
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\LabProcedureBeanTest.java-39:39
// In order to set the LP as viewed by patient, the status must be completed.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\LabProcedureBeanTest.java-50:53
/*** testGetNumericalResultUnit
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\LabProcedureBeanTest.java-67:70
/*** testGetNumericalResultAsDouble
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\LabProcedureBeanTest.java-89:92
/*** testGetUpperBoundAsDouble
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\LabProcedureBeanTest.java-111:114
/*** testGetLowerBoundAsDouble
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\ObstetricsRecordBeanTest.java-98:98
//now, check that if I change one the comparison fails

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\ObstetricsRecordBeanTest.java-124:124
//make a bean with improperly formatted dates

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\ObstetricsRecordBeanTest.java-147:147
//make a bean with null dates

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologyOVRecordBeanTest.java-13:13
/**Allowed value for the difference of two 'equivalent' doubles.*/

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologyOVRecordBeanTest.java-105:105
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologyOVRecordBeanTest.java-110:110
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologyOVRecordBeanTest.java-115:115
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologyOVRecordBeanTest.java-120:120
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologyOVRecordBeanTest.java-125:125
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologyOVRecordBeanTest.java-130:130
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologyOVRecordBeanTest.java-135:135
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologyOVRecordBeanTest.java-140:140
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologyOVRecordBeanTest.java-145:145
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologyOVRecordBeanTest.java-150:150
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologyOVRecordBeanTest.java-155:155
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologyOVRecordBeanTest.java-160:160
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologyOVRecordBeanTest.java-165:165
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologyOVRecordBeanTest.java-173:173
// Make a bean with an invalid date

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologyScheduleOVRecordBeanTest.java-32:32
//Won't happen

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologyScheduleOVRecordBeanTest.java-45:45
//Won't happen

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologyScheduleOVRecordBeanTest.java-65:65
//Won't happen

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologyScheduleOVRecordBeanTest.java-79:79
//Won't happen

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologyScheduleOVRecordBeanTest.java-90:90
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologyScheduleOVRecordBeanTest.java-100:100
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologyScheduleOVRecordBeanTest.java-105:105
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologyScheduleOVRecordBeanTest.java-110:110
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologyScheduleOVRecordBeanTest.java-115:115
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologyScheduleOVRecordBeanTest.java-120:120
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologySurgeryRecordBeanTest.java-13:13
/**Allowed value for the difference of two 'equivalent' doubles.*/

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologySurgeryRecordBeanTest.java-113:113
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologySurgeryRecordBeanTest.java-118:118
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologySurgeryRecordBeanTest.java-123:123
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologySurgeryRecordBeanTest.java-128:128
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologySurgeryRecordBeanTest.java-133:133
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologySurgeryRecordBeanTest.java-138:138
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologySurgeryRecordBeanTest.java-143:143
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologySurgeryRecordBeanTest.java-148:148
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologySurgeryRecordBeanTest.java-153:153
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologySurgeryRecordBeanTest.java-158:158
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologySurgeryRecordBeanTest.java-163:163
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologySurgeryRecordBeanTest.java-168:168
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologySurgeryRecordBeanTest.java-173:173
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologySurgeryRecordBeanTest.java-178:178
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologySurgeryRecordBeanTest.java-183:183
//assertFalse(bean1.hashCode() == (bean2.hashCode()));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\OphthalmologySurgeryRecordBeanTest.java-191:191
// Make a bean with an invalid date

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\PatientHistoryBeanTest.java-10:11
/***/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\PatientHistoryBeanTest.java-20:23
/*** testAgeZero
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\PatientHistoryBeanTest.java-30:33
/*** testAge10
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\PatientHistoryBeanTest.java-40:42
/*** testBean
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\PatientHistoryBeanTest.java-89:91
/*** testGetChangeDate
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\PatientVisitBeanTest.java-7:8
/***/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\PatientVisitBeanTest.java-14:16
/*** setUP
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\PatientVisitBeanTest.java-22:24
/*** testOVDate
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\PatientVisitBeanTest.java-30:32
/*** testPatientName
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\PatientVisitBeanTest.java-38:40
/*** testAddress
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\PatientVisitBeanTest.java-49:51
/*** testPatient
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\PrescriptionBeanTest.java-9:10
/***/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\PrescriptionBeanTest.java-23:26
/*** testPrescriptionEquals
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\ProcedureBeanTest.java-6:7
/***/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\ProcedureBeanTest.java-10:13
/*** testProcedureBean
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\RatingComparatorTest.java-19:22
/*** Tests the comparator for ratings
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\RatingComparatorTest.java-29:31
/*** Gets the standard data and initializes a review action
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\RatingComparatorTest.java-42:44
/*** Tests the comparator of two things
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\RatingComparatorTest.java-52:52
// TODO Auto-generated catch block

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\RecordsReleaseBeanTest.java-119:119
//Test pending status

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\RecordsReleaseBeanTest.java-126:126
//Test approved status

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\RecordsReleaseBeanTest.java-133:133
//Test denied status

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\RecordsReleaseBeanTest.java-140:140
//Test invalid status number

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\ReportRequestBeanTest.java-11:11
// test setters

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\ReportRequestBeanTest.java-19:19
// confirm with getters

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\RequiredProceduresBeanTest.java-15:15
//Test that the cptCode is properly set and gotten

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\RequiredProceduresBeanTest.java-24:24
//Test that the description is properly set and gotten

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\RequiredProceduresBeanTest.java-33:33
//Test that the age group is properly set and gotten

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\RequiredProceduresBeanTest.java-42:42
//Test that the attribute is properly set and gotten

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\RequiredProceduresBeanTest.java-51:51
//Test that the age group is properly set and gotten

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\ReviewsBeanLoaderTest.java-23:25
/*** Test of the ReviewsBeanLoader, for creating/building a ReviewsBean
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\ReviewsBeanLoaderTest.java-46:46
//unused currently

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\ReviewsBeanLoaderTest.java-50:53
/*** Test the ReviewsBeanLoader's loadList() method
* @throws SQLException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\ReviewsBeanLoaderTest.java-63:65
/*** Test the ReviewsBeanLoader loadSingle() method.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\ReviewsBeanLoaderTest.java-69:69
//set-up the ResultSet

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\ReviewsBeanLoaderTest.java-77:77
//load the bean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\ReviewsBeanLoaderTest.java-79:79
//check all fields in bean are loaded properly

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\ReviewsBeanLoaderTest.java-91:93
/*** Tests the ReviewsBeanLoader loadParameter() method.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\SurveyBeanTest.java-12:12
// test setters

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\SurveyBeanTest.java-20:20
// confirm with getters

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\SurveyResultBeanTest.java-6:9
/***
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\SurveyResultBeanTest.java-15:15
// build a bean and stuff in some data

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\SurveyResultBeanTest.java-33:33
// now test the getters

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardBeanLoaderTest.java-20:22
/*** WardBeanLoaderTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardBeanLoaderTest.java-31:33
/*** setUp
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardBeanLoaderTest.java-39:41
/*** testLoadList
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardBeanLoaderTest.java-47:47
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardBeanLoaderTest.java-53:55
/*** testloadSingle
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardBeanLoaderTest.java-66:66
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardBeanLoaderTest.java-70:72
/*** testLoadParameters
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardBeanLoaderTest.java-78:78
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardBeanLoaderTest.java-80:80
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardBeanTest.java-6:8
/*** WardBeanTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardBeanTest.java-15:17
/*** setUp
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardBeanTest.java-24:26
/*** testWardID
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardBeanTest.java-33:35
/*** testSpecialty
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardBeanTest.java-42:44
/*** testInHospital
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardBeanTest.java-51:53
/*** testEquals
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardRoomBeanLoaderTest.java-20:22
/*** WardRoomBeanLoader
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardRoomBeanLoaderTest.java-31:33
/*** setUp
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardRoomBeanLoaderTest.java-39:41
/*** testLoadList
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardRoomBeanLoaderTest.java-47:47
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardRoomBeanLoaderTest.java-53:55
/*** testloadSingle
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardRoomBeanLoaderTest.java-67:67
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardRoomBeanLoaderTest.java-71:73
/*** testLoadParameters
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardRoomBeanLoaderTest.java-79:79
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardRoomBeanTest.java-6:8
/*** WardRoomBeanTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardRoomBeanTest.java-15:17
/*** setUp
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardRoomBeanTest.java-24:26
/*** testRoomID
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardRoomBeanTest.java-32:34
/*** testOccupiedBy
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardRoomBeanTest.java-40:42
/*** testInWard
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardRoomBeanTest.java-48:50
/*** testRoomName
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardRoomBeanTest.java-56:58
/*** testRoomStatus
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\WardRoomBeanTest.java-64:66
/*** testEquals
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\ZipCodeBeanTest.java-7:9
/*** Test for ZipCodeBean
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\ZipCodeBeanTest.java-12:14
/*** Test for a bean.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\ZipCodeLoaderTest.java-42:42
//this just sets the value for a method call (kinda hard coding I assume)

iTrust_v21\test\edu\ncsu\csc\itrust\unit\bean\ZipCodeLoaderTest.java-60:60
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\BeanBuilderTest.java-19:19
// just testing the building process - test the bean validation elsewhere!

iTrust_v21\test\edu\ncsu\csc\itrust\unit\charts\HealthDataTest.java-20:21
/***/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\charts\HealthDataTest.java-34:36
/*** testProduceDataset
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\charts\HealthDataTest.java-64:66
/*** testProduceDataset2
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\CSVParserTest.java-53:53
//CSVFormatException is good here

iTrust_v21\test\edu\ncsu\csc\itrust\unit\CSVParserTest.java-56:56
//Other exceptions are bad

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\access\GetSessionTimeoutTest.java-13:14
/***/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\access\GetSessionTimeoutTest.java-25:28
/*** testChangeTimeout
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\access\GetSessionTimeoutTest.java-35:38
/*** testUpdateBadTimeout
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\access\UpdatePrivacyLevelTest.java-14:18
/*** Test privacy level
* Test privacy level with access
* and without no access
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\allergies\AddAllergiesTest.java-23:25
/** updated to reflect the new way addAllergy updates allergyDAO.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\allergies\AllergyDAOExceptionTest.java-16:18
/** updated to reflect the new way addAllergy updates allergyDAO.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\appointment\ApptRequestDAOTest.java-45:45
//Success!

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\appointment\ApptRequestDAOTest.java-69:69
//Success!

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\appointment\ApptRequestDAOTest.java-85:85
//Success!

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\appointment\ApptRequestDAOTest.java-105:105
//Success!

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\appointment\ApptRequestDAOTest.java-117:117
//Success!

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\appointment\ApptRequestDAOTest.java-125:125
//Success!

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\appointment\ApptRequestDAOTest.java-134:134
//Success!

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\appointment\ApptRequestDAOTest.java-143:143
//Success!

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\auth\AddUserTest.java-32:32
// Ensure that the password returned is the one given to the method

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\auth\AddUserTest.java-40:40
// Ensure that the password returned is the one given to the method

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\auth\GetLoginFailureTest.java-30:30
// no need to do it *exactly* if we have -10s and +10s; we don't need that level of accuracy

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\auth\GetLoginFailureTest.java-33:33
// also doing BVA - make it 10s less than the timeout time

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\auth\GetLoginFailureTest.java-39:39
// for BVA here, make it 10s greater than the timeout time

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\auth\ResetPasswordTest.java-11:13
/*** ResetPasswordTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\auth\ResetPasswordTest.java-25:28
/*** testResetPassword
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\auth\ResetPasswordTest.java-30:34
/**assertEquals(DigestUtils.sha256Hex("pw"), getPassword(2L));
authDAO.resetPassword(2L, "password");
assertEquals(DigestUtils.sha256Hex("password"), getPassword(2L));
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\auth\ResetPasswordTest.java-35:35
//sanity check of the current user password

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\auth\ResetPasswordTest.java-37:37
//reset the password

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\auth\ResetPasswordTest.java-39:39
//check that the password is truly reset

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\auth\ResetPasswordTest.java-44:47
/*** testResetPasswordNonExistent
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\auth\ResetPasswordTest.java-49:49
// Still runs with no exception - that's the expected behavior

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\auth\ResetPasswordTest.java-53:56
/*** testResetSecurityQuestionAnswer
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\auth\ResetPasswordTest.java-61:64
/*** testGetNoSecurityAnswer
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\auth\ResetPasswordTest.java-75:78
/*** testGetNoSecurityQuestion
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\AutoIncrementTest.java-11:13
/*** AutoIncrementTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\AutoIncrementTest.java-32:35
/*** testNoIcrementCollision
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\AutoIncrementTest.java-45:45
// See? It's on a per-connection basis. Nothing to worry about.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\AutoIncrementTest.java-47:47
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\billing\BillingDAOTest.java-1:3
/***
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\billing\BillingDAOTest.java-22:23
/***/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\billing\BillingDAOTest.java-37:39
/*** @throws java.lang.Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\billing\BillingDAOTest.java-93:96
/*** Test method for {@link edu.ncsu.csc.itrust.dao.mysql.BillingDAO#addBill(BillingBean)}.
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\billing\BillingDAOTest.java-106:109
/*** Test method for {@link edu.ncsu.csc.itrust.dao.mysql.BillingDAO#getBillWithOVId(long)}.
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\billing\BillingDAOTest.java-136:139
/*** Test method for {@link edu.ncsu.csc.itrust.dao.mysql.BillingDAO#getBills(long)}.
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\billing\BillingDAOTest.java-165:168
/*** Tests that you get the correct number of unpaid bills.
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\billing\BillingDAOTest.java-208:211
/*** Test method for {@link edu.ncsu.csc.itrust.dao.mysql.BillingDAO#editBill(BillingBean)}.
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\billing\BillingDAOTest.java-227:230
/*** Test method for {@link edu.ncsu.csc.itrust.dao.mysql.BillingDAO#RemoveBill(BillingBean)}.
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\billing\BillingDAOTest.java-244:247
/*** Test method for {@link edu.ncsu.csc.itrust.dao.mysql.BillingDAO#getPendingNum()}.
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\billing\BillingDAOTest.java-258:261
/*** Test method for {@link edu.ncsu.csc.itrust.dao.mysql.BillingDAO#getDeniedNum(long)}.
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\billing\BillingDAOTest.java-273:276
/*** Test method for {@link edu.ncsu.csc.itrust.dao.mysql.BillingDAO#getApprovedNum(long)}.
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\CDCMetrics\CDCBmiStatsDAOTest.java-45:45
//if these fail then the gets do not work, and neither do the sets! :D

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\CDCMetrics\CDCBmiStatsDAOTest.java-78:78
//Success!

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\CDCMetrics\CDCBmiStatsDAOTest.java-85:85
//SUCCESS!

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\CDCMetrics\CDCHeadCircStatsDAOTest.java-43:43
//if these fail then the gets do not work, and neither do the sets! :D

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\CDCMetrics\CDCHeadCircStatsDAOTest.java-76:76
//Success!

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\CDCMetrics\CDCHeadCircStatsDAOTest.java-83:83
//SUCCESS!

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\CDCMetrics\CDCHeightStatsDAOTest.java-43:43
//if these fail then the gets do not work, and neither do the sets! :D

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\CDCMetrics\CDCHeightStatsDAOTest.java-76:76
//Success!

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\CDCMetrics\CDCHeightStatsDAOTest.java-83:83
//SUCCESS!

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\CDCMetrics\CDCWeightStatsDAOTest.java-43:43
//if these fail then the gets do not work, and neither do the sets! :D

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\CDCMetrics\CDCWeightStatsDAOTest.java-76:76
//Success!

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\CDCMetrics\CDCWeightStatsDAOTest.java-83:83
//SUCCESS!

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\DAOFactoryTest.java-9:9
// Show that the production driver can't be access during a unit test

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\DBUtilTest.java-14:14
// Should never be able to do this because JUnit is not running under Tomcat

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\DBUtilTest.java-24:24
// The following test uses an advanced concept not taught in CSC326 at NCSU called Mock Objects.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\DBUtilTest.java-25:25
// Feel free to take a look at how this works, but know that you will not need to know mock objects

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\DBUtilTest.java-26:26
// to do nearly everything in iTrust. Unless your assignment mentions mock objects somewhere, you should

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\DBUtilTest.java-27:27
// not need them.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\DBUtilTest.java-28:28
//

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\DBUtilTest.java-29:29
// But, if you are interested in a cool unit testing concept, feel free to look at this code as an

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\DBUtilTest.java-30:30
// example.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\DBUtilTest.java-31:31
//

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\DBUtilTest.java-32:32
// This class uses the EasyMock library to manage the mock objects. http://easymock.org/

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\druginteraction\DrugInteractionDAOTest.java-36:36
//Good job, it works

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\druginteraction\DrugInteractionDAOTest.java-46:46
//Good job, it works

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\exerciseEntry\ExerciseEntryDAOTest.java-17:20
/*** Tests that the dao throws exceptions when created with bad factory
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\exerciseEntry\ExerciseEntryDAOTest.java-28:31
/*** Clears all of the tables, sets the standard data and includes
* the data for use cases 68 and 69
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\exerciseEntry\ExerciseEntryDAOTest.java-40:42
/*** Clears all of the tables
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\exerciseEntry\ExerciseEntryDAOTest.java-48:51
/*** Testing when you are using an evil dao.
* looking for it to throw exceptions
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\exerciseEntry\ExerciseEntryDAOTest.java-63:66
/*** Testing when you are using an evil dao.
* looking for it to throw exceptions
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\family\FamilyMembersTest.java-63:63
// Note that you don't get Patient 9

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\flags\FlagsDAOTest.java-27:27
//make a bean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\flags\FlagsDAOTest.java-43:43
//add the bean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\flags\FlagsDAOTest.java-47:47
//set the flag to true

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\flags\FlagsDAOTest.java-52:52
//assert it exists by OID

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\foodEntry\FoodEntryDAOTest.java-17:20
/*** Tests that the dao throws exceptions when created with bad factory
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\foodEntry\FoodEntryDAOTest.java-28:31
/*** Clears all of the tables, sets the standard data and includes
* the data for use cases 68 and 69
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\foodEntry\FoodEntryDAOTest.java-36:36
//gen.uc68(); //uc68 is now a part of standardData

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\foodEntry\FoodEntryDAOTest.java-41:43
/*** Clears all of the tables
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\foodEntry\FoodEntryDAOTest.java-49:52
/*** Testing when you are using an evil dao.
* looking for it to throw exceptions
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\foodEntry\FoodEntryDAOTest.java-64:67
/*** Testing when you are using an evil dao.
* looking for it to throw exceptions
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\hospital\AddEditHospitalDAOTest.java-18:20
/*** Test Hostipal DAO
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\hospital\AddEditHospitalDAOTest.java-36:43
/*** Test All hospital
* test Get HospitalFromEmptyTable
* test GetHospital
* test AddDupe
* testUpdateName
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\hospital\AddEditHospitalDAOTest.java-47:47
// All hospitals in alphabetical order.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\hospital\AddEditHospitalDAOTest.java-124:124
//Generate the standard data set

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\hospital\AddEditHospitalDAOTest.java-129:129
//Fail if there's an exception

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\hospital\AddEditHospitalDAOTest.java-133:133
//Test that the getAllPatientHospitals() method returns a nonempty list for

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\hospital\AddEditHospitalDAOTest.java-134:134
//patient 102

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\hospital\AddEditHospitalDAOTest.java-138:138
//Fail if there's a DBException

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\hospital\AddEditHospitalDAOTest.java-142:142
//Test the method with a dirty factory

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\hospital\AddEditHospitalDAOTest.java-147:147
//Fail if no excepion is thrown

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\hospital\AddEditHospitalDAOTest.java-150:150
//Test passed

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\labels\LabelDAOTest.java-17:20
/*** Tests that the dao throws exceptions when created with bad factory
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\labels\LabelDAOTest.java-28:31
/*** Clears all of the tables, sets the standard data and includes
* the data for use cases 68 and 69
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\labels\LabelDAOTest.java-40:42
/*** Clears all of the tables
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\labels\LabelDAOTest.java-48:51
/*** Testing when you are using an evil dao.
* looking for it to throw exceptions
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\labels\LabelDAOTest.java-63:66
/*** Testing when you are using an evil dao.
* looking for it to throw exceptions
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\labels\LabelDAOTest.java-78:81
/*** Testing when you are using an evil dao.
* looking for it to throw exceptions
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\labels\LabelDAOTest.java-98:101
/*** Testing when you are using an evil dao.
* looking for it to throw exceptions
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\labels\LabelDAOTest.java-118:121
/*** Testing when you are using an evil dao.
* looking for it to throw exceptions
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\labprocedure\AddLabProcedureTest.java-10:13
/***
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\labprocedure\GetAllLabProceduresLOINCTest.java-24:27
/*** testGetAllLabProcedures
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\labprocedure\GetAllLabProceduresLOINCTest.java-36:39
/*** testFailGetLabProcedures
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\labprocedure\GetAllLabProceduresLOINCTest.java-49:52
/*** testGetAllLabProceduresLOINIC
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\labprocedure\GetLabProceduresForLHCPForNextMonthTest.java-22:22
// first procedure

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\labprocedure\GetLabProceduresForPatientForNextMonthTest.java-23:23
// first procedure

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\labprocedure\LabPocedureDAOExceptionTest.java-131:133
/*** testGetAllLabProceduresLOINC2
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\labprocedure\LabPocedureDAOExceptionTest.java-143:145
/*** testUpdateRights
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\labprocedure\LabPocedureDAOExceptionTest.java-157:159
/*** testRemoveLabProcedure
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\labprocedure\LabPocedureDAOExceptionTest.java-169:171
/*** testGetLabProceduresInTranistForLabTech
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\labprocedure\LabPocedureDAOExceptionTest.java-181:183
/*** testGetLabProceduresReceivedForLabTech
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\labprocedure\LabPocedureDAOExceptionTest.java-193:195
/*** testGetLanProceduresTestingForLabTech
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\labprocedure\LabPocedureDAOExceptionTest.java-205:207
/*** testSubmiteTestResults
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\labprocedure\LabPocedureDAOExceptionTest.java-217:219
/*** testSubmitReceivedLP
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\labprocedure\LabPocedureDAOExceptionTest.java-229:231
/*** testSetLPToTesting
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\labprocedure\UpdateLabProcedureTest.java-10:13
/***
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\labprocedure\UpdateRightsTest.java-9:12
/***
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\macronutrients\MacronutrientsDAOTest.java-17:20
/*** Tests that the dao throws exceptions when created with bad factory
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\macronutrients\MacronutrientsDAOTest.java-27:30
/*** Clears all of the tables, sets the standard data and includes
* the data for use cases 68 and 69
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\macronutrients\MacronutrientsDAOTest.java-38:40
/*** Clears all of the tables
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\NormalBean\NormalDAOTest.java-32:35
/*** testNormal
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\NormalBean\NormalDAOTest.java-50:50
//this means our getters or setters are failing if they fail, which is silly if they are.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\NormalBean\NormalDAOTest.java-73:76
/*** testevilNormal
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\NormalBean\NormalDAOTest.java-90:90
//this means our getters or setters are failing if they fail, which is silly if they are.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\NormalBean\NormalDAOTest.java-106:106
//WOOOOOOOO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\obstetrics\ObstetricsRecordDAOTest.java-30:30
//make a bean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\obstetrics\ObstetricsRecordDAOTest.java-52:52
//add the bean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\obstetrics\ObstetricsRecordDAOTest.java-56:56
//edit the bean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\obstetrics\ObstetricsRecordDAOTest.java-60:60
//assert it exists by OID

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\obstetrics\ObstetricsRecordDAOTest.java-63:63
//also assert it exists if gathered by MID

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\obstetrics\ObstetricsRecordDAOTest.java-72:72
//get a single record

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\obstetrics\ObstetricsRecordDAOTest.java-87:87
//get all obstetrics records

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\obstetrics\ObstetricsRecordDAOTest.java-102:102
//get a record by MID and pregId

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\obstetrics\PreExistingConditionsDAOTest.java-20:20
//Test the validate function

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\obstetrics\PreExistingConditionsDAOTest.java-24:24
//Add some preexisting conditions

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\obstetrics\PreExistingConditionsDAOTest.java-36:36
//Get the preexisting conditions we added

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\AddOfficeVisitTest.java-37:37
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\EditPrescriptionsTest.java-10:13
/*** Test Edit Prescription
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\GetAllOfficeVisitsTest.java-11:13
/*** Test all office visit
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\GetAllOfficeVisitsTest.java-36:36
//Note that that "all office visits" doesn't return the procedures, etc. since it's not needed (yet)

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\GetAllOfficeVisitsTest.java-37:37
//Now check the order

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\GetPrescriptionsTest.java-12:14
/*** Test  prescriptions
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\GetPrescriptionsTest.java-29:32
/*** testGetPrescriptions
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\GetPrescriptionsTest.java-84:87
/*** testGetWithNotRightPID
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\OfficeVisitDAOExceptionTest.java-9:12
/*** Test office visit with exception DAO
* @throw exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\OfficeVisitDAOExceptionTest.java-15:15
//private DiagnosesDAO evilDAO = EvilDAOFactory.getEvilInstance().getDiagnosesDAO();

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\OfficeVisitExistsTest.java-21:21
// wrong patient

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\OVDiagnosesTest.java-18:20
/*** Test client diagnoses
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\OVDiagnosesTest.java-35:38
/*** testAddRemoveOneOVDiagnosis
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\OVDiagnosesTest.java-52:55
/*** testAddBadDiagnosis
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\OVDiagnosesTest.java-64:64
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\OVDiagnosesTest.java-68:71
/*** testEditBadDiagnosis
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\OVDiagnosesTest.java-79:79
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\OVDiagnosesTest.java-83:86
/*** testGetStatisticsValid
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\OVDiagnosesTest.java-95:98
/*** testGetWeeklyStatisticsValid
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\OVDiagnosesTest.java-112:112
//If previous test fails, this test may fail

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\OVDiagnosesTest.java-117:120
/*** testMalaria
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\OVMedicationsTest.java-15:17
/*** Test client OV medications
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\OVMedicationsTest.java-46:49
/*** testAddRemoveOneOVPrescription
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\OVMedicationsTest.java-60:63
/*** testOverridePrescription
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\OVMedicationsTest.java-78:81
/*** testAddBadPrescription
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\OVMedicationsTest.java-89:89
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\OVMedicationsTest.java-93:96
/*** testAddMultipleRemoveSingle
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\OVMedicationsTest.java-108:111
/*** testRemoveNonExistant
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\OVProceduresTest.java-12:14
/*** Test client OV procedure
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\OVProceduresTest.java-26:29
/*** testAddRemoveOneOVProcedure
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\OVProceduresTest.java-43:46
/*** testAddBadProcedure
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\OVProceduresTest.java-55:55
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\OVProceduresTest.java-59:62
/*** testEditBadProcedure
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\OVProceduresTest.java-71:71
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\RequiredProceduresDAOTest.java-27:27
//Adam Sandler, MID 300

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\RequiredProceduresDAOTest.java-31:31
//Will Smith, MID 302

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\RequiredProceduresDAOTest.java-40:40
//Adam Sandler, MID 300

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\RequiredProceduresDAOTest.java-49:49
//Charlie Chaplin, MID 308

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\RequiredProceduresDAOTest.java-59:59
//Adam Sandler, MID 300

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\RequiredProceduresDAOTest.java-62:62
//Charlie Chaplin, MID 308

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\UpdateOfficeVisitTest.java-9:11
/*** Test update office visit
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\UpdateOfficeVisitTest.java-15:17
/*** testUpdateNewOfficeVisit
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\officevisit\UpdateOfficeVisitTest.java-39:39
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\ophthalmology\OphthalmologyOVRecordDAOTest.java-28:28
//Make the test bean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\ophthalmology\OphthalmologyOVRecordDAOTest.java-56:56
//edit the bean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\ophthalmology\OphthalmologyOVRecordDAOTest.java-68:68
//get a single record

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\ophthalmology\OphthalmologyOVRecordDAOTest.java-83:83
//get all ophthalmology records

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\ophthalmology\OphthalmologyScheduleOVDAOTest.java-34:34
//Make the test bean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\ophthalmology\OphthalmologyScheduleOVDAOTest.java-48:48
//Won't happen

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\ophthalmology\OphthalmologyScheduleOVDAOTest.java-62:62
//edit the bean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\ophthalmology\OphthalmologyScheduleOVDAOTest.java-78:78
//get a single record

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\ophthalmology\OphthalmologyScheduleOVDAOTest.java-93:93
//get all ophthalmology records by doctor

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\ophthalmology\OphthalmologyScheduleOVDAOTest.java-108:108
//get all ophthalmology records by patient

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\ophthalmologySurgery\OphthalmologySurgeryRecordDAOTest.java-28:28
//Make the test bean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\ophthalmologySurgery\OphthalmologySurgeryRecordDAOTest.java-58:58
//edit the bean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\ophthalmologySurgery\OphthalmologySurgeryRecordDAOTest.java-70:70
//get a single record

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\ophthalmologySurgery\OphthalmologySurgeryRecordDAOTest.java-85:85
//get all obstetrics records

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\patient\EditPatientTest.java-141:141
//2 represents 1, but not 4

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\patient\EditPatientTest.java-145:145
//Add patient 4 to be represented by patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\patient\EditPatientTest.java-148:148
//Ensure the representatives were added correctly

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\patient\EditPatientTest.java-151:151
//Remove all patient's from being represented by patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\patient\EditPatientTest.java-153:153
//Assert that no more patients are represented by patient 2

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\patient\EditPatientTest.java-157:157
//Test with an evil factory

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\patient\EditPatientTest.java-164:164
//Successful test

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\patient\RepresentativeTest.java-77:77
//2 represents 1 but 1 is not a dependent

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\patient\RepresentativeTest.java-78:78
//so the size should be zero

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\patient\RepresentativeTest.java-80:80
//We wanted to test getDependents when a users isDependent field is 1

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\patient\RepresentativeTest.java-81:81
//but the current test generator does not have any patients with this

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\patient\RepresentativeTest.java-82:82
//attribute.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\patientinstructions\PatientInstructionsDAOTest.java-28:28
// empty database

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\patientinstructions\PatientInstructionsDAOTest.java-32:32
// load one patient instructions record

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\patientinstructions\PatientInstructionsDAOTest.java-36:36
// should still return none when there are no records with the given id

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\patientinstructions\PatientInstructionsDAOTest.java-42:42
// empty database

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\patientinstructions\PatientInstructionsDAOTest.java-62:62
// empty database

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\patientinstructions\PatientInstructionsDAOTest.java-63:63
// Editing a non existent record doesn't do anything.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\patientinstructions\PatientInstructionsDAOTest.java-75:75
// load one patient instructions record

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\patientinstructions\PatientInstructionsDAOTest.java-93:93
// Empty database.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\patientinstructions\PatientInstructionsDAOTest.java-96:96
// Patient 5 has one office visit with instructions.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\patientinstructions\PatientInstructionsDAOTest.java-115:115
// Ensure it only returns the one office visit with patient

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\patientinstructions\PatientInstructionsDAOTest.java-116:116
// instructions assigned to patient 5.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\patientinstructions\PatientInstructionsDAOTest.java-122:122
// Patient 5 has two office visits, one with instructions.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\patientinstructions\PatientInstructionsDAOTest.java-130:130
// Patient 5 has two office visits, both with instructions

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\patientinstructions\PatientInstructionsDAOTest.java-138:138
// Ensure it returns both offices visit with patient instructions

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\patientinstructions\PatientInstructionsDAOTest.java-139:139
// assigned to patient 5.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\patientinstructions\PatientInstructionsDAOTest.java-145:145
// Patient 7 has an office visit, but no patient instructions.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\patientinstructions\PatientInstructionsDAOTest.java-151:151
// Check that empty list is returned with bad id even when items are in DB.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\personnel\EditPersonnelTest.java-9:10
/***/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\personnel\EditPersonnelTest.java-22:25
/*** testGetPersonnel2
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\personnel\EditPersonnelTest.java-32:35
/*** testEditPersonnel2
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\personnel\EditPersonnelTest.java-47:50
/*** testGetNonExistentPersonnel
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\personnel\EditPersonnelTest.java-67:70
/*** testEditPersonallZipCode
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\personnel\EditPersonnelTest.java-78:81
/*** testEditPersonnelSpeciality
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\personnel\EditPersonnelTest.java-89:92
/*** testGetPersonnel
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\phr\GetPHRTest.java-50:50
// Already checked the loader, now check that it got the right second

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\phr\GetPHRTest.java-51:51
// record

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\recordsrelease\RecordsReleaseDAOTest.java-16:18
/*** RecordsReleaseDAOTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\recordsrelease\RecordsReleaseDAOTest.java-44:47
/*** testAddRecordsRelease
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\recordsrelease\RecordsReleaseDAOTest.java-56:59
/*** testUpdateRecordsRelease
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\recordsrelease\RecordsReleaseDAOTest.java-73:76
/*** testGetRecordsReleaseByID
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\recordsrelease\RecordsReleaseDAOTest.java-98:101
/*** testGetAllHealthRecordsByHospital
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\recordsrelease\RecordsReleaseDAOTest.java-119:122
/*** testGetAllHealthRecordsByPid
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\recordsrelease\RecordsReleaseDAOTest.java-140:142
/*** testDBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\recordsrelease\RecordsReleaseDAOTest.java-148:148
//Fail if exception isn't caught

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\recordsrelease\RecordsReleaseDAOTest.java-151:151
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\recordsrelease\RecordsReleaseDAOTest.java-156:156
//Fail if exception isn't caught

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\recordsrelease\RecordsReleaseDAOTest.java-159:159
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\recordsrelease\RecordsReleaseDAOTest.java-164:164
//Fail if exception isn't caught

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\recordsrelease\RecordsReleaseDAOTest.java-166:166
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\recordsrelease\RecordsReleaseDAOTest.java-171:171
//Fail if exception isn't caught

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\recordsrelease\RecordsReleaseDAOTest.java-174:174
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\recordsrelease\RecordsReleaseDAOTest.java-179:179
//Fail if exception isn't caught

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\recordsrelease\RecordsReleaseDAOTest.java-182:182
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\remotemonitoring\PatientDataTest.java-15:16
/***/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\remotemonitoring\PatientDataTest.java-31:34
/*** testStoreRetrievePatientNormalData
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\remotemonitoring\PatientDataTest.java-48:51
/*** testGetMonitoringHCPs
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\remotemonitoring\PatientDataTest.java-57:60
/*** testBadStoreRetrievePatientNormalDataBad
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\remotemonitoring\PatientDataTest.java-74:77
/*** testBadStoreRetrievePatientGlucoseOnlyDataBad
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\remotemonitoring\PatientDataTest.java-89:92
/*** testBadStoreRetrievePatientBPOnlyDataBad
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\remotemonitoring\PatientDataTest.java-105:108
/*** testGetTelemadicineBean
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\remotemonitoring\PatientDataTest.java-118:121
/*** testValidatePR
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\remotemonitoring\PatientDataTest.java-131:134
/*** testValidatePRError
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\remotemonitoring\PatientDataTest.java-144:147
/*** testRemovePatientFromListBad
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\reportrequest\ReportRequestDAOTest.java-14:17
/***
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\reviews\ReviewsDAOTest.java-24:24
/** ReviewsDAO instance for testing */

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\reviews\ReviewsDAOTest.java-27:27
/** test instance of beans for testing */

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\reviews\ReviewsDAOTest.java-34:37
/*** Provide setup for the rest of the tests; initialize all globals.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\reviews\ReviewsDAOTest.java-70:75
/*** Tests adding a review to the reviewsTable by comparing sizes of
* lists.
* Pre-condition: assuming the ReviewsDAO.getAllReviews() works AND
* setup is run between ea test.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\reviews\ReviewsDAOTest.java-79:79
//sanity check for the initial size of the entries in the reviews table

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\reviews\ReviewsDAOTest.java-82:82
//try adding a valid bean

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\reviews\ReviewsDAOTest.java-84:84
//check the number of reviews table entries went up by 1

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\reviews\ReviewsDAOTest.java-98:102
/*** Tests getting reviews from a current database for a
* given HCP.
* @throws DBException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\reviews\ReviewsDAOTest.java-106:106
//test getting reviews for Kelly Doctor

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\reviews\ReviewsDAOTest.java-109:109
//test getting reviews for Gandolf Stormcloud

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\reviews\ReviewsDAOTest.java-117:119
/*** Tests that ALL in table reviews are retrieved when called.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\reviews\ReviewsDAOTest.java-136:139
/*** Tests that overall rating averages are returned for ea
* HCP.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\reviews\ReviewsDAOTest.java-142:142
/** expected average rating for Kelly Doctor */

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\reviews\ReviewsDAOTest.java-144:144
/** expected average rating for Gandolf Stomcloud */

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\reviews\ReviewsDAOTest.java-157:162
/*** Tests that a Patient can ONLY review a Physician they have previously seen.
* @throws IOException
* @throws SQLException
* @throws FileNotFoundException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\reviews\ReviewsDAOTest.java-166:166
//Tests when it should not work,

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\reviews\ReviewsDAOTest.java-167:167
//for Patient Tom Nook and HCP Gandolf Stormcloud

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\reviews\ReviewsDAOTest.java-169:169
//Tests when it should be added,

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\reviews\ReviewsDAOTest.java-170:170
//for Patient Tom Nook and HCP Kelly Doctor

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\reviews\ReviewsDAOTest.java-178:180
/*** Tests adding an invalid review
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\reviews\ReviewsDAOTest.java-193:195
/*** Tests getting reviews with invalid dao
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\reviews\ReviewsDAOTest.java-207:209
/*** Tests getting all of the reviews with invalid dao
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\reviews\ReviewsDAOTest.java-221:223
/*** Tests getting the total average rating with invalid dao
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\sleepEntry\SleepEntryDAOTest.java-17:20
/*** Tests that the dao throws exceptions when created with bad factory
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\sleepEntry\SleepEntryDAOTest.java-28:31
/*** Clears all of the tables, sets the standard data and includes
* the data for use cases 68 and 69
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\sleepEntry\SleepEntryDAOTest.java-40:42
/*** Clears all of the tables
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\sleepEntry\SleepEntryDAOTest.java-48:51
/*** Testing when you are using an evil dao.
* looking for it to throw exceptions
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\sleepEntry\SleepEntryDAOTest.java-63:66
/*** Testing when you are using an evil dao.
* looking for it to throw exceptions
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\standards\CPTCodeTest.java-31:31
// order by code asc but field isn't numerical, so codes will NOT be

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\standards\CPTCodeTest.java-32:32
// in NUMERICAL ascending order...

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\standards\CPTCodeTest.java-33:33
// (unless codes are switched to fixed width)

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\standards\CPTCodeTest.java-115:115
//success

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\standards\NDCodeTest.java-28:28
// order by code asc but field isn't numerical, so codes will NOT be

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\standards\NDCodeTest.java-29:29
// in NUMERICAL ascending order...

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\standards\NDCodeTest.java-30:30
// (unless codes are switched to fixed width)

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\survey\AddSurveyTest.java-14:17
/*** Tests that a survey was added correctly by adding it to the database and then retrieving the information.
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\survey\AddSurveyTest.java-55:55
//all this data would generally be set in the JSP

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\survey\AddSurveyTest.java-77:77
//all this data would generally be set in the JSP

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\survey\AddSurveyTest.java-95:95
//Daniel Rice adding for 80% statement coverage

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\surveyresults\SurveyResultsTest.java-12:15
/***
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\transaction\AccessRecordTest.java-23:23
// note - testing the actual loader is done elsewhere. Just check that we're getting the right

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\transaction\AccessRecordTest.java-24:24
// ones here

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\transaction\LogTransactionTest.java-26:26
// that last one inserted should be last because it was backdated

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\transaction\LogTransactionTest.java-41:44
/*** Tests to see if the right MID number shows up in the secondaryMID column in the transactionLog.
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\transaction\OperationalProfileTest.java-12:14
/*** OperationalProfileTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\transaction\OperationalProfileTest.java-27:30
/*** testGetOperationalProfile
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\transaction\OperationalProfileTest.java-64:67
/*** testOperationProfileException
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\visitreminders\GetVisitRemindersTest.java-25:29
/*** Currently only tests missed-last-year's-flu-shot half of flu shot methods (only includes static data)
*
* Testing for month decision is in DateUtil tests
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\visitreminders\GetVisitRemindersTest.java-58:61
/** We need to account for "today" changing. Note that tests should NOT normally have if-statements in
* them.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\visitreminders\GetVisitRemindersTest.java-65:65
// otherwise we are in [Jan,Aug]

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\visitreminders\GetVisitRemindersTest.java-74:74
// otherwise we are in [Jan,Aug]

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-25:27
/*** WardDAOTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-38:40
/*** setUp
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-50:52
/*** testgetAllWardsByHospitalID
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-60:60
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-69:69
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-74:76
/*** testAddWard
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-83:83
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-85:85
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-94:94
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-99:101
/*** testUpdateWard
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-108:108
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-117:117
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-121:123
/*** testRemoveWard
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-129:129
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-138:138
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-143:145
/*** testgetAllWardRoomsByWardID
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-153:153
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-162:162
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-166:168
/*** testAddWardRoom
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-175:175
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-178:178
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-187:187
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-191:193
/*** testUpdateWardRoom
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-199:199
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-208:208
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-212:214
/*** testRemoveWardRoom
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-219:219
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-228:228
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-232:234
/*** testgetAllWardsByHCP
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-242:242
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-251:251
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-256:258
/*** testgetAllHCPsAssignedToWard
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-266:266
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-275:275
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-280:282
/*** testAssignHCPToWard
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-287:287
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-289:289
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-298:298
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-302:304
/*** testRemoveWard2
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-309:309
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-318:318
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-322:324
/*** testUpdateWardRoomOccupant
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-332:332
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-341:341
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-345:347
/*** testGetWardRoomsByStatus
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-356:356
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-365:365
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-369:371
/*** testGetWardRoom
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-379:379
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-388:388
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-392:394
/*** testGetHospitalByWard
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-402:402
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\dao\WardDAOTest.java-411:411
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-14:35
/*** This TestDataGenerator class is in charge of centralizing all of the test
* data calls. Most of the SQL is in the sql/something.sql files. A few design
* conventions:
*
* <ul>
* <li>Any time you're using this class, be sure to run the "clearAllTables"
* first. This is not a very slow method (it's actually quite fast) but it
* clears all of the tables so that no data from a previous test can affect your
* current test.</li>
* <li>We do not recommend having one test method call another test method
* (except "standardData" or other intentionally "meta" methods). For example,
* loincs() should not call patient1() first. Instead, put BOTH patient1() and
* loincs() in your test case. If we keep this convention, then every time you
* call a method, you know that ONLY your sql file is called and nothing else.
* The alternative is a lot of unexpected, extraneous calls to some test methods
* like patient1().</li>
* </ul>
*
*
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-226:232
/*** Adds HCP Curious George for testing purposes.
*
* @throws FileNotFoundException
* @throws SQLException
* @throws IOException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-237:243
/*** Adds HCP John Zoidberg for testing purposes.
*
* @throws FileNotFoundException
* @throws SQLException
* @throws IOException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-252:257
/*** Adds HCP Brooke Tran with Specialty Optometrist.
* @throws FileNotFoundException
* @throws SQLException
* @throws IOException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-262:267
/*** Adds HCP Lamar Bridges with Specialty Ophthalmologist.
* @throws FileNotFoundException
* @throws SQLException
* @throws IOException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-347:354
/*** Adds drugs Midichlominene and Midichlomaxene for UC10 and UC37 testing
* purposes.
*
* @throws FileNotFoundException
* @throws SQLException
* @throws IOException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-365:370
/*** Set up the outcome of Acceptance Scenario 1 of UC83, which results in the creation of an Ophthalmology office visit for Brody Franco.
* @throws SQLException
* @throws FileNotFoundException
* @throws IOException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-375:380
/*** Set up the outcome of Acceptance Scenario 2 of UC83, which results in the creation of an Ophthalmology office visit for Freya Chandler.
* @throws SQLException
* @throws FileNotFoundException
* @throws IOException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-385:390
/*** Set up the preconditions for Acceptance Scenario 3 of UC84, which results in the creation of an Ophthalmology office visit for dependent Brittany Franco.
* @throws SQLException
* @throws FileNotFoundException
* @throws IOException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-395:400
/*** Set up the preconditions for Acceptance Scenario 2 of UC88, which results in the creation of an Ophthalmology Office Visit Request for Brody Franco.
* @throws SQLException
* @throws FileNotFoundException
* @throws IOException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-560:566
/*** Adds patient Dare Devil for testing purposes.
*
* @throws FileNotFoundException
* @throws SQLException
* @throws IOException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-572:578
/*** Adds patient Devils Advocate for testing purposes.
*
* @throws FileNotFoundException
* @throws SQLException
* @throws IOException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-584:590
/*** Adds patient Trend Setter for testing purposes.
*
* @throws FileNotFoundException
* @throws SQLException
* @throws IOException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-596:602
/*** Adds patient Philip Fry for testing purposes.
*
* @throws FileNotFoundException
* @throws SQLException
* @throws IOException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-608:613
/*** Adds patient Brody Franco, used in the testing of UC83.
* @throws FileNotFoundException
* @throws SQLException
* @throws IOException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-618:623
/*** Adds patient Freya Chandler, used in the testing of UC83.
* @throws FileNotFoundException
* @throws SQLException
* @throws IOException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-628:633
/*** Adds patient Brittany Franco, used in the testing of UC84.
* @throws FileNotFoundException
* @throws SQLException
* @throws IOException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-638:643
/*** Adds patient James Franco, used in the testing of UC84.
* @throws FileNotFoundException
* @throws SQLException
* @throws IOException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-653:659
/*** Adds patient Anakin Skywalker for UC10 and UC37 testing purposes.
*
* @throws FileNotFoundException
* @throws SQLException
* @throws IOException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-943:943
// create patients Dare Devil and Devils Advocate

iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-944:944
// Devils Advocate is Dare Devil's Personal Representative

iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-949:957
/*** Adds additional DLHCPs to certain patients.
*
* MID DLHCPs --- ------ 1 9000000000, 9000000003
*
* @throws SQLException
* @throws FileNotFoundException
* @throws IOException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-969:971
/*** Generate test data for uc51 acceptance scenarios
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-976:978
/*** Generate test data for uc52 acceptance scenarios
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-983:985
/*** Generate test data for cdc health statistics
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-1025:1025
//Added so that the black box test plans for Use Case 32 can be run immediately after running TestDataGenerator

iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-1091:1091
//Added for UC83

iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-1094:1094
//Added for UC 86

iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-1127:1131
/***
* Generate records release data for uc56 acceptance scenarios Includes
* recordsrelease table data and UAP-HCP relations
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-1136:1140
/*** Generate dependency data for uc58 acceptance. Create a dependent user, a
* representative user, and establish representative relationship between
* the two.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-1145:1148
/*** Generate dependency data for uc59 acceptance. Create a dependent user and
* a representative user
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-1153:1156
/*** Generate dependency data for uc60 acceptance. Create a Patient and a HCP
* to bill the patient. Create a billed office visit the patient can view.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-1161:1164
/*** Generate dependency data for uc63 acceptance. Create two HCPs who are
* OB/GYNs Create seven new patients Give one patient a past pregnancy
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-1169:1175
/*** Generate dependency data for uc68 and uc69 acceptance. Create 3 patients
* and one hcp nutrionist. Patient Derek Morgan has no prior food diary
* entries. Patient Jennifer Jareau has 2 prior food diary entries. Patient
* Aaron Hotchner as 2 prior food diary entries. HCP Spencer Reid is a
* nutrition specialist. Give 2 of the 3 patients food diary information
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-1180:1187
/*** Inserts the user Emily Prentiss into the system and gives her one food
* diary entry.
*
* @throws SQLException
* @throws FileNotFoundException
* @throws IOException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-1192:1199
/*** Inserts the user Emily Prentiss into the system and gives her one food
* diary entry.
*
* @throws SQLException
* @throws FileNotFoundException
* @throws IOException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-1204:1208
/*** Generate dependency data for uc63 acceptance. NOTE: also executes the
* above method because the patients created above are also required for
* this use case. Give three patients initial obstetrics records.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-1214:1216
/*** Generate a list of reviews for 2 HCP's by 3 diff patients.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-1222:1224
/*** generate the dependency of Baby Programmer on Andy Programmer
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-1230:1232
/*** generate the dependency of Baby Programmer on Andy Programmer
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-1238:1240
/*** Generates extra hcps with specialty of nutritionist
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-1247:1253
/*** Inserts some food entries for Random Person into the system.
*
* @throws SQLException
* @throws FileNotFoundException
* @throws IOException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-1258:1264
/*** Inserts some sleep entries for Random Person into the system.
*
* @throws SQLException
* @throws FileNotFoundException
* @throws IOException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-1269:1276
/*** Inserts a fitness HCP (Duyu Ivanlyft) and some exercise entries for
* Random Person into the system.
*
* @throws SQLException
* @throws FileNotFoundException
* @throws IOException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-1281:1287
/*** Inserts a optometristVisit into the system
*
* @throws SQLException
* @throws FileNotFoundException
* @throws IOException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\datagenerators\TestDataGenerator.java-1292:1297
/*** Do we have zipcodes?
*
* @return Whether or not we have zipcodes.
* @throws SQLException
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\DateUtilTest.java-21:21
// This test is intended to test the logic of the conversion java.util.Date to the java.sql.Date

iTrust_v21\test\edu\ncsu\csc\itrust\unit\DateUtilTest.java-22:22
// Along with the intent of "years ago".

iTrust_v21\test\edu\ncsu\csc\itrust\unit\DateUtilTest.java-23:23
// This test no longer tests the arithmetic of adding/subtracting years, we assume Java got that right

iTrust_v21\test\edu\ncsu\csc\itrust\unit\db\DBBuilderTest.java-8:8
// Make sure that the actual database can be rebuilt

iTrust_v21\test\edu\ncsu\csc\itrust\unit\db\DBBuilderTest.java-9:9
// This is run twice so that we check the "drop tables" script

iTrust_v21\test\edu\ncsu\csc\itrust\unit\DBBuilder.java-14:16
/*** Drops and rebuilds the entire database. Also provides some utility methods. DO NOT PUT TEST DATA HERE!!!
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\EmailUtilTest.java-12:12
// Note: this test can be deleted once you switch to a "real" email util

iTrust_v21\test\edu\ncsu\csc\itrust\unit\ErrorListTest.java-9:9
// test add if not null

iTrust_v21\test\edu\ncsu\csc\itrust\unit\ErrorListTest.java-15:15
// test iterator too

iTrust_v21\test\edu\ncsu\csc\itrust\unit\report\DemographicReportFilterTest.java-392:392
//exception is good.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\report\DemographicReportFilterTest.java-404:404
//exception is good.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\report\DemographicReportFilterTest.java-545:545
//exception is good

iTrust_v21\test\edu\ncsu\csc\itrust\unit\report\DemographicReportFilterTest.java-557:557
//exception is good

iTrust_v21\test\edu\ncsu\csc\itrust\unit\risk\factors\EthnicityFactorTest.java-33:33
// May not make sense here, but this shows what the method does.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\risk\factors\SmokingFactorTest.java-15:17
/*** SmokingFactorTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\risk\factors\SmokingFactorTest.java-31:34
/*** testHasHistory
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\risk\factors\SmokingFactorTest.java-39:42
/*** testHasNoHistory
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\risk\factors\SmokingFactorTest.java-48:51
/*** testDBException
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\risk\factors\WeightFactorTest.java-34:34
// Rationale: can't say they have the risk factor if the info is missing

iTrust_v21\test\edu\ncsu\csc\itrust\unit\risk\Type1DiabetesTest.java-29:29
// Note: patient 2 does NOT qualify for the disease, see the next test

iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\CustomJSPTagsTest.java-17:21
/***
*
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\CustomJSPTagsTest.java-24:24
// This class uses an advanced concept not taught in CSC326 at NCSU called Mock Objects.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\CustomJSPTagsTest.java-25:25
// Feel free to take a look at how this works, but know that you will not need to know mock objects

iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\CustomJSPTagsTest.java-26:26
// to do nearly everything in iTrust. Unless your assignment mentions mock objects somewhere, you should

iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\CustomJSPTagsTest.java-27:27
// not need them.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\CustomJSPTagsTest.java-28:28
//

iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\CustomJSPTagsTest.java-29:29
// But, if you are interested in a cool unit testing concept, feel free to look at this code as an

iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\CustomJSPTagsTest.java-30:30
// example.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\CustomJSPTagsTest.java-31:31
//

iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\CustomJSPTagsTest.java-32:32
// This class uses the EasyMock library to manage the mock objects. http://easymock.org/

iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\CustomJSPTagsTest.java-51:51
// we're okay with any strings written here - normally you want to be more specific

iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\CustomJSPTagsTest.java-71:71
// we're okay with any strings written here - normally you want to be more specific

iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\CustomJSPTagsTest.java-84:84
// we're okay with any strings written here - normally you want to be more specific

iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\CustomJSPTagsTest.java-106:106
// we're okay with any strings written here - normally you want to be more specific

iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\CustomJSPTagsTest.java-119:119
// we're okay with any strings written here - normally you want to be more specific

iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\CustomJSPTagsTest.java-146:146
// we're okay with any strings written here - normally you want to be more specific

iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\HealthRecordsXMLGeneratorTest.java-31:33
/*** Method to establish mock objects, database tables, and establish mock settings
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\HealthRecordsXMLGeneratorTest.java-54:54
//		when(response.getContentType()).thenReturn("text/xml");

iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\HealthRecordsXMLGeneratorTest.java-62:62
//		assertTrue(response.getContentType().equals("text/xml"));

iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\HealthRecordsXMLGeneratorTest.java-65:67
/*** Servlet instance of larger servlet class for testing purposes
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\ProductionConnectionDriverTest.java-11:15
/***
*
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\ProductionConnectionDriverTest.java-18:18
// This class uses an advanced concept not taught in CSC326 at NCSU called Mock Objects.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\ProductionConnectionDriverTest.java-19:19
// Feel free to take a look at how this works, but know that you will not need to know mock objects

iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\ProductionConnectionDriverTest.java-20:20
// to do nearly everything in iTrust. Unless your assignment mentions mock objects somewhere, you should

iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\ProductionConnectionDriverTest.java-21:21
// not need them.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\ProductionConnectionDriverTest.java-22:22
//

iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\ProductionConnectionDriverTest.java-23:23
// But, if you are interested in a cool unit testing concept, feel free to look at this code as an

iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\ProductionConnectionDriverTest.java-24:24
// example.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\ProductionConnectionDriverTest.java-25:25
//

iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\ProductionConnectionDriverTest.java-26:26
// This class uses the EasyMock library to manage the mock objects. http://easymock.org/

iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\RecordsReleaseServletTest.java-19:20
/***/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\RecordsReleaseServletTest.java-32:34
/*** Method to establish mock objects, database tables, and establish mock settings
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\RecordsReleaseServletTest.java-49:52
/*** testRecordsReleasePost
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\RecordsReleaseServletTest.java-96:98
/*** testRecordsReleasePostFail
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\RecordsReleaseServletTest.java-123:126
/*** Servlet instance of larger servlet class for testing purposes
* 	 *
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\SessionTimeoutListenerTest.java-19:19
// This uses a rudimentary mock object system - where we create these objects that are

iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\SessionTimeoutListenerTest.java-20:20
// essentially stubs, except for keeping track of info passed to them.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\serverutils\WardRoomCRUDServletTest.java-15:18
/***
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\testutils\ActionTestWithMocks.java-32:53
/*** This class is used to create some of the basic mock objects for iTrust. This keeps one control for all unit
* tests, then resets it for each usage.
*
* To use this class:
* <ol>
* <li>Extend this class instead of TestCase</li>
* <li>Run initMocks in the setUp method</li>
* <li>Use the mock objects as you wish. You don't need to worry about factory.getDAO-type methods - those are
* set up to be expected a call any number of times</li>
* </ol>
*
* By default, control is set up to a "nice" control.
*
* Yes, everything in this class is protected static - which is not typically desirable. However, this is a
* special test utility that takes advantage of re-using mocks. Mock objects are created once and then reset
* every time initMocks is used. This has a HUGE performance advantage as creating all of these new Mocks
* takes 500ms, but resetting them takes 5ms.
*
*   Meneely
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\testutils\BadBean.java-4:4
// To make the coverage work...

iTrust_v21\test\edu\ncsu\csc\itrust\unit\testutils\EvilDAOFactory.java-8:17
/*** This class is an "evil" (or Diabolical) test connection driver that will not give you a connection, but
* instead will throw a special SQLException every time. Unit tests need to test this catch block and assert
* the SQLException message. <br />
* <br />
* It's implemented as a singleton to make unit tests easier (just a pointer comparison)
*
*
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\testutils\EvilDAOFactory.java-34:34
// Here's how this behavior works: you can set EvilDAOFactory to count down to 0, giving correct

iTrust_v21\test\edu\ncsu\csc\itrust\unit\testutils\EvilDAOFactory.java-35:35
// connections the whole way. Then, when you want it to, it starts throwing exceptions

iTrust_v21\test\edu\ncsu\csc\itrust\unit\testutils\TestBean.java-4:4
// Empty class isn't used at all - this is just used as a test hook into testing BeanValidator.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\testutils\TestDAOFactory.java-18:29
/*** This class pulls the JDBC driver information from Tomcat's context.xml file in
* WebRoot/META-INF/context.xml. This is done only for convenience - so that you only have to pull your JDBC
* info from one place (context.xml)<br />
* <br />
* The tangled mess you see here is SAX, the XML-parser and XPath, an XML querying language. Note that this
* class is only ever constructed once since DAOFactory only constructs up to 2 instances of itself.<br />
* <br />
* Also, you'll notice that we're using a "BasicDataSource" to obtain connections instead of the usual
* DriverManager. That's because we're using Tomcat's built-in database pooling mechanism. It's purely for
* performance in this case.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\EditOfficeVisitValidatorTest.java-9:12
/*** Test office visit validator
*
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\EditOfficeVisitValidatorTest.java-24:27
/*** test errors made on patients
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\HealthRecordBeanValidatorTest.java-56:56
//good

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\HealthRecordBeanValidatorTest.java-71:71
//good

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\HealthRecordBeanValidatorTest.java-90:90
//good

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\HealthRecordBeanValidatorTest.java-104:104
//good

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\HealthRecordBeanValidatorTest.java-118:118
//good

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\HealthRecordBeanValidatorTest.java-137:137
//good

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\LabProcedureValidatorTest.java-9:11
/*** LabProcedureValidatorTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\LabProcedureValidatorTest.java-14:17
/*** testLabProcedureAllCorrect
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\LabProcedureValidatorTest.java-28:31
/*** testLabProcedureAllErrors
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\LabProcedureValidatorTest.java-55:58
/*** testValidNumericalResults
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\LabProcedureValidatorTest.java-75:78
/*** testInvalidNumericalResults
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\OphthalmologyScheduleValidatorTest.java-33:33
//do nothing, we made it

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\OphthalmologyScheduleValidatorTest.java-50:50
//Won't happen

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\OphthalmologyScheduleValidatorTest.java-56:56
//do nothing, we made it

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\OphthalmologyScheduleValidatorTest.java-73:73
//do nothing, we made it

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\OphthalmologySurgeryValidatorTest.java-28:28
//do nothing, we made it

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\OphthalmologySurgeryValidatorTest.java-45:45
//Notice that no cylinder is given

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\OphthalmologySurgeryValidatorTest.java-71:71
//Notice that no axis is given

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\OphthalmologySurgeryValidatorTest.java-77:77
//do nothing, this bean is supposed to be invalid

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\OphthalmologySurgeryValidatorTest.java-153:153
//do nothing, this bean should fail

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\OphthalmologyValidatorTest.java-28:28
//do nothing, we made it

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\OphthalmologyValidatorTest.java-45:45
//Notice that no cylinder is given

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\OphthalmologyValidatorTest.java-71:71
//Notice that no axis is given

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\OphthalmologyValidatorTest.java-77:77
//do nothing, this bean is supposed to be invalid

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\OphthalmologyValidatorTest.java-153:153
//do nothing, this bean should fail

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientInstructionsBeanValidatorTest.java-14:14
// Initialize a bean to valid values.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientInstructionsBeanValidatorTest.java-30:30
// Ensure the bean used throughout this test case really is valid.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientInstructionsBeanValidatorTest.java-67:67
// passed.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientInstructionsBeanValidatorTest.java-75:75
// passed.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientInstructionsBeanValidatorTest.java-83:83
// passed.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientInstructionsBeanValidatorTest.java-91:91
// passed.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientInstructionsBeanValidatorTest.java-125:125
// passed.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientInstructionsBeanValidatorTest.java-133:133
// passed.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientInstructionsBeanValidatorTest.java-141:141
// passed.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientInstructionsBeanValidatorTest.java-149:149
// passed.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientInstructionsBeanValidatorTest.java-183:183
// passed.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientInstructionsBeanValidatorTest.java-191:191
// passed.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientInstructionsBeanValidatorTest.java-199:199
// passed.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientInstructionsBeanValidatorTest.java-207:207
// passed.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientValidatorTest.java-10:12
/*** PatientValidatorTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientValidatorTest.java-17:20
/*** testPatientAllCorrect
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientValidatorTest.java-58:61
/*** testPatientAllErrors
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientValidatorTest.java-128:130
/*** testFutureBirthError
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientValidatorTest.java-171:173
/*** testCauseOfDeathValidation
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientValidatorTest.java-214:216
/** JUnit test for bug #2 on the bug list
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientValidatorTest.java-217:220
/*** testPatientTopicalNoteWithQUotationMark
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientValidatorTest.java-258:260
/** Test for threat model - Last name too long.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientValidatorTest.java-261:264
/*** testPatientWithLongLastName
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientValidatorTest.java-309:312
/*** testPatientWithValidCardNumbers
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientValidatorTest.java-371:374
/*** testPatientWithBadCardNumbers
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientValidatorTest.java-420:420
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientValidatorTest.java-429:429
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientValidatorTest.java-438:438
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientValidatorTest.java-447:447
//TODO

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\PatientValidatorTest.java-453:456
/*** testMFWithPersonnelMID
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\RecordsReleaseBeanValidatorTest.java-40:40
//good

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\RecordsReleaseBeanValidatorTest.java-59:59
//good

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\RecordsReleaseBeanValidatorTest.java-78:78
//good

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\RecordsReleaseBeanValidatorTest.java-97:97
//good

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\RecordsReleaseBeanValidatorTest.java-116:116
//good

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\RecordsReleaseBeanValidatorTest.java-135:135
//good

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\RecordsReleaseBeanValidatorTest.java-154:154
//good

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\ReferralBeanValidatorTest.java-14:14
// Initialize a bean to valid values.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\ReferralBeanValidatorTest.java-34:34
// Ensure the bean used throughout this test case really is valid.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\ReferralBeanValidatorTest.java-50:50
//  a-zA-Z0-9\\s'\"?!:;\\-.,_\n\t()\\\\/

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\ReferralBeanValidatorTest.java-72:72
// passed.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\ReferralBeanValidatorTest.java-80:80
// passed.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\ReferralBeanValidatorTest.java-88:88
// passed.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\bean\ReferralBeanValidatorTest.java-96:96
// passed.

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\BeanValidatorTest.java-47:49
/*** Test method to see if colon is accepted in notes.
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\regex\EmailValidatorTest.java-37:37
//Now legal according to http://tools.ietf.org/html/rfc2822

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\regex\EmailValidatorTest.java-44:44
//This is now legal should validate see above link

iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\regex\HospitalNameValidatorTest.java-7:9
/*** HospitalNameValidator
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\regex\HospitalNameValidatorTest.java-16:19
/*** testHospitalNameGood
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\regex\HospitalNameValidatorTest.java-26:29
/*** testHospitalNameTooLong
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\regex\HospitalNameValidatorTest.java-40:42
/*** testHospitalNameBadChars
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\regex\HospitalNameValidatorTest.java-48:50
/*** testHospitalNameTooShort
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\regex\NotesValidatorTest.java-7:9
/*** NotesValidatorTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\regex\NotesValidatorTest.java-16:19
/*** testNotesGood
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\validate\regex\NotesValidatorTest.java-26:29
/*** testNotesTooLong
* @throws Exception
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\XmlGeneratorTest.java-12:14
/*** XmlGeneratorTest
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\XmlGeneratorTest.java-17:19
/*** testXmlEmpty
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\XmlGeneratorTest.java-31:33
/*** testtwoPatient
*/


iTrust_v21\test\edu\ncsu\csc\itrust\unit\XmlGeneratorTest.java-37:37
//set up test headers

iTrust_v21\test\edu\ncsu\csc\itrust\unit\XmlGeneratorTest.java-43:43
// set up test patient

